package com.vodafone.er.ecom.proxy.getsubscriptions;

import com.vizzavi.ecommerce.business.charging.PurchaseAttributes;
import com.vizzavi.ecommerce.business.charging.PurchaseAuthorization;
import com.vizzavi.ecommerce.business.common.EcomApiFactory;
import com.vizzavi.ecommerce.business.common.EcommerceException;
import com.vizzavi.ecommerce.business.selfcare.Subscription;
import org.assertj.core.api.SoftAssertions;
import org.junit.Test;

import java.util.Locale;
import java.util.Random;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Created by Ravi Aghera
 */
public class GetSubscription10_IT {

    private SoftAssertions softly = new SoftAssertions();

    @Test
    public void getSubscription10() throws EcommerceException {
        final String msisdn = String.valueOf(new Random().nextInt());
        final String packageId = "pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*";

        PurchaseAuthorization auth = EcomApiFactory.getPurchaseApi(Locale.UK).purchasePackageMsisdn("test", msisdn, packageId, new PurchaseAttributes());
        assertTrue(auth.isSuccess());

        System.out.println("TransactionIdLong: " + auth.getPackageSubscriptionId());

        Subscription result = EcomApiFactory.getSelfcareApi(Locale.UK).getSubscription("test", msisdn, 0, auth.getPackageSubscriptionId());
        assertNotNull(result);

//        softly.assertThat(result.getPurchasedServices().length ).as(" result.getPurchasedServices().length" ).isEqualTo(1) ;
//        softly.assertThat(result.getPurchasedServices()[0].getId() ).as(" result.getPurchasedServices()[0].getId()" ).isEqualTo(new Long(5080)) ;
//        softly.assertThat(result.getPurchasedServices()[0].getStatus() ).as(" result.getPurchasedServices()[0].getStatus()" ).isEqualTo(201) ;
//        softly.assertThat(result.getPurchasedServices()[0].getServiceId() ).as(" result.getPurchasedServices()[0].getServiceId()" ).isEqualTo("sAlt");
//        softly.assertThat(result.getPurchasedServices()[0].getServiceClass() ).as(" result.getPurchasedServices()[0].getServiceClass()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getUpdateTimeStamp() ).as(" result.getPurchasedServices()[0].getUpdateTimeStamp()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getProvStatus() ).as(" result.getPurchasedServices()[0].getProvStatus()" ).isEqualTo(221) ;
//        softly.assertThat(result.getPurchasedServices()[0].getLastProvisionUpdate() ).as(" result.getPurchasedServices()[0].getLastProvisionUpdate()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getSubscription() ).as(" result.getPurchasedServices()[0].getSubscription()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getNonRefundDescription() ).as(" result.getPurchasedServices()[0].getNonRefundDescription()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getCountryId() ).as(" result.getPurchasedServices()[0].getCountryId()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getProvisioningTag() ).as(" result.getPurchasedServices()[0].getProvisioningTag()" ).isEqualTo("N/A");
//        softly.assertThat(result.getPurchasedServices()[0].isProvisionOnUsage() ).as(" result.getPurchasedServices()[0].isProvisionOnUsage()" ).isFalse() ;
////check size of array!
//        softly.assertThat(result.getPurchasedServices().length ).as(" result.getPurchasedServices().length" ).isEqualTo(1) ;
//        softly.assertThat(result.getPurchasedServices()[0].getId() ).as(" result.getPurchasedServices()[0].getId()" ).isEqualTo(new Long(5080)) ;
//        softly.assertThat(result.getPurchasedServices()[0].getStatus() ).as(" result.getPurchasedServices()[0].getStatus()" ).isEqualTo(201) ;
//        softly.assertThat(result.getPurchasedServices()[0].getServiceId() ).as(" result.getPurchasedServices()[0].getServiceId()" ).isEqualTo("sAlt");
//        softly.assertThat(result.getPurchasedServices()[0].getServiceClass() ).as(" result.getPurchasedServices()[0].getServiceClass()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getUpdateTimeStamp() ).as(" result.getPurchasedServices()[0].getUpdateTimeStamp()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getProvStatus() ).as(" result.getPurchasedServices()[0].getProvStatus()" ).isEqualTo(221) ;
//        softly.assertThat(result.getPurchasedServices()[0].getLastProvisionUpdate() ).as(" result.getPurchasedServices()[0].getLastProvisionUpdate()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getSubscription() ).as(" result.getPurchasedServices()[0].getSubscription()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getNonRefundDescription() ).as(" result.getPurchasedServices()[0].getNonRefundDescription()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getCountryId() ).as(" result.getPurchasedServices()[0].getCountryId()" ).isNull();
//        softly.assertThat(result.getPurchasedServices()[0].getProvisioningTag() ).as(" result.getPurchasedServices()[0].getProvisioningTag()" ).isEqualTo("N/A");
//        softly.assertThat(result.getPurchasedServices()[0].isProvisionOnUsage() ).as(" result.getPurchasedServices()[0].isProvisionOnUsage()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.CatalogPackage
        softly.assertThat(result.getPackage().getName() ).as(" result.getPackage().getName()" ).isEqualTo("2 Usage Alternative Payment Pkg");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getPackage().getResource().getName() ).as(" result.getPackage().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPackage().getResource().isToken() ).as(" result.getPackage().getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().isUsageToken() ).as(" result.getPackage().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().isPayToken() ).as(" result.getPackage().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().getResourceSymbol() ).as(" result.getPackage().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPackage().getResource().getDescription() ).as(" result.getPackage().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPackage().getResource().isCurrency() ).as(" result.getPackage().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPackage().getResource().isResource() ).as(" result.getPackage().getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().getResourceName() ).as(" result.getPackage().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPackage().getResource().getCode() ).as(" result.getPackage().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPackage().getResource().getCountryId() ).as(" result.getPackage().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getKey() ).as(" result.getPackage().getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPriority() ).as(" result.getPackage().getPriority()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getId() ).as(" result.getPackage().getId()" ).isEqualTo("pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(result.getPackage().isActive() ).as(" result.getPackage().isActive()" ).isTrue() ;
// java.util.HashMap
        softly.assertThat(result.getPackage().getTaxCode() ).as(" result.getPackage().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPackage().getParentPackageId() ).as(" result.getPackage().getParentPackageId()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricingText1() ).as(" result.getPackage().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricingText2() ).as(" result.getPackage().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getDescription() ).as(" result.getPackage().getDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getRate() ).as(" result.getPackage().getRate()" ).isEqualTo(new Double(11.75)) ;
// java.util.HashMap
        softly.assertThat(result.getPackage().isReserveOnly() ).as(" result.getPackage().isReserveOnly()" ).isFalse() ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPackage().isOriginal() ).as(" result.getPackage().isOriginal()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricingModel() ).as(" result.getPackage().getPricingModel()" ).isNull();
// com.vizzavi.ecommerce.business.catalog.PricePoint
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getPackage().getPricePoint().getResource().getName() ).as(" result.getPackage().getPricePoint().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPackage().getPricePoint().getResource().isToken() ).as(" result.getPackage().getPricePoint().getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().isUsageToken() ).as(" result.getPackage().getPricePoint().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().isPayToken() ).as(" result.getPackage().getPricePoint().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().getResourceSymbol() ).as(" result.getPackage().getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPackage().getPricePoint().getResource().getDescription() ).as(" result.getPackage().getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPackage().getPricePoint().getResource().isCurrency() ).as(" result.getPackage().getPricePoint().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().isResource() ).as(" result.getPackage().getPricePoint().getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().getResourceName() ).as(" result.getPackage().getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPackage().getPricePoint().getResource().getCode() ).as(" result.getPackage().getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().getCountryId() ).as(" result.getPackage().getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getKey() ).as(" result.getPackage().getPricePoint().getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getId() ).as(" result.getPackage().getPricePoint().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(result.getPackage().getPricePoint().isActive() ).as(" result.getPackage().getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().isPreOrder() ).as(" result.getPackage().getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getTaxRate() ).as(" result.getPackage().getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getPackage().getPricePoint().getTaxCode() ).as(" result.getPackage().getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPackage().getPricePoint().getLinkedByTrialPricepoint() ).as(" result.getPackage().getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getStartDate() ).as(" result.getPackage().getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getResourceBalances() ).as(" result.getPackage().getPricePoint().getResourceBalances()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getStandardRate() ).as(" result.getPackage().getPricePoint().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPackage().getPricePoint().getNetRate() ).as(" result.getPackage().getPricePoint().getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isAlwaysValidateMsisdn() ).as(" result.getPackage().getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isDiscount() ).as(" result.getPackage().getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getDiscountPromoText() ).as(" result.getPackage().getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getPackageId() ).as(" result.getPackage().getPricePoint().getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(result.getPackage().getPricePoint().getContentId() ).as(" result.getPackage().getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getPricingText1() ).as(" result.getPackage().getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getPricingText2() ).as(" result.getPackage().getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getUsageTime() ).as(" result.getPackage().getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getAccessDuration() ).as(" result.getPackage().getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isZeroCostIgnore() ).as(" result.getPackage().getPricePoint().isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getCustomResourceBalances() ).as(" result.getPackage().getPricePoint().getCustomResourceBalances()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getDescription() ).as(" result.getPackage().getPricePoint().getDescription()" ).isEqualTo("Recurring 7 day");
        softly.assertThat(result.getPackage().getPricePoint().getRate() ).as(" result.getPackage().getPricePoint().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPackage().getPricePoint().getPricingModelTier() ).as(" result.getPackage().getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isArchived() ).as(" result.getPackage().getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isBasePricePoint() ).as(" result.getPackage().getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getAccessDevice() ).as(" result.getPackage().getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getAlternativeRate() ).as(" result.getPackage().getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getBalanceImpacts().length ).as(" result.getPackage().getPricePoint().getBalanceImpacts().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isTrial() ).as(" result.getPackage().getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getGlid() ).as(" result.getPackage().getPricePoint().getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPackage().getPricePoint().getPricepointIdLink() ).as(" result.getPackage().getPricePoint().getPricepointIdLink()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().isPreview() ).as(" result.getPackage().getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getInteractiveFlag() ).as(" result.getPackage().getPricePoint().getInteractiveFlag()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().isForcedPurchase() ).as(" result.getPackage().getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isSubscriptionDuplicate() ).as(" result.getPackage().getPricePoint().isSubscriptionDuplicate()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getFixedExpiryDate() ).as(" result.getPackage().getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isReserveOnly() ).as(" result.getPackage().getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getMinSubPeriod() ).as(" result.getPackage().getPricePoint().getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getPenaltyCharges() ).as(" result.getPackage().getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getCancellation() ).as(" result.getPackage().getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getMonthEndSubscription() ).as(" result.getPackage().getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(result.getPackage().getPricePoint().isHistoric() ).as(" result.getPackage().getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getFixedRecurrence() ).as(" result.getPackage().getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isFixedRecurringPricePoint() ).as(" result.getPackage().getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isReceipting() ).as(" result.getPackage().getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getReceiptingAttribute() ).as(" result.getPackage().getPricePoint().getReceiptingAttribute()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getOrder() ).as(" result.getPackage().getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getPaymentHandler() ).as(" result.getPackage().getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getNonMatchAllUserGroups().length ).as(" result.getPackage().getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isPromo() ).as(" result.getPackage().getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isSubmitToPaymentHandler() ).as(" result.getPackage().getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isSuppressToPaymentHandler() ).as(" result.getPackage().getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getPricingTextTemplateName1() ).as(" result.getPackage().getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricingTextTemplateName2() ).as(" result.getPackage().getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getTranslatedPricingText1() ).as(" result.getPackage().getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getTranslatedPricingText2() ).as(" result.getPackage().getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getRecurrenceDay() ).as(" result.getPackage().getPricePoint().getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPackage().getPricePoint().isAlignWithExternal() ).as(" result.getPackage().getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getGracePeriod() ).as(" result.getPackage().getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getRetryFrequency() ).as(" result.getPackage().getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getSuspensionPeriod() ).as(" result.getPackage().getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" result.getPackage().getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getTranslatedPricingText() ).as(" result.getPackage().getPricePoint().getTranslatedPricingText()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getFairUsageLimit() ).as(" result.getPackage().getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getFairUsagePeriod() ).as(" result.getPackage().getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getFairUsagePeriodUnit() ).as(" result.getPackage().getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(result.getPackage().getPricePoint().getExtensionPeriod() ).as(" result.getPackage().getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isIncludeServiceForPackageFUP() ).as(" result.getPackage().getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isFairUsagePolicyEnabled() ).as(" result.getPackage().getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isTariff() ).as(" result.getPackage().getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isHideForPurchaseOptions() ).as(" result.getPackage().getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getName() ).as(" result.getPackage().getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getKey() ).as(" result.getPackage().getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getTaxRate() ).as(" result.getPackage().getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getTaxCode() ).as(" result.getPackage().getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPackage().getPricePoint().getBalances() ).as(" result.getPackage().getPricePoint().getBalances()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isRecurring() ).as(" result.getPackage().getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" result.getPackage().getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getKey() ).as(" result.getPackage().getPricePoint().getPricePointTier().getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPricingModel() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getTier() ).as(" result.getPackage().getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().isDefaultPPT() ).as(" result.getPackage().getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPackageIdentifier() ).as(" result.getPackage().getPricePoint().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*_*_false_false_*");
        softly.assertThat(result.getPackage().getPricePoint().getServiceIdentifier() ).as(" result.getPackage().getPricePoint().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getName() ).as(" result.getPackage().getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isToken() ).as(" result.getPackage().getPricePoint().getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isUsageToken() ).as(" result.getPackage().getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isPayToken() ).as(" result.getPackage().getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getResourceSymbol() ).as(" result.getPackage().getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getDescription() ).as(" result.getPackage().getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isCurrency() ).as(" result.getPackage().getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isResource() ).as(" result.getPackage().getPricePoint().getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getResourceName() ).as(" result.getPackage().getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getCode() ).as(" result.getPackage().getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getCountryId() ).as(" result.getPackage().getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getStandardRateWithoutTax() ).as(" result.getPackage().getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isVolumeType() ).as(" result.getPackage().getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isOriginal() ).as(" result.getPackage().getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers().length ).as(" result.getPackage().getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getKey() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getTier() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getProtectedFk() ).as(" result.getPackage().getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getmPricingText1() ).as(" result.getPackage().getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getmPricingText2() ).as(" result.getPackage().getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().isNonRecurring() ).as(" result.getPackage().getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isEvent() ).as(" result.getPackage().getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getExpiryDate() ).as(" result.getPackage().getPricePoint().getExpiryDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getChannel() ).as(" result.getPackage().getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getMultiUsageMode() ).as(" result.getPackage().getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getNetworkCodeMatchMethod() ).as(" result.getPackage().getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isPreRatePriceGross() ).as(" result.getPackage().getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getPreRate() ).as(" result.getPackage().getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getPaymentInformation() ).as(" result.getPackage().getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getContentName() ).as(" result.getPackage().getPricePoint().getContentName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getAssetID() ).as(" result.getPackage().getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPremiumLevel() ).as(" result.getPackage().getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getReserveOnlyFlag() ).as(" result.getPackage().getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getSupplierId() ).as(" result.getPackage().getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getDeviceType() ).as(" result.getPackage().getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getUserGroups().length ).as(" result.getPackage().getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getPricePoint().getUserGroup() ).as(" result.getPackage().getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getPaymentType() ).as(" result.getPackage().getPricePoint().getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getEventDateTime() ).as(" result.getPackage().getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getEventUnits() ).as(" result.getPackage().getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getPromoCodes().length ).as(" result.getPackage().getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getBearerIds().length ).as(" result.getPackage().getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getPricePoint().getPromoCode() ).as(" result.getPackage().getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getDuration() ).as(" result.getPackage().getPricePoint().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(result.getPackage().getPricePoint().getChargingMethod() ).as(" result.getPackage().getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(result.getPackage().getPricePoint().getBearer() ).as(" result.getPackage().getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().isInteractive() ).as(" result.getPackage().getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().isIncludeUnavailable() ).as(" result.getPackage().getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getExpressFlag() ).as(" result.getPackage().getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isExpressFlag() ).as(" result.getPackage().getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isCancellationUsage() ).as(" result.getPackage().getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getTierName() ).as(" result.getPackage().getPricePoint().getTierName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPromoPrecode() ).as(" result.getPackage().getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getUniquePromoCode() ).as(" result.getPackage().getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPromoUniqueCode() ).as(" result.getPackage().getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getNextCycleDiscount() ).as(" result.getPackage().getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getHasHistoricPricePointFlag() ).as(" result.getPackage().getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isIsForRenewal() ).as(" result.getPackage().getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getTaxRateAsDouble() ).as(" result.getPackage().getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getAffiliateID() ).as(" result.getPackage().getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerId() ).as(" result.getPackage().getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getTariff() ).as(" result.getPackage().getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getAggregatorId() ).as(" result.getPackage().getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isForcePurchaseFlow() ).as(" result.getPackage().getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getReceipientMsisdn() ).as(" result.getPackage().getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getProductCode() ).as(" result.getPackage().getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getMerchantName() ).as(" result.getPackage().getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getInvoiceText() ).as(" result.getPackage().getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isReIssueEnabled() ).as(" result.getPackage().getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isReIssueFlagPresent() ).as(" result.getPackage().getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getShortPackageId() ).as(" result.getPackage().getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getHistoryStartDate() ).as(" result.getPackage().getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getVendorId() ).as(" result.getPackage().getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isIsForNextPaymentAmount() ).as(" result.getPackage().getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getRenewalPreRate() ).as(" result.getPackage().getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isOverrideDisallowPreRateFlag() ).as(" result.getPackage().getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getContentCategory() ).as(" result.getPackage().getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerUrl() ).as(" result.getPackage().getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerContactInfo() ).as(" result.getPackage().getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerEmail() ).as(" result.getPackage().getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerName() ).as(" result.getPackage().getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" result.getPackage().getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getPackage().getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getSubRenewalPricepointId() ).as(" result.getPackage().getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLinkPricepointId() ).as(" result.getPackage().getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getSubPurchaseTransactionTrial() ).as(" result.getPackage().getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" result.getPackage().getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" result.getPackage().getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getExtIdentifier1() ).as(" result.getPackage().getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExtIdentifier2() ).as(" result.getPackage().getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExtIdentifier3() ).as(" result.getPackage().getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getAccessChannel() ).as(" result.getPackage().getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPurchaseChannel() ).as(" result.getPackage().getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getDeviceID() ).as(" result.getPackage().getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLocal() ).as(" result.getPackage().getPricePoint().getLocal()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getMsisdn() ).as(" result.getPackage().getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLanguageLocale() ).as(" result.getPackage().getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLanguageCode() ).as(" result.getPackage().getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExternalField1() ).as(" result.getPackage().getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExternalField2() ).as(" result.getPackage().getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExternalTransId() ).as(" result.getPackage().getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getActiveSubscriptions() ).as(" result.getPackage().getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getCsrId() ).as(" result.getPackage().getPricePoint().getCsrId()" ).isNull();
        softly.assertThat(result.getPackage().isDefault() ).as(" result.getPackage().isDefault()" ).isFalse() ;
        softly.assertThat(result.getPackage().getUrl() ).as(" result.getPackage().getUrl()" ).isNull();
        softly.assertThat(result.getPackage().isGoodwillCredit() ).as(" result.getPackage().isGoodwillCredit()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPriceModels() ).as(" result.getPackage().getPriceModels()" ).isNull();
        softly.assertThat(result.getPackage().getFullPackagePricepointId() ).as(" result.getPackage().getFullPackagePricepointId()" ).isEqualTo("pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*");
// java.lang.Character
        softly.assertThat(result.getPackage().getSimplePackageId() ).as(" result.getPackage().getSimplePackageId()" ).isEqualTo("pAlt");
        softly.assertThat(result.getPackage().getNotificationCategory() ).as(" result.getPackage().getNotificationCategory()" ).isNullOrEmpty();
// com.vizzavi.ecommerce.business.catalog.internal.PaymentContentImpl
//        softly.assertThat(result.getPackage().getPaymentContent().getKey() ).as(" result.getPackage().getPaymentContent().getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(result.getPackage().getPaymentContent().getCategory() ).as(" result.getPackage().getPaymentContent().getCategory()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getDescription() ).as(" result.getPackage().getPaymentContent().getDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getMerchant() ).as(" result.getPackage().getPaymentContent().getMerchant()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getMerchantDescription() ).as(" result.getPackage().getPaymentContent().getMerchantDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getItemVolume() ).as(" result.getPackage().getPaymentContent().getItemVolume()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getServiceType() ).as(" result.getPackage().getPaymentContent().getServiceType()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getPromotion() ).as(" result.getPackage().getPaymentContent().getPromotion()" ).isNullOrEmpty();
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray().length ).as(" result.getPackage().getServiceArray().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getName() ).as(" result.getPackage().getServiceArray()[0].getName()" ).isEqualTo("Alternative Payment Service");
        softly.assertThat(result.getPackage().getServiceArray()[0].getKey() ).as(" result.getPackage().getServiceArray()[0].getKey()" ).isNull();
// java.util.HashSet
        softly.assertThat(result.getPackage().getServiceArray()[0].getId() ).as(" result.getPackage().getServiceArray()[0].getId()" ).isEqualTo("sAlt");
        softly.assertThat(result.getPackage().getServiceArray()[0].getDisplayName() ).as(" result.getPackage().getServiceArray()[0].getDisplayName()" ).isEqualTo("sAlt (Alternative Payment Service)");
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].getTaxCode() ).as(" result.getPackage().getServiceArray()[0].getTaxCode()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getContentCategory() ).as(" result.getPackage().getServiceArray()[0].getContentCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricingText1() ).as(" result.getPackage().getServiceArray()[0].getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricingText2() ).as(" result.getPackage().getServiceArray()[0].getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDescription() ).as(" result.getPackage().getServiceArray()[0].getDescription()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].isReserveOnly() ).as(" result.getPackage().getServiceArray()[0].isReserveOnly()" ).isFalse() ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].isDefaultService() ).as(" result.getPackage().getServiceArray()[0].isDefaultService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getProvisioningSystem() ).as(" result.getPackage().getServiceArray()[0].getProvisioningSystem()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getUsageId() ).as(" result.getPackage().getServiceArray()[0].getUsageId()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceCategory() ).as(" result.getPackage().getServiceArray()[0].getServiceCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDealName() ).as(" result.getPackage().getServiceArray()[0].getDealName()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDistributionChannel() ).as(" result.getPackage().getServiceArray()[0].getDistributionChannel()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getHighVolumeInterfaceLevel() ).as(" result.getPackage().getServiceArray()[0].getHighVolumeInterfaceLevel()" ).isEqualTo(998) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isHighVolumeInterface() ).as(" result.getPackage().getServiceArray()[0].isHighVolumeInterface()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceRevenueSharePartners().length ).as(" result.getPackage().getServiceArray()[0].getServiceRevenueSharePartners().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnerNum() ).as(" result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnerNum()" ).isEqualTo(0) ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnersPurchaseCh().length ).as(" result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnersPurchaseCh().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isReturnAllCatalogueServicesInfo() ).as(" result.getPackage().getServiceArray()[0].isReturnAllCatalogueServicesInfo()" ).isTrue() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getIndirectValue() ).as(" result.getPackage().getServiceArray()[0].getIndirectValue()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getIndirectValueFormat() ).as(" result.getPackage().getServiceArray()[0].getIndirectValueFormat()" ).isEqualTo("%");
        softly.assertThat(result.getPackage().getServiceArray()[0].getPromoValue() ).as(" result.getPackage().getServiceArray()[0].getPromoValue()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getPromoValueFormat() ).as(" result.getPackage().getServiceArray()[0].getPromoValueFormat()" ).isEqualTo("%");
        softly.assertThat(result.getPackage().getServiceArray()[0].getContentSubCategory() ).as(" result.getPackage().getServiceArray()[0].getContentSubCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getContentItem() ).as(" result.getPackage().getServiceArray()[0].getContentItem()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDeliveryMechanism() ).as(" result.getPackage().getServiceArray()[0].getDeliveryMechanism()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductCategory() ).as(" result.getPackage().getServiceArray()[0].getProductCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductSubCategory1() ).as(" result.getPackage().getServiceArray()[0].getProductSubCategory1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductSubCategory2() ).as(" result.getPackage().getServiceArray()[0].getProductSubCategory2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductWholesalePrice() ).as(" result.getPackage().getServiceArray()[0].getProductWholesalePrice()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductSelfRegulation() ).as(" result.getPackage().getServiceArray()[0].getProductSelfRegulation()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].isVolumeService() ).as(" result.getPackage().getServiceArray()[0].isVolumeService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductFk() ).as(" result.getPackage().getServiceArray()[0].getProductFk()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isServiceShareOverride() ).as(" result.getPackage().getServiceArray()[0].isServiceShareOverride()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isExpiredPackageService() ).as(" result.getPackage().getServiceArray()[0].isExpiredPackageService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getFixedUsageAmount() ).as(" result.getPackage().getServiceArray()[0].getFixedUsageAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getHasExpress() ).as(" result.getPackage().getServiceArray()[0].getHasExpress()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getHasDynamicDefault() ).as(" result.getPackage().getServiceArray()[0].getHasDynamicDefault()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getHasSuperPackage() ).as(" result.getPackage().getServiceArray()[0].getHasSuperPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isReturnTrialOptionsOnly() ).as(" result.getPackage().getServiceArray()[0].isReturnTrialOptionsOnly()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceClass() ).as(" result.getPackage().getServiceArray()[0].getServiceClass()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getBandRevenueShares() ).as(" result.getPackage().getServiceArray()[0].getBandRevenueShares()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isReIssuePermittedFlag() ).as(" result.getPackage().getServiceArray()[0].isReIssuePermittedFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getChargeableBy() ).as(" result.getPackage().getServiceArray()[0].getChargeableBy()" ).isEqualTo("Not Defined");
//check size of array!
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPackageIds().length ).as(" result.getPackage().getServiceArray()[0].getPackageIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isMicroService() ).as(" result.getPackage().getServiceArray()[0].isMicroService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getSuperPackageIds() ).as(" result.getPackage().getServiceArray()[0].getSuperPackageIds()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getmExternalServPricePlan() ).as(" result.getPackage().getServiceArray()[0].getmExternalServPricePlan()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].ismRefundable() ).as(" result.getPackage().getServiceArray()[0].ismRefundable()" ).isTrue() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].ismReturnTrialOptionsOnly() ).as(" result.getPackage().getServiceArray()[0].ismReturnTrialOptionsOnly()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isUseRateCard() ).as(" result.getPackage().getServiceArray()[0].isUseRateCard()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getInternalPartner() ).as(" result.getPackage().getServiceArray()[0].getInternalPartner()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getRateCardPartners() ).as(" result.getPackage().getServiceArray()[0].getRateCardPartners()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isUsageAllowedBeingProvisionedSub() ).as(" result.getPackage().getServiceArray()[0].isUsageAllowedBeingProvisionedSub()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isGlobalHandler() ).as(" result.getPackage().getServiceArray()[0].isGlobalHandler()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isGlobalHandlerNotification() ).as(" result.getPackage().getServiceArray()[0].isGlobalHandlerNotification()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getPriorityServiceRevenueSharePartner() ).as(" result.getPackage().getServiceArray()[0].getPriorityServiceRevenueSharePartner()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isUniqueServiceClass() ).as(" result.getPackage().getServiceArray()[0].isUniqueServiceClass()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricePoint() ).as(" result.getPackage().getServiceArray()[0].getPricePoint()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getUrl() ).as(" result.getPackage().getServiceArray()[0].getUrl()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getNotificationCategory() ).as(" result.getPackage().getServiceArray()[0].getNotificationCategory()" ).isNullOrEmpty();
// com.vizzavi.ecommerce.business.catalog.internal.PaymentContentImpl
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getKey() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getCategory() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getCategory()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getDescription() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getMerchant() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getMerchant()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getMerchantDescription() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getMerchantDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getItemVolume() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getItemVolume()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getServiceType() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getServiceType()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getPromotion() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getPromotion()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getNonRefundableDescription() ).as(" result.getPackage().getServiceArray()[0].getNonRefundableDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].isRefundable() ).as(" result.getPackage().getServiceArray()[0].isRefundable()" ).isTrue() ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricingModels().length ).as(" result.getPackage().getServiceArray()[0].getPricingModels().length" ).isEqualTo(0) ;
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].getSalesModel() ).as(" result.getPackage().getServiceArray()[0].getSalesModel()" ).isEqualTo("Reseller");
        softly.assertThat(result.getPackage().getServiceArray()[0].getProvisioningTag() ).as(" result.getPackage().getServiceArray()[0].getProvisioningTag()" ).isEqualTo("N/A");
        softly.assertThat(result.getPackage().getServiceArray()[0].isProvisionOnUsage() ).as(" result.getPackage().getServiceArray()[0].isProvisionOnUsage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceType() ).as(" result.getPackage().getServiceArray()[0].getServiceType()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPackage().isEventPackage() ).as(" result.getPackage().isEventPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isRecurringPackage() ).as(" result.getPackage().isRecurringPackage()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPackageType() ).as(" result.getPackage().getPackageType()" ).isEqualTo("Calendar");
        softly.assertThat(result.getPackage().getNonRefundableDescription() ).as(" result.getPackage().getNonRefundableDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().isRefundable() ).as(" result.getPackage().isRefundable()" ).isFalse() ;
        softly.assertThat(result.getPackage().isCalendarPackage() ).as(" result.getPackage().isCalendarPackage()" ).isTrue() ;
        softly.assertThat(result.getPackage().getProtectedType() ).as(" result.getPackage().getProtectedType()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getDynamicProtectedValue() ).as(" result.getPackage().getDynamicProtectedValue()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPurchaseMethod() ).as(" result.getPackage().getPurchaseMethod()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getKpiPackageProductCategory() ).as(" result.getPackage().getKpiPackageProductCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getKpiPackageType() ).as(" result.getPackage().getKpiPackageType()" ).isNullOrEmpty();
//check size of array!
        softly.assertThat(result.getPackage().getPricingModels().length ).as(" result.getPackage().getPricingModels().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().isExpressPurchase() ).as(" result.getPackage().isExpressPurchase()" ).isFalse() ;
        softly.assertThat(result.getPackage().isRecieptingFlag() ).as(" result.getPackage().isRecieptingFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().isPricePointOrder() ).as(" result.getPackage().isPricePointOrder()" ).isFalse() ;
        softly.assertThat(result.getPackage().isSuperPackage() ).as(" result.getPackage().isSuperPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isRevenueShareByUsage() ).as(" result.getPackage().isRevenueShareByUsage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isDynamicDefault() ).as(" result.getPackage().isDynamicDefault()" ).isFalse() ;
        softly.assertThat(result.getPackage().getACEPackage() ).as(" result.getPackage().getACEPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isUpSell() ).as(" result.getPackage().isUpSell()" ).isFalse() ;
// java.util.HashMap
        softly.assertThat(result.getPackage().getLogoId() ).as(" result.getPackage().getLogoId()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPackage().getPartnerInfo() ).as(" result.getPackage().getPartnerInfo()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getIsPackageModel() ).as(" result.getPackage().getIsPackageModel()" ).isFalse() ;
        softly.assertThat(result.getPackage().isParentPackage() ).as(" result.getPackage().isParentPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getChildPackages() ).as(" result.getPackage().getChildPackages()" ).isNull();
        softly.assertThat(result.getPackage().getServicesNotInPackageFairUsagePolicyList() ).as(" result.getPackage().getServicesNotInPackageFairUsagePolicyList()" ).isNull();
        softly.assertThat(result.getPackage().isHasParentSub() ).as(" result.getPackage().isHasParentSub()" ).isFalse() ;
        softly.assertThat(result.getPackage().getParentSubId() ).as(" result.getPackage().getParentSubId()" ).isNull();
        softly.assertThat(result.getPackage().isHasParentSubSuspendedResProv() ).as(" result.getPackage().isHasParentSubSuspendedResProv()" ).isFalse() ;
        softly.assertThat(result.getPackage().getParentSubStatus() ).as(" result.getPackage().getParentSubStatus()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().isDisallowCancellations() ).as(" result.getPackage().isDisallowCancellations()" ).isFalse() ;
        softly.assertThat(result.getPackage().getSalesModel() ).as(" result.getPackage().getSalesModel()" ).isEqualTo("Reseller");
        softly.assertThat(result.getPackage().getPackageClass() ).as(" result.getPackage().getPackageClass()" ).isNull();
        softly.assertThat(result.getPackage().isDataVoiceTariffInclusive() ).as(" result.getPackage().isDataVoiceTariffInclusive()" ).isFalse() ;
        softly.assertThat(result.getPackage().getNominalValue() ).as(" result.getPackage().getNominalValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().isUseBeingDeprovisionedStatus() ).as(" result.getPackage().isUseBeingDeprovisionedStatus()" ).isFalse() ;
        softly.assertThat(result.getPackage().getDisallowDuplicateSubPurchase() ).as(" result.getPackage().getDisallowDuplicateSubPurchase()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getNoActivePricepoints() ).as(" result.getPackage().getNoActivePricepoints()" ).isEqualTo(2) ;
        softly.assertThat(result.getPackage().isHasBalanceImpactsWithDate() ).as(" result.getPackage().isHasBalanceImpactsWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().isHasPricePointsWithDate() ).as(" result.getPackage().isHasPricePointsWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().isHasPromosWithDate() ).as(" result.getPackage().isHasPromosWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().isHasTaxRateWithDate() ).as(" result.getPackage().isHasTaxRateWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPromoCodeMap() ).as(" result.getPackage().getPromoCodeMap()" ).isNull();
        softly.assertThat(result.getPackage().getPromoCodeMapSize() ).as(" result.getPackage().getPromoCodeMapSize()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getActiveStatusAsString() ).as(" result.getPackage().getActiveStatusAsString()" ).isEqualTo("ACTIVE");
        softly.assertThat(result.getPackage().isUseRateCardService() ).as(" result.getPackage().isUseRateCardService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getRateCardServiceId() ).as(" result.getPackage().getRateCardServiceId()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().isUserGroupCalendarPricePointPackage() ).as(" result.getPackage().isUserGroupCalendarPricePointPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isUpsellDiscountProrated() ).as(" result.getPackage().isUpsellDiscountProrated()" ).isFalse() ;
        softly.assertThat(result.getPackage().isDisallowPrerate() ).as(" result.getPackage().isDisallowPrerate()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceNames().length ).as(" result.getPackage().getServiceNames().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getDefaultPartnerProvisioningId() ).as(" result.getPackage().getDefaultPartnerProvisioningId()" ).isNull();
        softly.assertThat(result.getPackage().getUserGroupComparisonAtRenewal() ).as(" result.getPackage().getUserGroupComparisonAtRenewal()" ).isEqualTo("SYSTEM");
        softly.assertThat(result.getCountry() ).as(" result.getCountry()" ).isNull();
        softly.assertThat(result.isActive() ).as(" result.isActive()" ).isTrue() ;
        softly.assertThat(result.getPaymentType() ).as(" result.getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(result.getPartnerId() ).as(" result.getPartnerId()" ).isNull();
        softly.assertThat(result.getMerchantName() ).as(" result.getMerchantName()" ).isNull();
        softly.assertThat(result.getRenewalPreRate() ).as(" result.getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getExtIdentifier1() ).as(" result.getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getExtIdentifier2() ).as(" result.getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getExtIdentifier3() ).as(" result.getExtIdentifier3()" ).isNull();
        softly.assertThat(result.isPromotional() ).as(" result.isPromotional()" ).isFalse() ;
        softly.assertThat(result.getPromotionalExpiryDate() ).as(" result.getPromotionalExpiryDate()" ).isNull();
        softly.assertThat(result.getStatus() ).as(" result.getStatus()" ).isEqualTo(1) ;
        softly.assertThat(result.getExternalSubId() ).as(" result.getExternalSubId()" ).isNull();
        softly.assertThat(result.getOptions() ).as(" result.getOptions()" ).isNull();
//check size of array!
        softly.assertThat(result.getResourceBalances().length ).as(" result.getResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getResourceBalances()[0].getResource().getName() ).as(" result.getResourceBalances()[0].getResource().getName()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(result.getResourceBalances()[0].getResource().isToken() ).as(" result.getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getResourceBalances()[0].getResource().isUsageToken() ).as(" result.getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getResourceBalances()[0].getResource().isPayToken() ).as(" result.getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getResourceBalances()[0].getResource().getResourceSymbol() ).as(" result.getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(result.getResourceBalances()[0].getResource().getDescription() ).as(" result.getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(result.getResourceBalances()[0].getResource().isCurrency() ).as(" result.getResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(result.getResourceBalances()[0].getResource().isResource() ).as(" result.getResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(result.getResourceBalances()[0].getResource().getResourceName() ).as(" result.getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(result.getResourceBalances()[0].getResource().getCode() ).as(" result.getResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(result.getResourceBalances()[0].getResource().getCountryId() ).as(" result.getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getResourceBalances()[0].getPackageId() ).as(" result.getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(result.getResourceBalances()[0].getSubscription() ).as(" result.getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(result.getResourceBalances()[0].getThreshold() ).as(" result.getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getResourceBalances()[0].getBalance() ).as(" result.getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(2.0)) ;
        softly.assertThat(result.getResourceBalances()[0].getSubscriptionId() ).as(" result.getResourceBalances()[0].getSubscriptionId()" ).isNotEmpty();
        softly.assertThat(result.getResourceBalances()[0].getSubscriptionIdLong() ).as(" result.getResourceBalances()[0].getSubscriptionIdLong()" ).isNotNull() ;
        softly.assertThat(result.getResourceBalances()[0].getOldestSubscriptionId() ).as(" result.getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(result.getMicroServiceSubList() ).as(" result.getMicroServiceSubList()" ).isNull();
        softly.assertThat(result.getPackageId() ).as(" result.getPackageId()" ).isNull();
        softly.assertThat(result.isArchived() ).as(" result.isArchived()" ).isFalse() ;
        softly.assertThat(result.getExtensionPeriod() ).as(" result.getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.isRecurring() ).as(" result.isRecurring()" ).isTrue() ;
        softly.assertThat(result.isSuspended() ).as(" result.isSuspended()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.PricePoint
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getPricePoint().getResource().getName() ).as(" result.getPricePoint().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPricePoint().getResource().isToken() ).as(" result.getPricePoint().getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResource().isUsageToken() ).as(" result.getPricePoint().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResource().isPayToken() ).as(" result.getPricePoint().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResource().getResourceSymbol() ).as(" result.getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPricePoint().getResource().getDescription() ).as(" result.getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPricePoint().getResource().isCurrency() ).as(" result.getPricePoint().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getResource().isResource() ).as(" result.getPricePoint().getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResource().getResourceName() ).as(" result.getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPricePoint().getResource().getCode() ).as(" result.getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPricePoint().getResource().getCountryId() ).as(" result.getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getKey() ).as(" result.getPricePoint().getKey()" ).isNull();
        softly.assertThat(result.getPricePoint().getId() ).as(" result.getPricePoint().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(result.getPricePoint().isActive() ).as(" result.getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().isPreOrder() ).as(" result.getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getTaxRate() ).as(" result.getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getPricePoint().getTaxCode() ).as(" result.getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPricePoint().getLinkedByTrialPricepoint() ).as(" result.getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getStartDate() ).as(" result.getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(result.getPricePoint().getResourceBalances() ).as(" result.getPricePoint().getResourceBalances()" ).isNull();
        softly.assertThat(result.getPricePoint().getStandardRate() ).as(" result.getPricePoint().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPricePoint().getNetRate() ).as(" result.getPricePoint().getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPricePoint().isAlwaysValidateMsisdn() ).as(" result.getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isDiscount() ).as(" result.getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getDiscountPromoText() ).as(" result.getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getPackageId() ).as(" result.getPricePoint().getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(result.getPricePoint().getContentId() ).as(" result.getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getPricingText1() ).as(" result.getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getPricingText2() ).as(" result.getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getUsageTime() ).as(" result.getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPricePoint().getAccessDuration() ).as(" result.getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPricePoint().isZeroCostIgnore() ).as(" result.getPricePoint().isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getCustomResourceBalances() ).as(" result.getPricePoint().getCustomResourceBalances()" ).isNull();
        softly.assertThat(result.getPricePoint().getDescription() ).as(" result.getPricePoint().getDescription()" ).isEqualTo("Recurring 7 day");
        softly.assertThat(result.getPricePoint().getRate() ).as(" result.getPricePoint().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPricePoint().getPricingModelTier() ).as(" result.getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(result.getPricePoint().isArchived() ).as(" result.getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isBasePricePoint() ).as(" result.getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getAccessDevice() ).as(" result.getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getAlternativeRate() ).as(" result.getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getBalanceImpacts().length ).as(" result.getPricePoint().getBalanceImpacts().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isTrial() ).as(" result.getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getGlid() ).as(" result.getPricePoint().getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPricePoint().getPricepointIdLink() ).as(" result.getPricePoint().getPricepointIdLink()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().isPreview() ).as(" result.getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getInteractiveFlag() ).as(" result.getPricePoint().getInteractiveFlag()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().isForcedPurchase() ).as(" result.getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isSubscriptionDuplicate() ).as(" result.getPricePoint().isSubscriptionDuplicate()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getFixedExpiryDate() ).as(" result.getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(result.getPricePoint().isReserveOnly() ).as(" result.getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getMinSubPeriod() ).as(" result.getPricePoint().getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getPenaltyCharges() ).as(" result.getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPricePoint().getCancellation() ).as(" result.getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getMonthEndSubscription() ).as(" result.getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(result.getPricePoint().isHistoric() ).as(" result.getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getFixedRecurrence() ).as(" result.getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPricePoint().isFixedRecurringPricePoint() ).as(" result.getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isReceipting() ).as(" result.getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getReceiptingAttribute() ).as(" result.getPricePoint().getReceiptingAttribute()" ).isNull();
        softly.assertThat(result.getPricePoint().getOrder() ).as(" result.getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getPaymentHandler() ).as(" result.getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(result.getPricePoint().getNonMatchAllUserGroups().length ).as(" result.getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isPromo() ).as(" result.getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isSubmitToPaymentHandler() ).as(" result.getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isSuppressToPaymentHandler() ).as(" result.getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getPricingTextTemplateName1() ).as(" result.getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricingTextTemplateName2() ).as(" result.getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(result.getPricePoint().getTranslatedPricingText1() ).as(" result.getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(result.getPricePoint().getTranslatedPricingText2() ).as(" result.getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(result.getPricePoint().getRecurrenceDay() ).as(" result.getPricePoint().getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPricePoint().isAlignWithExternal() ).as(" result.getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getGracePeriod() ).as(" result.getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(result.getPricePoint().getRetryFrequency() ).as(" result.getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(result.getPricePoint().getSuspensionPeriod() ).as(" result.getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(result.getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" result.getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getTranslatedPricingText() ).as(" result.getPricePoint().getTranslatedPricingText()" ).isNull();
        softly.assertThat(result.getPricePoint().getFairUsageLimit() ).as(" result.getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getFairUsagePeriod() ).as(" result.getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getFairUsagePeriodUnit() ).as(" result.getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(result.getPricePoint().getExtensionPeriod() ).as(" result.getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isIncludeServiceForPackageFUP() ).as(" result.getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isFairUsagePolicyEnabled() ).as(" result.getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isTariff() ).as(" result.getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isHideForPurchaseOptions() ).as(" result.getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(result.getPricePoint().getTax().getName() ).as(" result.getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(result.getPricePoint().getTax().getKey() ).as(" result.getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(result.getPricePoint().getTax().getTaxRate() ).as(" result.getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(result.getPricePoint().getTax().getTaxCode() ).as(" result.getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPricePoint().getBalances() ).as(" result.getPricePoint().getBalances()" ).isNull();
        softly.assertThat(result.getPricePoint().isRecurring() ).as(" result.getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" result.getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(result.getPricePoint().getPricePointTier().getKey() ).as(" result.getPricePoint().getPricePointTier().getKey()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" result.getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" result.getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getPricingModel() ).as(" result.getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getTier() ).as(" result.getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPricePoint().getPricePointTier().isDefaultPPT() ).as(" result.getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" result.getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPricePoint().getPackageIdentifier() ).as(" result.getPricePoint().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*_*_false_false_*");
        softly.assertThat(result.getPricePoint().getServiceIdentifier() ).as(" result.getPricePoint().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getPricePoint().getResourceField().getName() ).as(" result.getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPricePoint().getResourceField().isToken() ).as(" result.getPricePoint().getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResourceField().isUsageToken() ).as(" result.getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResourceField().isPayToken() ).as(" result.getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResourceField().getResourceSymbol() ).as(" result.getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPricePoint().getResourceField().getDescription() ).as(" result.getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPricePoint().getResourceField().isCurrency() ).as(" result.getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getResourceField().isResource() ).as(" result.getPricePoint().getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResourceField().getResourceName() ).as(" result.getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPricePoint().getResourceField().getCode() ).as(" result.getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPricePoint().getResourceField().getCountryId() ).as(" result.getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getStandardRateWithoutTax() ).as(" result.getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPricePoint().isVolumeType() ).as(" result.getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isOriginal() ).as(" result.getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPricePoint().getPricePointTiers().length ).as(" result.getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getKey() ).as(" result.getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" result.getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getTier() ).as(" result.getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" result.getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPricePoint().getProtectedFk() ).as(" result.getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(result.getPricePoint().getmPricingText1() ).as(" result.getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getmPricingText2() ).as(" result.getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().isNonRecurring() ).as(" result.getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isEvent() ).as(" result.getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getExpiryDate() ).as(" result.getPricePoint().getExpiryDate()" ).isNull();
        softly.assertThat(result.getPricePoint().getChannel() ).as(" result.getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getMultiUsageMode() ).as(" result.getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getNetworkCodeMatchMethod() ).as(" result.getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isPreRatePriceGross() ).as(" result.getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getPreRate() ).as(" result.getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPricePoint().getPaymentInformation() ).as(" result.getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(result.getPricePoint().getContentName() ).as(" result.getPricePoint().getContentName()" ).isNull();
        softly.assertThat(result.getPricePoint().getAssetID() ).as(" result.getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(result.getPricePoint().getPremiumLevel() ).as(" result.getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getReserveOnlyFlag() ).as(" result.getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getSupplierId() ).as(" result.getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getDeviceType() ).as(" result.getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getUserGroups().length ).as(" result.getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPricePoint().getUserGroup() ).as(" result.getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getPaymentType() ).as(" result.getPricePoint().getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getEventDateTime() ).as(" result.getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(result.getPricePoint().getEventUnits() ).as(" result.getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getPromoCodes().length ).as(" result.getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getBearerIds().length ).as(" result.getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPricePoint().getPromoCode() ).as(" result.getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getDuration() ).as(" result.getPricePoint().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(result.getPricePoint().getChargingMethod() ).as(" result.getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(result.getPricePoint().getBearer() ).as(" result.getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().isInteractive() ).as(" result.getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().isIncludeUnavailable() ).as(" result.getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getExpressFlag() ).as(" result.getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isExpressFlag() ).as(" result.getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isCancellationUsage() ).as(" result.getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getTierName() ).as(" result.getPricePoint().getTierName()" ).isNull();
        softly.assertThat(result.getPricePoint().getPromoPrecode() ).as(" result.getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(result.getPricePoint().getUniquePromoCode() ).as(" result.getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getPromoUniqueCode() ).as(" result.getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getNextCycleDiscount() ).as(" result.getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPricePoint().getHasHistoricPricePointFlag() ).as(" result.getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isIsForRenewal() ).as(" result.getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getTaxRateAsDouble() ).as(" result.getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(result.getPricePoint().getAffiliateID() ).as(" result.getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerId() ).as(" result.getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(result.getPricePoint().getTariff() ).as(" result.getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getAggregatorId() ).as(" result.getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(result.getPricePoint().isForcePurchaseFlow() ).as(" result.getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getReceipientMsisdn() ).as(" result.getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(result.getPricePoint().getProductCode() ).as(" result.getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getMerchantName() ).as(" result.getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(result.getPricePoint().getInvoiceText() ).as(" result.getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(result.getPricePoint().isReIssueEnabled() ).as(" result.getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isReIssueFlagPresent() ).as(" result.getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getShortPackageId() ).as(" result.getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(result.getPricePoint().getHistoryStartDate() ).as(" result.getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(result.getPricePoint().getVendorId() ).as(" result.getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(result.getPricePoint().isIsForNextPaymentAmount() ).as(" result.getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getRenewalPreRate() ).as(" result.getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPricePoint().isOverrideDisallowPreRateFlag() ).as(" result.getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getContentCategory() ).as(" result.getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerUrl() ).as(" result.getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerContactInfo() ).as(" result.getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerEmail() ).as(" result.getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerName() ).as(" result.getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(result.getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" result.getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getSubRenewalPricepointId() ).as(" result.getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(result.getPricePoint().getLinkPricepointId() ).as(" result.getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(result.getPricePoint().getSubPurchaseTransactionTrial() ).as(" result.getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" result.getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" result.getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getExtIdentifier1() ).as(" result.getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getPricePoint().getExtIdentifier2() ).as(" result.getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getPricePoint().getExtIdentifier3() ).as(" result.getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(result.getPricePoint().getAccessChannel() ).as(" result.getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(result.getPricePoint().getPurchaseChannel() ).as(" result.getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(result.getPricePoint().getDeviceID() ).as(" result.getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(result.getPricePoint().getLocal() ).as(" result.getPricePoint().getLocal()" ).isNull();
        softly.assertThat(result.getPricePoint().getMsisdn() ).as(" result.getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(result.getPricePoint().getLanguageLocale() ).as(" result.getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(result.getPricePoint().getLanguageCode() ).as(" result.getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getExternalField1() ).as(" result.getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(result.getPricePoint().getExternalField2() ).as(" result.getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(result.getPricePoint().getExternalTransId() ).as(" result.getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(result.getPricePoint().getActiveSubscriptions() ).as(" result.getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.getPricePoint().getCsrId() ).as(" result.getPricePoint().getCsrId()" ).isNull();
        softly.assertThat(result.isDefault() ).as(" result.isDefault()" ).isFalse() ;
        softly.assertThat(result.getMsisdn() ).as(" result.getMsisdn()" ).isEqualTo("1210614882");
        softly.assertThat(result.getCsrId() ).as(" result.getCsrId()" ).isEqualTo("test");
        softly.assertThat(result.getSubscriptionId() ).as(" result.getSubscriptionId()" ).isNotEmpty();
        softly.assertThat(result.getSubscriptionIdLong() ).as(" result.getSubscriptionIdLong()" ).isNotNull() ;
        softly.assertThat(result.isRefundable() ).as(" result.isRefundable()" ).isFalse() ;
        softly.assertThat(result.isSuperPackage() ).as(" result.isSuperPackage()" ).isFalse() ;
        softly.assertThat(result.getPackageClass() ).as(" result.getPackageClass()" ).isNull();
        softly.assertThat(result.getAccount() ).as(" result.getAccount()" ).isNull();
        softly.assertThat(result.isInactiveOrClosed() ).as(" result.isInactiveOrClosed()" ).isFalse() ;
        softly.assertThat(result.isFailed() ).as(" result.isFailed()" ).isFalse() ;
        softly.assertThat(result.isBeingProvisioned() ).as(" result.isBeingProvisioned()" ).isFalse() ;
        softly.assertThat(result.isReserved() ).as(" result.isReserved()" ).isFalse() ;
        softly.assertThat(result.getLinkedPtID() ).as(" result.getLinkedPtID()" ).isNull();
        softly.assertThat(result.isPreOrdered() ).as(" result.isPreOrdered()" ).isFalse() ;
        softly.assertThat(result.getContentPaymentType() ).as(" result.getContentPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(result.getPurchaseDeviceType() ).as(" result.getPurchaseDeviceType()" ).isEqualTo(999) ;
        softly.assertThat(result.getNextCyclePercentDiscount() ).as(" result.getNextCyclePercentDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getNextPaymentAmount() ).as(" result.getNextPaymentAmount()" ).isEqualTo(new Double(10.0)) ;
//check size of array!
        softly.assertThat(result.getServiceIds().length ).as(" result.getServiceIds().length" ).isEqualTo(1) ;
// com.vodafone.global.er.subscriptionmanagement.ERRatingAttributes
        softly.assertThat(result.getRatingAttributes().getChannel() ).as(" result.getRatingAttributes().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(result.getRatingAttributes().getMultiUsageMode() ).as(" result.getRatingAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(result.getRatingAttributes().getNetworkCodeMatchMethod() ).as(" result.getRatingAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(0) ;
        softly.assertThat(result.getRatingAttributes().isPreRatePriceGross() ).as(" result.getRatingAttributes().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getPreRate() ).as(" result.getRatingAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getRatingAttributes().getPaymentInformation() ).as(" result.getRatingAttributes().getPaymentInformation()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getContentName() ).as(" result.getRatingAttributes().getContentName()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getAssetID() ).as(" result.getRatingAttributes().getAssetID()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPremiumLevel() ).as(" result.getRatingAttributes().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(result.getRatingAttributes().getReserveOnlyFlag() ).as(" result.getRatingAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(result.getRatingAttributes().getSupplierId() ).as(" result.getRatingAttributes().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(result.getRatingAttributes().getDeviceType() ).as(" result.getRatingAttributes().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(result.getRatingAttributes().getUserGroups().length ).as(" result.getRatingAttributes().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(result.getRatingAttributes().getUserGroup() ).as(" result.getRatingAttributes().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(result.getRatingAttributes().getPaymentType() ).as(" result.getRatingAttributes().getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(result.getRatingAttributes().getEventDateTime() ).as(" result.getRatingAttributes().getEventDateTime()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getEventUnits() ).as(" result.getRatingAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getRatingAttributes().getPromoCodes().length ).as(" result.getRatingAttributes().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(result.getRatingAttributes().getBearerIds().length ).as(" result.getRatingAttributes().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getRatingAttributes().getPromoCode() ).as(" result.getRatingAttributes().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(result.getRatingAttributes().getDuration() ).as(" result.getRatingAttributes().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(result.getRatingAttributes().getChargingMethod() ).as(" result.getRatingAttributes().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(result.getRatingAttributes().getBearer() ).as(" result.getRatingAttributes().getBearer()" ).isEqualTo("*");
        softly.assertThat(result.getRatingAttributes().isInteractive() ).as(" result.getRatingAttributes().isInteractive()" ).isTrue() ;
        softly.assertThat(result.getRatingAttributes().isIncludeUnavailable() ).as(" result.getRatingAttributes().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getExpressFlag() ).as(" result.getRatingAttributes().getExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().isExpressFlag() ).as(" result.getRatingAttributes().isExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().isPreOrder() ).as(" result.getRatingAttributes().isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().isCancellationUsage() ).as(" result.getRatingAttributes().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getTierName() ).as(" result.getRatingAttributes().getTierName()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPromoPrecode() ).as(" result.getRatingAttributes().getPromoPrecode()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getUniquePromoCode() ).as(" result.getRatingAttributes().getUniquePromoCode()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPromoUniqueCode() ).as(" result.getRatingAttributes().getPromoUniqueCode()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getNextCycleDiscount() ).as(" result.getRatingAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getRatingAttributes().getHasHistoricPricePointFlag() ).as(" result.getRatingAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().isIsForRenewal() ).as(" result.getRatingAttributes().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getTaxRate() ).as(" result.getRatingAttributes().getTaxRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getRatingAttributes().getTaxRateAsDouble() ).as(" result.getRatingAttributes().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getAffiliateID() ).as(" result.getRatingAttributes().getAffiliateID()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPartnerId() ).as(" result.getRatingAttributes().getPartnerId()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getTariff() ).as(" result.getRatingAttributes().getTariff()" ).isEqualTo("*");
        softly.assertThat(result.getRatingAttributes().getAggregatorId() ).as(" result.getRatingAttributes().getAggregatorId()" ).isNull();
        softly.assertThat(result.getRatingAttributes().isForcePurchaseFlow() ).as(" result.getRatingAttributes().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getReceipientMsisdn() ).as(" result.getRatingAttributes().getReceipientMsisdn()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getProductCode() ).as(" result.getRatingAttributes().getProductCode()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getMerchantName() ).as(" result.getRatingAttributes().getMerchantName()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getInvoiceText() ).as(" result.getRatingAttributes().getInvoiceText()" ).isNull();
        softly.assertThat(result.getRatingAttributes().isReIssueEnabled() ).as(" result.getRatingAttributes().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().isReIssueFlagPresent() ).as(" result.getRatingAttributes().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getShortPackageId() ).as(" result.getRatingAttributes().getShortPackageId()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getTaxCode() ).as(" result.getRatingAttributes().getTaxCode()" ).isEqualTo("*");
        softly.assertThat(result.getRatingAttributes().getHistoryStartDate() ).as(" result.getRatingAttributes().getHistoryStartDate()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getVendorId() ).as(" result.getRatingAttributes().getVendorId()" ).isNull();
        softly.assertThat(result.getRatingAttributes().isIsForNextPaymentAmount() ).as(" result.getRatingAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getRenewalPreRate() ).as(" result.getRatingAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getRatingAttributes().isOverrideDisallowPreRateFlag() ).as(" result.getRatingAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getContentCategory() ).as(" result.getRatingAttributes().getContentCategory()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPartnerUrl() ).as(" result.getRatingAttributes().getPartnerUrl()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPartnerContactInfo() ).as(" result.getRatingAttributes().getPartnerContactInfo()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPartnerEmail() ).as(" result.getRatingAttributes().getPartnerEmail()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPartnerName() ).as(" result.getRatingAttributes().getPartnerName()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" result.getRatingAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getRatingAttributes().getLinkedByTrialPricepoint() ).as(" result.getRatingAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getSubRenewalPricepointId() ).as(" result.getRatingAttributes().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getLinkPricepointId() ).as(" result.getRatingAttributes().getLinkPricepointId()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getSubPurchaseTransactionTrial() ).as(" result.getRatingAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getDiscardHiddenInactivePricepoints() ).as(" result.getRatingAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" result.getRatingAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(result.getRatingAttributes().getExtIdentifier1() ).as(" result.getRatingAttributes().getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getExtIdentifier2() ).as(" result.getRatingAttributes().getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getExtIdentifier3() ).as(" result.getRatingAttributes().getExtIdentifier3()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getAccessChannel() ).as(" result.getRatingAttributes().getAccessChannel()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getPurchaseChannel() ).as(" result.getRatingAttributes().getPurchaseChannel()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getDeviceID() ).as(" result.getRatingAttributes().getDeviceID()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getLocal() ).as(" result.getRatingAttributes().getLocal()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getMsisdn() ).as(" result.getRatingAttributes().getMsisdn()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getLanguageLocale() ).as(" result.getRatingAttributes().getLanguageLocale()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getLanguageCode() ).as(" result.getRatingAttributes().getLanguageCode()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getExternalField1() ).as(" result.getRatingAttributes().getExternalField1()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getExternalField2() ).as(" result.getRatingAttributes().getExternalField2()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getExternalTransId() ).as(" result.getRatingAttributes().getExternalTransId()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getActiveSubscriptions() ).as(" result.getRatingAttributes().getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.getRatingAttributes().getCsrId() ).as(" result.getRatingAttributes().getCsrId()" ).isNull();
        softly.assertThat(result.getPaymentTransactionId() ).as(" result.getPaymentTransactionId()" ).isNotNull() ;
        softly.assertThat(result.getNonRefundDescription() ).as(" result.getNonRefundDescription()" ).isNull();
        softly.assertThat(result.getInteractiveUsageFlag() ).as(" result.getInteractiveUsageFlag()" ).isEqualTo(1) ;
        softly.assertThat(result.isFirstUsage() ).as(" result.isFirstUsage()" ).isTrue() ;
        softly.assertThat(result.isSubscriptionUsed() ).as(" result.isSubscriptionUsed()" ).isFalse() ;
        softly.assertThat(result.getCurrentNoOfOccurences() ).as(" result.getCurrentNoOfOccurences()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getPenaltyCharge() ).as(" result.getPenaltyCharge()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.isMinSubscriptionPeriodElapsed() ).as(" result.isMinSubscriptionPeriodElapsed()" ).isTrue() ;
        softly.assertThat(result.isUnderGracePeriod() ).as(" result.isUnderGracePeriod()" ).isFalse() ;
        softly.assertThat(result.getBatchRetryDate() ).as(" result.getBatchRetryDate()" ).isNull();
        softly.assertThat(result.getOverdueExpiryDate() ).as(" result.getOverdueExpiryDate()" ).isNull();
        softly.assertThat(result.getLastExpiryDate() ).as(" result.getLastExpiryDate()" ).isNull();
        softly.assertThat(result.isWasRecurringTrial() ).as(" result.isWasRecurringTrial()" ).isFalse() ;
        softly.assertThat(result.getParentPackageID() ).as(" result.getParentPackageID()" ).isNull();
        softly.assertThat(result.getPreviousStatus() ).as(" result.getPreviousStatus()" ).isEqualTo(0) ;
        softly.assertThat(result.isParentAlsoPurchased() ).as(" result.isParentAlsoPurchased()" ).isFalse() ;
        softly.assertThat(result.isProvisionOnUsageSuccess() ).as(" result.isProvisionOnUsageSuccess()" ).isFalse() ;
        softly.assertThat(result.getLastUsageTransactionIdForSameContent() ).as(" result.getLastUsageTransactionIdForSameContent()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getSpId() ).as(" result.getSpId()" ).isNull();
        softly.assertThat(result.getPartnerTaxRate() ).as(" result.getPartnerTaxRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(result.getCountryId() ).as(" result.getCountryId()" ).isNull();
        softly.assertThat(result.isWasRecurringPromoCode() ).as(" result.isWasRecurringPromoCode()" ).isFalse() ;
        softly.assertThat(result.getLastPaymentTransaction() ).as(" result.getLastPaymentTransaction()" ).isNull();
        softly.assertThat(result.getB2BPartner() ).as(" result.getB2BPartner()" ).isNull();
        softly.assertThat(result.getRenewalCounterToLinkedPricepoint() ).as(" result.getRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.isRenewalPreRateGross() ).as(" result.isRenewalPreRateGross()" ).isFalse() ;
        softly.assertThat(result.getNextPricePointId() ).as(" result.getNextPricePointId()" ).isNullOrEmpty();
        softly.assertThat(result.getLastPaymentTransactionAmount() ).as(" result.getLastPaymentTransactionAmount()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getLastToLastPaymentTransactionAmount() ).as(" result.getLastToLastPaymentTransactionAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.isPricePointChangeOnRenewal() ).as(" result.isPricePointChangeOnRenewal()" ).isFalse() ;
        softly.assertThat(result.getOldSubscriptionId() ).as(" result.getOldSubscriptionId()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getOldMsisdn() ).as(" result.getOldMsisdn()" ).isNull();
        softly.assertThat(result.isProvisionable() ).as(" result.isProvisionable()" ).isFalse() ;
        softly.assertThat(result.getFuturePricePointRenewals() ).as(" result.getFuturePricePointRenewals()" ).isEqualTo(-1) ;
        softly.assertThat(result.getNextCyclePercentValue() ).as(" result.getNextCyclePercentValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getLockId() ).as(" result.getLockId()" ).isEqualTo(new Long(0)) ;

        softly.assertAll();

    }

}
