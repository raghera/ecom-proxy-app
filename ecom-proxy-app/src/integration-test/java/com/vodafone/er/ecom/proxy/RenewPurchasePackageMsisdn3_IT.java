package com.vodafone.er.ecom.proxy;

import com.vizzavi.ecommerce.business.charging.PurchaseAttributes;
import com.vizzavi.ecommerce.business.charging.PurchaseAuthorization;
import com.vizzavi.ecommerce.business.common.EcomApiFactory;
import com.vizzavi.ecommerce.business.common.EcommerceException;
import org.assertj.core.api.SoftAssertionError;
import org.assertj.core.api.SoftAssertions;
import org.junit.Test;

import java.util.Locale;
import java.util.Random;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Created by Ravi Aghera
 */
public class RenewPurchasePackageMsisdn3_IT {

    private SoftAssertions softly = new SoftAssertions();


    @Test
    public void renewPurchasePackageMsisdn3() throws EcommerceException {
        final String msisdn = String.valueOf(new Random().nextInt());

        PurchaseAuthorization auth = EcomApiFactory.getPurchaseApi(Locale.UK).purchasePackageMsisdn("test", msisdn, "pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*", new PurchaseAttributes());
        assertNotNull(auth);
        assertTrue("Auth response is false", auth.isSuccess());

        PurchaseAuthorization result = EcomApiFactory.getPurchaseApi(Locale.UK)
                .renewPurchasePackageMsisdn("test", msisdn, auth.getPackageSubscriptionId(), new PurchaseAttributes());

        softly.assertThat(result.getTransferUrl() ).as(" result.getTransferUrl()" ).isEqualTo("P00007/9240Z 1474473201879");
        softly.assertThat(result.getUndiscountedStandardGrossRate() ).as(" result.getUndiscountedStandardGrossRate()" ).isEqualTo(new Double(12.0)) ;
        softly.assertThat(result.getValidateMsisdnAttributes() ).as(" result.getValidateMsisdnAttributes()" ).isNull();
        softly.assertThat(result.getSubscriptions() ).as(" result.getSubscriptions()" ).isNull();
//check size of array!
//        softly.assertThat(result.getResourceBalances().length ).as(" result.getResourceBalances().length" ).isEqualTo(1) ;
//// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(result.getResourceBalances()[0].getResource().getName() ).as(" result.getResourceBalances()[0].getResource().getName()" ).isEqualTo("Content Credit");
//        softly.assertThat(result.getResourceBalances()[0].getResource().getDescription() ).as(" result.getResourceBalances()[0].getResource().getDescription()" ).isNull();
//        softly.assertThat(result.getResourceBalances()[0].getResource().isToken() ).as(" result.getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
//        softly.assertThat(result.getResourceBalances()[0].getResource().isUsageToken() ).as(" result.getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
//        softly.assertThat(result.getResourceBalances()[0].getResource().isPayToken() ).as(" result.getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
//        softly.assertThat(result.getResourceBalances()[0].getResource().getResourceSymbol() ).as(" result.getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
//        softly.assertThat(result.getResourceBalances()[0].getResource().getCode() ).as(" result.getResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
//        softly.assertThat(result.getResourceBalances()[0].getResource().isCurrency() ).as(" result.getResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
//        softly.assertThat(result.getResourceBalances()[0].getResource().isResource() ).as(" result.getResourceBalances()[0].getResource().isResource()" ).isTrue() ;
//        softly.assertThat(result.getResourceBalances()[0].getResource().getResourceName() ).as(" result.getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
//        softly.assertThat(result.getResourceBalances()[0].getResource().getCountryId() ).as(" result.getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(result.getResourceBalances()[0].getBalance() ).as(" result.getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(2.0)) ;
//        softly.assertThat(result.getResourceBalances()[0].getThreshold() ).as(" result.getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
//        softly.assertThat(result.getResourceBalances()[0].getSubscription() ).as(" result.getResourceBalances()[0].getSubscription()" ).isNull();
//        softly.assertThat(result.getResourceBalances()[0].getPackageId() ).as(" result.getResourceBalances()[0].getPackageId()" ).isNull();
//        softly.assertThat(result.getResourceBalances()[0].getOldestSubscriptionId() ).as(" result.getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
//        softly.assertThat(result.getResourceBalances()[0].getSubscriptionId() ).as(" result.getResourceBalances()[0].getSubscriptionId()" ).isNull();
//        softly.assertThat(result.getResourceBalances()[0].getSubscriptionIdLong() ).as(" result.getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.isAuthorized() ).as(" result.isAuthorized()" ).isTrue() ;
// com.vizzavi.ecommerce.business.catalog.internal.CatalogPackageImpl
//        softly.assertThat(result.getPackage().getName() ).as(" result.getPackage().getName()" ).isEqualTo("2 Usage Alternative Payment Pkg");
// com.vizzavi.ecommerce.business.common.ChargingResource

        //TODO getPackage is null

        softly.assertThat(result.getPackage() ).as(" result.getPackage()" ).isNotNull();

        softly.assertThat(result.getPackage().getResource().getName() ).as(" result.getPackage().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPackage().getResource().getDescription() ).as(" result.getPackage().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPackage().getResource().isToken() ).as(" result.getPackage().getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().isUsageToken() ).as(" result.getPackage().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().isPayToken() ).as(" result.getPackage().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().getResourceSymbol() ).as(" result.getPackage().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPackage().getResource().getCode() ).as(" result.getPackage().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPackage().getResource().isCurrency() ).as(" result.getPackage().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPackage().getResource().isResource() ).as(" result.getPackage().getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getPackage().getResource().getResourceName() ).as(" result.getPackage().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPackage().getResource().getCountryId() ).as(" result.getPackage().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getKey() ).as(" result.getPackage().getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPriority() ).as(" result.getPackage().getPriority()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getId() ).as(" result.getPackage().getId()" ).isEqualTo("pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*");
// java.util.HashMap
        softly.assertThat(result.getPackage().getTaxCode() ).as(" result.getPackage().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPackage().getRate() ).as(" result.getPackage().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPackage().getDescription() ).as(" result.getPackage().getDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getParentPackageId() ).as(" result.getPackage().getParentPackageId()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getUrl() ).as(" result.getPackage().getUrl()" ).isNull();
// com.vizzavi.ecommerce.business.catalog.internal.PricePointImpl
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getPackage().getPricePoint().getResource().getName() ).as(" result.getPackage().getPricePoint().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPackage().getPricePoint().getResource().getDescription() ).as(" result.getPackage().getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPackage().getPricePoint().getResource().isToken() ).as(" result.getPackage().getPricePoint().getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().isUsageToken() ).as(" result.getPackage().getPricePoint().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().isPayToken() ).as(" result.getPackage().getPricePoint().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().getResourceSymbol() ).as(" result.getPackage().getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPackage().getPricePoint().getResource().getCode() ).as(" result.getPackage().getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().isCurrency() ).as(" result.getPackage().getPricePoint().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().isResource() ).as(" result.getPackage().getPricePoint().getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResource().getResourceName() ).as(" result.getPackage().getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPackage().getPricePoint().getResource().getCountryId() ).as(" result.getPackage().getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getKey() ).as(" result.getPackage().getPricePoint().getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getId() ).as(" result.getPackage().getPricePoint().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(result.getPackage().getPricePoint().isPreOrder() ).as(" result.getPackage().getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getTaxRate() ).as(" result.getPackage().getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getPackage().getPricePoint().getTaxCode() ).as(" result.getPackage().getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPackage().getPricePoint().getLinkedByTrialPricepoint() ).as(" result.getPackage().getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getRate() ).as(" result.getPackage().getPricePoint().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPackage().getPricePoint().getDescription() ).as(" result.getPackage().getPricePoint().getDescription()" ).isEqualTo("Recurring 7 day");
        softly.assertThat(result.getPackage().getPricePoint().getStartDate() ).as(" result.getPackage().getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isAlwaysValidateMsisdn() ).as(" result.getPackage().getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceBalances() ).as(" result.getPackage().getPricePoint().getResourceBalances()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getNetRate() ).as(" result.getPackage().getPricePoint().getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getStandardRate() ).as(" result.getPackage().getPricePoint().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPackage().getPricePoint().isDiscount() ).as(" result.getPackage().getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getDiscountPromoText() ).as(" result.getPackage().getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getPackageId() ).as(" result.getPackage().getPricePoint().getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(result.getPackage().getPricePoint().getContentId() ).as(" result.getPackage().getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getPricingText1() ).as(" result.getPackage().getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getPricingText2() ).as(" result.getPackage().getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getUsageTime() ).as(" result.getPackage().getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getAccessDuration() ).as(" result.getPackage().getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isZeroCostIgnore() ).as(" result.getPackage().getPricePoint().isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getCustomResourceBalances() ).as(" result.getPackage().getPricePoint().getCustomResourceBalances()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricingModelTier() ).as(" result.getPackage().getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isArchived() ).as(" result.getPackage().getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isBasePricePoint() ).as(" result.getPackage().getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getAccessDevice() ).as(" result.getPackage().getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getAlternativeRate() ).as(" result.getPackage().getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getBalanceImpacts().length ).as(" result.getPackage().getPricePoint().getBalanceImpacts().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isTrial() ).as(" result.getPackage().getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getGlid() ).as(" result.getPackage().getPricePoint().getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPackage().getPricePoint().getPricepointIdLink() ).as(" result.getPackage().getPricePoint().getPricepointIdLink()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().isPreview() ).as(" result.getPackage().getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getInteractiveFlag() ).as(" result.getPackage().getPricePoint().getInteractiveFlag()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().isForcedPurchase() ).as(" result.getPackage().getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isSubscriptionDuplicate() ).as(" result.getPackage().getPricePoint().isSubscriptionDuplicate()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getFixedExpiryDate() ).as(" result.getPackage().getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isReserveOnly() ).as(" result.getPackage().getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getMinSubPeriod() ).as(" result.getPackage().getPricePoint().getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getPenaltyCharges() ).as(" result.getPackage().getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getCancellation() ).as(" result.getPackage().getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getMonthEndSubscription() ).as(" result.getPackage().getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(result.getPackage().getPricePoint().isHistoric() ).as(" result.getPackage().getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getFixedRecurrence() ).as(" result.getPackage().getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isFixedRecurringPricePoint() ).as(" result.getPackage().getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isReceipting() ).as(" result.getPackage().getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getReceiptingAttribute() ).as(" result.getPackage().getPricePoint().getReceiptingAttribute()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getOrder() ).as(" result.getPackage().getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getPaymentHandler() ).as(" result.getPackage().getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getNonMatchAllUserGroups().length ).as(" result.getPackage().getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isPromo() ).as(" result.getPackage().getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isSubmitToPaymentHandler() ).as(" result.getPackage().getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isSuppressToPaymentHandler() ).as(" result.getPackage().getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getPricingTextTemplateName1() ).as(" result.getPackage().getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricingTextTemplateName2() ).as(" result.getPackage().getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getTranslatedPricingText1() ).as(" result.getPackage().getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getTranslatedPricingText2() ).as(" result.getPackage().getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getRecurrenceDay() ).as(" result.getPackage().getPricePoint().getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPackage().getPricePoint().isAlignWithExternal() ).as(" result.getPackage().getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getGracePeriod() ).as(" result.getPackage().getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getRetryFrequency() ).as(" result.getPackage().getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getSuspensionPeriod() ).as(" result.getPackage().getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" result.getPackage().getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getTranslatedPricingText() ).as(" result.getPackage().getPricePoint().getTranslatedPricingText()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getFairUsageLimit() ).as(" result.getPackage().getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getFairUsagePeriod() ).as(" result.getPackage().getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getFairUsagePeriodUnit() ).as(" result.getPackage().getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(result.getPackage().getPricePoint().getExtensionPeriod() ).as(" result.getPackage().getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isIncludeServiceForPackageFUP() ).as(" result.getPackage().getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isFairUsagePolicyEnabled() ).as(" result.getPackage().getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isTariff() ).as(" result.getPackage().getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isHideForPurchaseOptions() ).as(" result.getPackage().getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getName() ).as(" result.getPackage().getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getKey() ).as(" result.getPackage().getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getTaxRate() ).as(" result.getPackage().getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(result.getPackage().getPricePoint().getTax().getTaxCode() ).as(" result.getPackage().getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPackage().getPricePoint().getBalances() ).as(" result.getPackage().getPricePoint().getBalances()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isRecurring() ).as(" result.getPackage().getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" result.getPackage().getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getKey() ).as(" result.getPackage().getPricePoint().getPricePointTier().getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPricingModel() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getTier() ).as(" result.getPackage().getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().isDefaultPPT() ).as(" result.getPackage().getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" result.getPackage().getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPackageIdentifier() ).as(" result.getPackage().getPricePoint().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*_*_false_false_*");
        softly.assertThat(result.getPackage().getPricePoint().getServiceIdentifier() ).as(" result.getPackage().getPricePoint().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getName() ).as(" result.getPackage().getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getDescription() ).as(" result.getPackage().getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isToken() ).as(" result.getPackage().getPricePoint().getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isUsageToken() ).as(" result.getPackage().getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isPayToken() ).as(" result.getPackage().getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getResourceSymbol() ).as(" result.getPackage().getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getCode() ).as(" result.getPackage().getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isCurrency() ).as(" result.getPackage().getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().isResource() ).as(" result.getPackage().getPricePoint().getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getResourceName() ).as(" result.getPackage().getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getPackage().getPricePoint().getResourceField().getCountryId() ).as(" result.getPackage().getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getStandardRateWithoutTax() ).as(" result.getPackage().getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isVolumeType() ).as(" result.getPackage().getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isOriginal() ).as(" result.getPackage().getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers().length ).as(" result.getPackage().getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getKey() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getTier() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getProtectedFk() ).as(" result.getPackage().getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getmPricingText1() ).as(" result.getPackage().getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().getmPricingText2() ).as(" result.getPackage().getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricePoint().isNonRecurring() ).as(" result.getPackage().getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isEvent() ).as(" result.getPackage().getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isActive() ).as(" result.getPackage().getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().getExpiryDate() ).as(" result.getPackage().getPricePoint().getExpiryDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getChannel() ).as(" result.getPackage().getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getMultiUsageMode() ).as(" result.getPackage().getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getNetworkCodeMatchMethod() ).as(" result.getPackage().getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().isPreRatePriceGross() ).as(" result.getPackage().getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getPreRate() ).as(" result.getPackage().getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getPaymentInformation() ).as(" result.getPackage().getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getContentName() ).as(" result.getPackage().getPricePoint().getContentName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getAssetID() ).as(" result.getPackage().getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPremiumLevel() ).as(" result.getPackage().getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getReserveOnlyFlag() ).as(" result.getPackage().getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getPricePoint().getSupplierId() ).as(" result.getPackage().getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getDeviceType() ).as(" result.getPackage().getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getUserGroups().length ).as(" result.getPackage().getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getPricePoint().getUserGroup() ).as(" result.getPackage().getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getPaymentType() ).as(" result.getPackage().getPricePoint().getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(result.getPackage().getPricePoint().getEventDateTime() ).as(" result.getPackage().getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getEventUnits() ).as(" result.getPackage().getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getPromoCodes().length ).as(" result.getPackage().getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(result.getPackage().getPricePoint().getBearerIds().length ).as(" result.getPackage().getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getPricePoint().getPromoCode() ).as(" result.getPackage().getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getDuration() ).as(" result.getPackage().getPricePoint().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(result.getPackage().getPricePoint().getChargingMethod() ).as(" result.getPackage().getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(result.getPackage().getPricePoint().getBearer() ).as(" result.getPackage().getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().isInteractive() ).as(" result.getPackage().getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPricePoint().isIncludeUnavailable() ).as(" result.getPackage().getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getExpressFlag() ).as(" result.getPackage().getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isExpressFlag() ).as(" result.getPackage().getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isCancellationUsage() ).as(" result.getPackage().getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getTierName() ).as(" result.getPackage().getPricePoint().getTierName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPromoPrecode() ).as(" result.getPackage().getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getUniquePromoCode() ).as(" result.getPackage().getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPromoUniqueCode() ).as(" result.getPackage().getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getNextCycleDiscount() ).as(" result.getPackage().getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().getHasHistoricPricePointFlag() ).as(" result.getPackage().getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isIsForRenewal() ).as(" result.getPackage().getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getTaxRateAsDouble() ).as(" result.getPackage().getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getAffiliateID() ).as(" result.getPackage().getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerId() ).as(" result.getPackage().getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getTariff() ).as(" result.getPackage().getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(result.getPackage().getPricePoint().getAggregatorId() ).as(" result.getPackage().getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isForcePurchaseFlow() ).as(" result.getPackage().getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getReceipientMsisdn() ).as(" result.getPackage().getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getProductCode() ).as(" result.getPackage().getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getMerchantName() ).as(" result.getPackage().getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getInvoiceText() ).as(" result.getPackage().getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isReIssueEnabled() ).as(" result.getPackage().getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isReIssueFlagPresent() ).as(" result.getPackage().getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getShortPackageId() ).as(" result.getPackage().getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getHistoryStartDate() ).as(" result.getPackage().getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getVendorId() ).as(" result.getPackage().getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().isIsForNextPaymentAmount() ).as(" result.getPackage().getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getRenewalPreRate() ).as(" result.getPackage().getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPackage().getPricePoint().isOverrideDisallowPreRateFlag() ).as(" result.getPackage().getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getContentCategory() ).as(" result.getPackage().getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerUrl() ).as(" result.getPackage().getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerContactInfo() ).as(" result.getPackage().getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerEmail() ).as(" result.getPackage().getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPartnerName() ).as(" result.getPackage().getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" result.getPackage().getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getPackage().getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPackage().getPricePoint().getSubRenewalPricepointId() ).as(" result.getPackage().getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLinkPricepointId() ).as(" result.getPackage().getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getSubPurchaseTransactionTrial() ).as(" result.getPackage().getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" result.getPackage().getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" result.getPackage().getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricePoint().getExtIdentifier1() ).as(" result.getPackage().getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExtIdentifier2() ).as(" result.getPackage().getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExtIdentifier3() ).as(" result.getPackage().getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getAccessChannel() ).as(" result.getPackage().getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getPurchaseChannel() ).as(" result.getPackage().getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getDeviceID() ).as(" result.getPackage().getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLocal() ).as(" result.getPackage().getPricePoint().getLocal()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getMsisdn() ).as(" result.getPackage().getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLanguageLocale() ).as(" result.getPackage().getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getLanguageCode() ).as(" result.getPackage().getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExternalField1() ).as(" result.getPackage().getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExternalField2() ).as(" result.getPackage().getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getExternalTransId() ).as(" result.getPackage().getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getActiveSubscriptions() ).as(" result.getPackage().getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.getPackage().getPricePoint().getCsrId() ).as(" result.getPackage().getPricePoint().getCsrId()" ).isNull();
        softly.assertThat(result.getPackage().getPricingText1() ).as(" result.getPackage().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPricingText2() ).as(" result.getPackage().getPricingText2()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPackage().isReserveOnly() ).as(" result.getPackage().isReserveOnly()" ).isFalse() ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPackage().isOriginal() ).as(" result.getPackage().isOriginal()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPricingModel() ).as(" result.getPackage().getPricingModel()" ).isNull();
        softly.assertThat(result.getPackage().isActive() ).as(" result.getPackage().isActive()" ).isTrue() ;
        softly.assertThat(result.getPackage().isDefault() ).as(" result.getPackage().isDefault()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPriceModels() ).as(" result.getPackage().getPriceModels()" ).isNull();
        softly.assertThat(result.getPackage().getFullPackagePricepointId() ).as(" result.getPackage().getFullPackagePricepointId()" ).isEqualTo("pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*");
// java.lang.Character
        softly.assertThat(result.getPackage().getSimplePackageId() ).as(" result.getPackage().getSimplePackageId()" ).isEqualTo("pAlt");
        softly.assertThat(result.getPackage().getNotificationCategory() ).as(" result.getPackage().getNotificationCategory()" ).isNullOrEmpty();
// com.vizzavi.ecommerce.business.catalog.PaymentContent
//        softly.assertThat(result.getPackage().getPaymentContent().getKey() ).as(" result.getPackage().getPaymentContent().getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(result.getPackage().getPaymentContent().getDescription() ).as(" result.getPackage().getPaymentContent().getDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getCategory() ).as(" result.getPackage().getPaymentContent().getCategory()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getMerchant() ).as(" result.getPackage().getPaymentContent().getMerchant()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getMerchantDescription() ).as(" result.getPackage().getPaymentContent().getMerchantDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getItemVolume() ).as(" result.getPackage().getPaymentContent().getItemVolume()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getServiceType() ).as(" result.getPackage().getPaymentContent().getServiceType()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getPaymentContent().getPromotion() ).as(" result.getPackage().getPaymentContent().getPromotion()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().isGoodwillCredit() ).as(" result.getPackage().isGoodwillCredit()" ).isFalse() ;
// java.util.HashMap
        softly.assertThat(result.getPackage().getPartnerInfo() ).as(" result.getPackage().getPartnerInfo()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getIsPackageModel() ).as(" result.getPackage().getIsPackageModel()" ).isFalse() ;
        softly.assertThat(result.getPackage().isParentPackage() ).as(" result.getPackage().isParentPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getChildPackages() ).as(" result.getPackage().getChildPackages()" ).isNull();
        softly.assertThat(result.getPackage().getServicesNotInPackageFairUsagePolicyList() ).as(" result.getPackage().getServicesNotInPackageFairUsagePolicyList()" ).isNull();
        softly.assertThat(result.getPackage().isHasParentSub() ).as(" result.getPackage().isHasParentSub()" ).isFalse() ;
        softly.assertThat(result.getPackage().getParentSubId() ).as(" result.getPackage().getParentSubId()" ).isNull();
        softly.assertThat(result.getPackage().isHasParentSubSuspendedResProv() ).as(" result.getPackage().isHasParentSubSuspendedResProv()" ).isFalse() ;
        softly.assertThat(result.getPackage().getParentSubStatus() ).as(" result.getPackage().getParentSubStatus()" ).isEqualTo(0) ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray().length ).as(" result.getPackage().getServiceArray().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getName() ).as(" result.getPackage().getServiceArray()[0].getName()" ).isEqualTo("Alternative Payment Service");
        softly.assertThat(result.getPackage().getServiceArray()[0].getKey() ).as(" result.getPackage().getServiceArray()[0].getKey()" ).isNull();
// java.util.HashSet
        softly.assertThat(result.getPackage().getServiceArray()[0].getId() ).as(" result.getPackage().getServiceArray()[0].getId()" ).isEqualTo("sAlt");
        softly.assertThat(result.getPackage().getServiceArray()[0].getDisplayName() ).as(" result.getPackage().getServiceArray()[0].getDisplayName()" ).isEqualTo("sAlt (Alternative Payment Service)");
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].getTaxCode() ).as(" result.getPackage().getServiceArray()[0].getTaxCode()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getContentCategory() ).as(" result.getPackage().getServiceArray()[0].getContentCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDescription() ).as(" result.getPackage().getServiceArray()[0].getDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getUrl() ).as(" result.getPackage().getServiceArray()[0].getUrl()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricePoint() ).as(" result.getPackage().getServiceArray()[0].getPricePoint()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricingText1() ).as(" result.getPackage().getServiceArray()[0].getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricingText2() ).as(" result.getPackage().getServiceArray()[0].getPricingText2()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].isReserveOnly() ).as(" result.getPackage().getServiceArray()[0].isReserveOnly()" ).isFalse() ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].getNotificationCategory() ).as(" result.getPackage().getServiceArray()[0].getNotificationCategory()" ).isNullOrEmpty();
// com.vizzavi.ecommerce.business.catalog.internal.PaymentContentImpl
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getKey() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getDescription() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getCategory() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getCategory()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getMerchant() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getMerchant()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getMerchantDescription() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getMerchantDescription()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getItemVolume() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getItemVolume()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getServiceType() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getServiceType()" ).isNullOrEmpty();
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPaymentContent().getPromotion() ).as(" result.getPackage().getServiceArray()[0].getPaymentContent().getPromotion()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getNonRefundableDescription() ).as(" result.getPackage().getServiceArray()[0].getNonRefundableDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].isRefundable() ).as(" result.getPackage().getServiceArray()[0].isRefundable()" ).isTrue() ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray()[0].getPricingModels().length ).as(" result.getPackage().getServiceArray()[0].getPricingModels().length" ).isEqualTo(0) ;
// java.util.HashMap
        softly.assertThat(result.getPackage().getServiceArray()[0].getSalesModel() ).as(" result.getPackage().getServiceArray()[0].getSalesModel()" ).isEqualTo("Reseller");
        softly.assertThat(result.getPackage().getServiceArray()[0].getProvisioningTag() ).as(" result.getPackage().getServiceArray()[0].getProvisioningTag()" ).isEqualTo("N/A");
        softly.assertThat(result.getPackage().getServiceArray()[0].isProvisionOnUsage() ).as(" result.getPackage().getServiceArray()[0].isProvisionOnUsage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceType() ).as(" result.getPackage().getServiceArray()[0].getServiceType()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].isReturnAllCatalogueServicesInfo() ).as(" result.getPackage().getServiceArray()[0].isReturnAllCatalogueServicesInfo()" ).isTrue() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isDefaultService() ).as(" result.getPackage().getServiceArray()[0].isDefaultService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getProvisioningSystem() ).as(" result.getPackage().getServiceArray()[0].getProvisioningSystem()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getUsageId() ).as(" result.getPackage().getServiceArray()[0].getUsageId()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceCategory() ).as(" result.getPackage().getServiceArray()[0].getServiceCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDealName() ).as(" result.getPackage().getServiceArray()[0].getDealName()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDistributionChannel() ).as(" result.getPackage().getServiceArray()[0].getDistributionChannel()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getHighVolumeInterfaceLevel() ).as(" result.getPackage().getServiceArray()[0].getHighVolumeInterfaceLevel()" ).isEqualTo(998) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isHighVolumeInterface() ).as(" result.getPackage().getServiceArray()[0].isHighVolumeInterface()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceRevenueSharePartners().length ).as(" result.getPackage().getServiceArray()[0].getServiceRevenueSharePartners().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnerNum() ).as(" result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnerNum()" ).isEqualTo(0) ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnersPurchaseCh().length ).as(" result.getPackage().getServiceArray()[0].getServiceRevenueSharePartnersPurchaseCh().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getIndirectValue() ).as(" result.getPackage().getServiceArray()[0].getIndirectValue()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getIndirectValueFormat() ).as(" result.getPackage().getServiceArray()[0].getIndirectValueFormat()" ).isEqualTo("%");
        softly.assertThat(result.getPackage().getServiceArray()[0].getPromoValue() ).as(" result.getPackage().getServiceArray()[0].getPromoValue()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getPromoValueFormat() ).as(" result.getPackage().getServiceArray()[0].getPromoValueFormat()" ).isEqualTo("%");
        softly.assertThat(result.getPackage().getServiceArray()[0].getContentSubCategory() ).as(" result.getPackage().getServiceArray()[0].getContentSubCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getContentItem() ).as(" result.getPackage().getServiceArray()[0].getContentItem()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getDeliveryMechanism() ).as(" result.getPackage().getServiceArray()[0].getDeliveryMechanism()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductCategory() ).as(" result.getPackage().getServiceArray()[0].getProductCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductSubCategory1() ).as(" result.getPackage().getServiceArray()[0].getProductSubCategory1()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductSubCategory2() ).as(" result.getPackage().getServiceArray()[0].getProductSubCategory2()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductWholesalePrice() ).as(" result.getPackage().getServiceArray()[0].getProductWholesalePrice()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductSelfRegulation() ).as(" result.getPackage().getServiceArray()[0].getProductSelfRegulation()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getServiceArray()[0].isVolumeService() ).as(" result.getPackage().getServiceArray()[0].isVolumeService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getProductFk() ).as(" result.getPackage().getServiceArray()[0].getProductFk()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isServiceShareOverride() ).as(" result.getPackage().getServiceArray()[0].isServiceShareOverride()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isExpiredPackageService() ).as(" result.getPackage().getServiceArray()[0].isExpiredPackageService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getFixedUsageAmount() ).as(" result.getPackage().getServiceArray()[0].getFixedUsageAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getHasExpress() ).as(" result.getPackage().getServiceArray()[0].getHasExpress()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getHasDynamicDefault() ).as(" result.getPackage().getServiceArray()[0].getHasDynamicDefault()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getHasSuperPackage() ).as(" result.getPackage().getServiceArray()[0].getHasSuperPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isReturnTrialOptionsOnly() ).as(" result.getPackage().getServiceArray()[0].isReturnTrialOptionsOnly()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getServiceClass() ).as(" result.getPackage().getServiceArray()[0].getServiceClass()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getBandRevenueShares() ).as(" result.getPackage().getServiceArray()[0].getBandRevenueShares()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isReIssuePermittedFlag() ).as(" result.getPackage().getServiceArray()[0].isReIssuePermittedFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getChargeableBy() ).as(" result.getPackage().getServiceArray()[0].getChargeableBy()" ).isEqualTo("Not Defined");
//check size of array!
//        softly.assertThat(result.getPackage().getServiceArray()[0].getPackageIds().length ).as(" result.getPackage().getServiceArray()[0].getPackageIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isMicroService() ).as(" result.getPackage().getServiceArray()[0].isMicroService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getSuperPackageIds() ).as(" result.getPackage().getServiceArray()[0].getSuperPackageIds()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getmExternalServPricePlan() ).as(" result.getPackage().getServiceArray()[0].getmExternalServPricePlan()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].ismRefundable() ).as(" result.getPackage().getServiceArray()[0].ismRefundable()" ).isTrue() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].ismReturnTrialOptionsOnly() ).as(" result.getPackage().getServiceArray()[0].ismReturnTrialOptionsOnly()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isUseRateCard() ).as(" result.getPackage().getServiceArray()[0].isUseRateCard()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getInternalPartner() ).as(" result.getPackage().getServiceArray()[0].getInternalPartner()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].getRateCardPartners() ).as(" result.getPackage().getServiceArray()[0].getRateCardPartners()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isUsageAllowedBeingProvisionedSub() ).as(" result.getPackage().getServiceArray()[0].isUsageAllowedBeingProvisionedSub()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isGlobalHandler() ).as(" result.getPackage().getServiceArray()[0].isGlobalHandler()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].isGlobalHandlerNotification() ).as(" result.getPackage().getServiceArray()[0].isGlobalHandlerNotification()" ).isFalse() ;
        softly.assertThat(result.getPackage().getServiceArray()[0].getPriorityServiceRevenueSharePartner() ).as(" result.getPackage().getServiceArray()[0].getPriorityServiceRevenueSharePartner()" ).isNull();
        softly.assertThat(result.getPackage().getServiceArray()[0].isUniqueServiceClass() ).as(" result.getPackage().getServiceArray()[0].isUniqueServiceClass()" ).isFalse() ;
// java.util.HashMap
        softly.assertThat(result.getPackage().isEventPackage() ).as(" result.getPackage().isEventPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isRecurringPackage() ).as(" result.getPackage().isRecurringPackage()" ).isTrue() ;
        softly.assertThat(result.getPackage().getPackageType() ).as(" result.getPackage().getPackageType()" ).isEqualTo("Calendar");
        softly.assertThat(result.getPackage().getNonRefundableDescription() ).as(" result.getPackage().getNonRefundableDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().isRefundable() ).as(" result.getPackage().isRefundable()" ).isFalse() ;
        softly.assertThat(result.getPackage().isCalendarPackage() ).as(" result.getPackage().isCalendarPackage()" ).isTrue() ;
        softly.assertThat(result.getPackage().getProtectedType() ).as(" result.getPackage().getProtectedType()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getDynamicProtectedValue() ).as(" result.getPackage().getDynamicProtectedValue()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getPurchaseMethod() ).as(" result.getPackage().getPurchaseMethod()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getKpiPackageProductCategory() ).as(" result.getPackage().getKpiPackageProductCategory()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getKpiPackageType() ).as(" result.getPackage().getKpiPackageType()" ).isNullOrEmpty();
//check size of array!
        softly.assertThat(result.getPackage().getPricingModels().length ).as(" result.getPackage().getPricingModels().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().isExpressPurchase() ).as(" result.getPackage().isExpressPurchase()" ).isFalse() ;
        softly.assertThat(result.getPackage().isRecieptingFlag() ).as(" result.getPackage().isRecieptingFlag()" ).isFalse() ;
        softly.assertThat(result.getPackage().isPricePointOrder() ).as(" result.getPackage().isPricePointOrder()" ).isFalse() ;
        softly.assertThat(result.getPackage().isSuperPackage() ).as(" result.getPackage().isSuperPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isRevenueShareByUsage() ).as(" result.getPackage().isRevenueShareByUsage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isDynamicDefault() ).as(" result.getPackage().isDynamicDefault()" ).isFalse() ;
        softly.assertThat(result.getPackage().getACEPackage() ).as(" result.getPackage().getACEPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isUpSell() ).as(" result.getPackage().isUpSell()" ).isFalse() ;
// java.util.HashMap
        softly.assertThat(result.getPackage().getLogoId() ).as(" result.getPackage().getLogoId()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().isDisallowCancellations() ).as(" result.getPackage().isDisallowCancellations()" ).isFalse() ;
        softly.assertThat(result.getPackage().getSalesModel() ).as(" result.getPackage().getSalesModel()" ).isEqualTo("Reseller");
        softly.assertThat(result.getPackage().getPackageClass() ).as(" result.getPackage().getPackageClass()" ).isNull();
        softly.assertThat(result.getPackage().isDataVoiceTariffInclusive() ).as(" result.getPackage().isDataVoiceTariffInclusive()" ).isFalse() ;
        softly.assertThat(result.getPackage().getNominalValue() ).as(" result.getPackage().getNominalValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackage().isUseBeingDeprovisionedStatus() ).as(" result.getPackage().isUseBeingDeprovisionedStatus()" ).isFalse() ;
        softly.assertThat(result.getPackage().getDisallowDuplicateSubPurchase() ).as(" result.getPackage().getDisallowDuplicateSubPurchase()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().getNoActivePricepoints() ).as(" result.getPackage().getNoActivePricepoints()" ).isEqualTo(2) ;
        softly.assertThat(result.getPackage().isHasBalanceImpactsWithDate() ).as(" result.getPackage().isHasBalanceImpactsWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().isHasPricePointsWithDate() ).as(" result.getPackage().isHasPricePointsWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().isHasPromosWithDate() ).as(" result.getPackage().isHasPromosWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().isHasTaxRateWithDate() ).as(" result.getPackage().isHasTaxRateWithDate()" ).isFalse() ;
        softly.assertThat(result.getPackage().getPromoCodeMap() ).as(" result.getPackage().getPromoCodeMap()" ).isNull();
        softly.assertThat(result.getPackage().getPromoCodeMapSize() ).as(" result.getPackage().getPromoCodeMapSize()" ).isEqualTo(0) ;
        softly.assertThat(result.getPackage().getActiveStatusAsString() ).as(" result.getPackage().getActiveStatusAsString()" ).isEqualTo("ACTIVE");
        softly.assertThat(result.getPackage().isUseRateCardService() ).as(" result.getPackage().isUseRateCardService()" ).isFalse() ;
        softly.assertThat(result.getPackage().getRateCardServiceId() ).as(" result.getPackage().getRateCardServiceId()" ).isNullOrEmpty();
        softly.assertThat(result.getPackage().isUserGroupCalendarPricePointPackage() ).as(" result.getPackage().isUserGroupCalendarPricePointPackage()" ).isFalse() ;
        softly.assertThat(result.getPackage().isUpsellDiscountProrated() ).as(" result.getPackage().isUpsellDiscountProrated()" ).isFalse() ;
        softly.assertThat(result.getPackage().isDisallowPrerate() ).as(" result.getPackage().isDisallowPrerate()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPackage().getServiceNames().length ).as(" result.getPackage().getServiceNames().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPackage().getDefaultPartnerProvisioningId() ).as(" result.getPackage().getDefaultPartnerProvisioningId()" ).isNull();
        softly.assertThat(result.getPackage().getUserGroupComparisonAtRenewal() ).as(" result.getPackage().getUserGroupComparisonAtRenewal()" ).isEqualTo("SYSTEM");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getResource().getName() ).as(" result.getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getResource().getDescription() ).as(" result.getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getResource().isToken() ).as(" result.getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getResource().isUsageToken() ).as(" result.getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getResource().isPayToken() ).as(" result.getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getResource().getResourceSymbol() ).as(" result.getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getResource().getCode() ).as(" result.getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getResource().isCurrency() ).as(" result.getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getResource().isResource() ).as(" result.getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getResource().getResourceName() ).as(" result.getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getResource().getCountryId() ).as(" result.getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getContentName() ).as(" result.getContentName()" ).isNull();
        softly.assertThat(result.isInteractive() ).as(" result.isInteractive()" ).isFalse() ;
        softly.assertThat(result.getPartnerId() ).as(" result.getPartnerId()" ).isNull();
// com.vizzavi.ecommerce.business.common.ReasonCode
        softly.assertThat(result.getReasonCode().getName() ).as(" result.getReasonCode().getName()" ).isEqualTo("OK");
        softly.assertThat(result.getReasonCode().getCode() ).as(" result.getReasonCode().getCode()" ).isEqualTo(0) ;
        softly.assertThat(result.getReasonCode().getSubCode() ).as(" result.getReasonCode().getSubCode()" ).isEqualTo(0) ;
        softly.assertThat(result.getReasonCode().getResourceName() ).as(" result.getReasonCode().getResourceName()" ).isEqualTo("ReasonCode_0");
        softly.assertThat(result.getTransactionIdLong() ).as(" result.getTransactionIdLong()" ).isEqualTo(new Long(9240)) ;
        softly.assertThat(result.getPackageSubscriptionId() ).as(" result.getPackageSubscriptionId()" ).isEqualTo("8578");
// com.vizzavi.ecommerce.business.catalog.internal.PricePointImpl
// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(result.getPricePoint().getResource().getName() ).as(" result.getPricePoint().getResource().getName()" ).isEqualTo("GBP");
//        softly.assertThat(result.getPricePoint().getResource().getDescription() ).as(" result.getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
//        softly.assertThat(result.getPricePoint().getResource().isToken() ).as(" result.getPricePoint().getResource().isToken()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResource().isUsageToken() ).as(" result.getPricePoint().getResource().isUsageToken()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResource().isPayToken() ).as(" result.getPricePoint().getResource().isPayToken()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResource().getResourceSymbol() ).as(" result.getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//        softly.assertThat(result.getPricePoint().getResource().getCode() ).as(" result.getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(result.getPricePoint().getResource().isCurrency() ).as(" result.getPricePoint().getResource().isCurrency()" ).isTrue() ;
//        softly.assertThat(result.getPricePoint().getResource().isResource() ).as(" result.getPricePoint().getResource().isResource()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResource().getResourceName() ).as(" result.getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(result.getPricePoint().getResource().getCountryId() ).as(" result.getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getKey() ).as(" result.getPricePoint().getKey()" ).isNull();
        softly.assertThat(result.getPricePoint().getId() ).as(" result.getPricePoint().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(result.getPricePoint().isPreOrder() ).as(" result.getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getTaxRate() ).as(" result.getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getPricePoint().getTaxCode() ).as(" result.getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPricePoint().getLinkedByTrialPricepoint() ).as(" result.getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getRate() ).as(" result.getPricePoint().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPricePoint().getDescription() ).as(" result.getPricePoint().getDescription()" ).isEqualTo("Recurring 7 day");
        softly.assertThat(result.getPricePoint().getStartDate() ).as(" result.getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(result.getPricePoint().isAlwaysValidateMsisdn() ).as(" result.getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getResourceBalances() ).as(" result.getPricePoint().getResourceBalances()" ).isNull();
        softly.assertThat(result.getPricePoint().getNetRate() ).as(" result.getPricePoint().getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPricePoint().getStandardRate() ).as(" result.getPricePoint().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getPricePoint().isDiscount() ).as(" result.getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getDiscountPromoText() ).as(" result.getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getPackageId() ).as(" result.getPricePoint().getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(result.getPricePoint().getContentId() ).as(" result.getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getPricingText1() ).as(" result.getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getPricingText2() ).as(" result.getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getUsageTime() ).as(" result.getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPricePoint().getAccessDuration() ).as(" result.getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPricePoint().isZeroCostIgnore() ).as(" result.getPricePoint().isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getCustomResourceBalances() ).as(" result.getPricePoint().getCustomResourceBalances()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricingModelTier() ).as(" result.getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(result.getPricePoint().isArchived() ).as(" result.getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isBasePricePoint() ).as(" result.getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getAccessDevice() ).as(" result.getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getAlternativeRate() ).as(" result.getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getBalanceImpacts().length ).as(" result.getPricePoint().getBalanceImpacts().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isTrial() ).as(" result.getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getGlid() ).as(" result.getPricePoint().getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getPricePoint().getPricepointIdLink() ).as(" result.getPricePoint().getPricepointIdLink()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().isPreview() ).as(" result.getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getInteractiveFlag() ).as(" result.getPricePoint().getInteractiveFlag()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().isForcedPurchase() ).as(" result.getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isSubscriptionDuplicate() ).as(" result.getPricePoint().isSubscriptionDuplicate()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getFixedExpiryDate() ).as(" result.getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(result.getPricePoint().isReserveOnly() ).as(" result.getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getMinSubPeriod() ).as(" result.getPricePoint().getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getPenaltyCharges() ).as(" result.getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPricePoint().getCancellation() ).as(" result.getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getMonthEndSubscription() ).as(" result.getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(result.getPricePoint().isHistoric() ).as(" result.getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getFixedRecurrence() ).as(" result.getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getPricePoint().isFixedRecurringPricePoint() ).as(" result.getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isReceipting() ).as(" result.getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getReceiptingAttribute() ).as(" result.getPricePoint().getReceiptingAttribute()" ).isNull();
        softly.assertThat(result.getPricePoint().getOrder() ).as(" result.getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getPaymentHandler() ).as(" result.getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(result.getPricePoint().getNonMatchAllUserGroups().length ).as(" result.getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isPromo() ).as(" result.getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isSubmitToPaymentHandler() ).as(" result.getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isSuppressToPaymentHandler() ).as(" result.getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getPricingTextTemplateName1() ).as(" result.getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricingTextTemplateName2() ).as(" result.getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(result.getPricePoint().getTranslatedPricingText1() ).as(" result.getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(result.getPricePoint().getTranslatedPricingText2() ).as(" result.getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(result.getPricePoint().getRecurrenceDay() ).as(" result.getPricePoint().getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getPricePoint().isAlignWithExternal() ).as(" result.getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getGracePeriod() ).as(" result.getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(result.getPricePoint().getRetryFrequency() ).as(" result.getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(result.getPricePoint().getSuspensionPeriod() ).as(" result.getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(result.getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" result.getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getTranslatedPricingText() ).as(" result.getPricePoint().getTranslatedPricingText()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getFairUsageLimit() ).as(" result.getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getFairUsagePeriod() ).as(" result.getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getFairUsagePeriodUnit() ).as(" result.getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(result.getPricePoint().getExtensionPeriod() ).as(" result.getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isIncludeServiceForPackageFUP() ).as(" result.getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isFairUsagePolicyEnabled() ).as(" result.getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isTariff() ).as(" result.getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isHideForPurchaseOptions() ).as(" result.getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(result.getPricePoint().getTax().getName() ).as(" result.getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(result.getPricePoint().getTax().getKey() ).as(" result.getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(result.getPricePoint().getTax().getTaxRate() ).as(" result.getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(result.getPricePoint().getTax().getTaxCode() ).as(" result.getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getPricePoint().getBalances() ).as(" result.getPricePoint().getBalances()" ).isNull();
        softly.assertThat(result.getPricePoint().isRecurring() ).as(" result.getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" result.getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(result.getPricePoint().getPricePointTier().getKey() ).as(" result.getPricePoint().getPricePointTier().getKey()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" result.getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" result.getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getPricingModel() ).as(" result.getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTier().getTier() ).as(" result.getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPricePoint().getPricePointTier().isDefaultPPT() ).as(" result.getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" result.getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPricePoint().getPackageIdentifier() ).as(" result.getPricePoint().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*_*_false_false_*");
        softly.assertThat(result.getPricePoint().getServiceIdentifier() ).as(" result.getPricePoint().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(result.getPricePoint().getResourceField().getName() ).as(" result.getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
//        softly.assertThat(result.getPricePoint().getResourceField().getDescription() ).as(" result.getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
//        softly.assertThat(result.getPricePoint().getResourceField().isToken() ).as(" result.getPricePoint().getResourceField().isToken()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResourceField().isUsageToken() ).as(" result.getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResourceField().isPayToken() ).as(" result.getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResourceField().getResourceSymbol() ).as(" result.getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//        softly.assertThat(result.getPricePoint().getResourceField().getCode() ).as(" result.getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(result.getPricePoint().getResourceField().isCurrency() ).as(" result.getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
//        softly.assertThat(result.getPricePoint().getResourceField().isResource() ).as(" result.getPricePoint().getResourceField().isResource()" ).isFalse() ;
//        softly.assertThat(result.getPricePoint().getResourceField().getResourceName() ).as(" result.getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(result.getPricePoint().getResourceField().getCountryId() ).as(" result.getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getStandardRateWithoutTax() ).as(" result.getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getPricePoint().isVolumeType() ).as(" result.getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isOriginal() ).as(" result.getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getPricePoint().getPricePointTiers().length ).as(" result.getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getKey() ).as(" result.getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" result.getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getTier() ).as(" result.getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" result.getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getPricePoint().getProtectedFk() ).as(" result.getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(result.getPricePoint().getmPricingText1() ).as(" result.getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().getmPricingText2() ).as(" result.getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getPricePoint().isNonRecurring() ).as(" result.getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isEvent() ).as(" result.getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isActive() ).as(" result.getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().getExpiryDate() ).as(" result.getPricePoint().getExpiryDate()" ).isNull();
        softly.assertThat(result.getPricePoint().getChannel() ).as(" result.getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getMultiUsageMode() ).as(" result.getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getNetworkCodeMatchMethod() ).as(" result.getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().isPreRatePriceGross() ).as(" result.getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getPreRate() ).as(" result.getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPricePoint().getPaymentInformation() ).as(" result.getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(result.getPricePoint().getContentName() ).as(" result.getPricePoint().getContentName()" ).isNull();
        softly.assertThat(result.getPricePoint().getAssetID() ).as(" result.getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(result.getPricePoint().getPremiumLevel() ).as(" result.getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getReserveOnlyFlag() ).as(" result.getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(result.getPricePoint().getSupplierId() ).as(" result.getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getDeviceType() ).as(" result.getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getUserGroups().length ).as(" result.getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPricePoint().getUserGroup() ).as(" result.getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getPaymentType() ).as(" result.getPricePoint().getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(result.getPricePoint().getEventDateTime() ).as(" result.getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(result.getPricePoint().getEventUnits() ).as(" result.getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getPromoCodes().length ).as(" result.getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(result.getPricePoint().getBearerIds().length ).as(" result.getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getPricePoint().getPromoCode() ).as(" result.getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getDuration() ).as(" result.getPricePoint().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(result.getPricePoint().getChargingMethod() ).as(" result.getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(result.getPricePoint().getBearer() ).as(" result.getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().isInteractive() ).as(" result.getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(result.getPricePoint().isIncludeUnavailable() ).as(" result.getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getExpressFlag() ).as(" result.getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isExpressFlag() ).as(" result.getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isCancellationUsage() ).as(" result.getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getTierName() ).as(" result.getPricePoint().getTierName()" ).isNull();
        softly.assertThat(result.getPricePoint().getPromoPrecode() ).as(" result.getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(result.getPricePoint().getUniquePromoCode() ).as(" result.getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getPromoUniqueCode() ).as(" result.getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getNextCycleDiscount() ).as(" result.getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPricePoint().getHasHistoricPricePointFlag() ).as(" result.getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isIsForRenewal() ).as(" result.getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getTaxRateAsDouble() ).as(" result.getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(result.getPricePoint().getAffiliateID() ).as(" result.getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerId() ).as(" result.getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(result.getPricePoint().getTariff() ).as(" result.getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(result.getPricePoint().getAggregatorId() ).as(" result.getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(result.getPricePoint().isForcePurchaseFlow() ).as(" result.getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getReceipientMsisdn() ).as(" result.getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(result.getPricePoint().getProductCode() ).as(" result.getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getMerchantName() ).as(" result.getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(result.getPricePoint().getInvoiceText() ).as(" result.getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(result.getPricePoint().isReIssueEnabled() ).as(" result.getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isReIssueFlagPresent() ).as(" result.getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getShortPackageId() ).as(" result.getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(result.getPricePoint().getHistoryStartDate() ).as(" result.getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(result.getPricePoint().getVendorId() ).as(" result.getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(result.getPricePoint().isIsForNextPaymentAmount() ).as(" result.getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getRenewalPreRate() ).as(" result.getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getPricePoint().isOverrideDisallowPreRateFlag() ).as(" result.getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getContentCategory() ).as(" result.getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerUrl() ).as(" result.getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerContactInfo() ).as(" result.getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerEmail() ).as(" result.getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(result.getPricePoint().getPartnerName() ).as(" result.getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(result.getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" result.getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getPricePoint().getSubRenewalPricepointId() ).as(" result.getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(result.getPricePoint().getLinkPricepointId() ).as(" result.getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(result.getPricePoint().getSubPurchaseTransactionTrial() ).as(" result.getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" result.getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" result.getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(result.getPricePoint().getExtIdentifier1() ).as(" result.getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getPricePoint().getExtIdentifier2() ).as(" result.getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getPricePoint().getExtIdentifier3() ).as(" result.getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(result.getPricePoint().getAccessChannel() ).as(" result.getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(result.getPricePoint().getPurchaseChannel() ).as(" result.getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(result.getPricePoint().getDeviceID() ).as(" result.getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(result.getPricePoint().getLocal() ).as(" result.getPricePoint().getLocal()" ).isNull();
        softly.assertThat(result.getPricePoint().getMsisdn() ).as(" result.getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(result.getPricePoint().getLanguageLocale() ).as(" result.getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(result.getPricePoint().getLanguageCode() ).as(" result.getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(result.getPricePoint().getExternalField1() ).as(" result.getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(result.getPricePoint().getExternalField2() ).as(" result.getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(result.getPricePoint().getExternalTransId() ).as(" result.getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(result.getPricePoint().getActiveSubscriptions() ).as(" result.getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.getPricePoint().getCsrId() ).as(" result.getPricePoint().getCsrId()" ).isNull();
        softly.assertThat(result.getErrorId() ).as(" result.getErrorId()" ).isEqualTo("OK");
        softly.assertThat(result.getErrorDescription() ).as(" result.getErrorDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription() ).as(" result.getSubscription()" ).isNull();
        softly.assertThat(result.isReservedOnly() ).as(" result.isReservedOnly()" ).isFalse() ;
        softly.assertThat(result.getAuthCode() ).as(" result.getAuthCode()" ).isEqualTo("P00007/9240Z 1474473201879");
// com.vizzavi.ecommerce.business.common.ReasonCode
        softly.assertThat(result.getSubReasonCode().getName() ).as(" result.getSubReasonCode().getName()" ).isEqualTo("OK");
        softly.assertThat(result.getSubReasonCode().getCode() ).as(" result.getSubReasonCode().getCode()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubReasonCode().getSubCode() ).as(" result.getSubReasonCode().getSubCode()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubReasonCode().getResourceName() ).as(" result.getSubReasonCode().getResourceName()" ).isEqualTo("ReasonCode_0");
        softly.assertThat(result.getPaymentErrorId() ).as(" result.getPaymentErrorId()" ).isEqualTo("OK");
        softly.assertThat(result.getPaymentErrorDescription() ).as(" result.getPaymentErrorDescription()" ).isNullOrEmpty();
        softly.assertThat(result.getPaymentId() ).as(" result.getPaymentId()" ).isEqualTo("P00007/9240Z");
        softly.assertThat(result.getEventReservationId() ).as(" result.getEventReservationId()" ).isEqualTo("P00007/9240Z");
        softly.assertThat(result.getPackageSubscriptionIdLong() ).as(" result.getPackageSubscriptionIdLong()" ).isEqualTo(new Long(8578)) ;
        softly.assertThat(result.getTransactionId() ).as(" result.getTransactionId()" ).isEqualTo("9240");
        softly.assertThat(result.getPaymentStatus() ).as(" result.getPaymentStatus()" ).isEqualTo(1) ;
// com.vodafone.global.er.payment.PaymentAuthStatus
//        softly.assertThat(result.getPaymentStatusEnum().getId() ).as(" result.getPaymentStatusEnum().getId()" ).isEqualTo(1) ;
//        softly.assertThat(result.getPaymentStatusEnum().getRetryPeriod() ).as(" result.getPaymentStatusEnum().getRetryPeriod()" ).isNull();
//        softly.assertThat(result.getPaymentStatusEnum().getCode() ).as(" result.getPaymentStatusEnum().getCode()" ).isEqualTo("ACCEPTED");
//// com.vizzavi.ecommerce.business.common.ResponseStatus
//        softly.assertThat(result.getPaymentStatusEnum().getResponseStatus().getName() ).as(" result.getPaymentStatusEnum().getResponseStatus().getName()" ).isEqualTo("ACCEPTED");
//        softly.assertThat(result.getPaymentStatusEnum().getResponseStatus().getId() ).as(" result.getPaymentStatusEnum().getResponseStatus().getId()" ).isEqualTo(1) ;
//        softly.assertThat(result.getPaymentStatusEnum().getResponseStatus().isError() ).as(" result.getPaymentStatusEnum().getResponseStatus().isError()" ).isFalse() ;
//        softly.assertThat(result.getPaymentStatusEnum().getResponseStatus().isDenied() ).as(" result.getPaymentStatusEnum().getResponseStatus().isDenied()" ).isFalse() ;
//        softly.assertThat(result.getPaymentStatusEnum().getResponseStatus().isRejected() ).as(" result.getPaymentStatusEnum().getResponseStatus().isRejected()" ).isFalse() ;
//        softly.assertThat(result.getPaymentStatusEnum().getResponseStatus().isAccepted() ).as(" result.getPaymentStatusEnum().getResponseStatus().isAccepted()" ).isTrue() ;
//        softly.assertThat(result.getPaymentStatusEnum().getResponseStatus().isFailed() ).as(" result.getPaymentStatusEnum().getResponseStatus().isFailed()" ).isFalse() ;
        softly.assertThat(result.isCharged() ).as(" result.isCharged()" ).isTrue() ;
        softly.assertThat(result.getUserResourceBalance() ).as(" result.getUserResourceBalance()" ).isNull();
// com.vizzavi.ecommerce.business.common.ResponseStatus
        softly.assertThat(result.getStatusEnum().getName() ).as(" result.getStatusEnum().getName()" ).isEqualTo("ACCEPTED");
        softly.assertThat(result.getStatusEnum().getId() ).as(" result.getStatusEnum().getId()" ).isEqualTo(1) ;
        softly.assertThat(result.getStatusEnum().isError() ).as(" result.getStatusEnum().isError()" ).isFalse() ;
        softly.assertThat(result.getStatusEnum().isDenied() ).as(" result.getStatusEnum().isDenied()" ).isFalse() ;
        softly.assertThat(result.getStatusEnum().isRejected() ).as(" result.getStatusEnum().isRejected()" ).isFalse() ;
        softly.assertThat(result.getStatusEnum().isAccepted() ).as(" result.getStatusEnum().isAccepted()" ).isTrue() ;
        softly.assertThat(result.getStatusEnum().isFailed() ).as(" result.getStatusEnum().isFailed()" ).isFalse() ;
        softly.assertThat(result.getValidMicroServiceSub() ).as(" result.getValidMicroServiceSub()" ).isNull();
        softly.assertThat(result.getPaymentInfo() ).as(" result.getPaymentInfo()" ).isEqualTo("This is payment info from Pay Auth handler");
        softly.assertThat(result.getReceiptingCreditBalanceImpact() ).as(" result.getReceiptingCreditBalanceImpact()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getReceiptingUsageTypeAttribute() ).as(" result.getReceiptingUsageTypeAttribute()" ).isEqualTo(-1) ;
//check size of array!
        softly.assertThat(result.getSubscriptionIds().length ).as(" result.getSubscriptionIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.isServiceSubmit() ).as(" result.isServiceSubmit()" ).isFalse() ;
// [J
        softly.assertThat(result.getMicroServiceSubList() ).as(" result.getMicroServiceSubList()" ).isNull();
        softly.assertThat(result.getTaxAmount() ).as(" result.getTaxAmount()" ).isEqualTo(new Double(1.75)) ;
        softly.assertThat(result.getAuthorized() ).as(" result.getAuthorized()" ).isTrue() ;
        softly.assertThat(result.getActiveSubscriptions() ).as(" result.getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.isValid() ).as(" result.isValid()" ).isTrue() ;
        softly.assertThat(result.getTaxRate() ).as(" result.getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getTaxCode() ).as(" result.getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getRate() ).as(" result.getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getStandardRate() ).as(" result.getStandardRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(result.getAlternativeTaxCode() ).as(" result.getAlternativeTaxCode()" ).isNull();
        softly.assertThat(result.getAlternativeTaxRate() ).as(" result.getAlternativeTaxRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getAlternativeTaxAmount() ).as(" result.getAlternativeTaxAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getEventUnits() ).as(" result.getEventUnits()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getDescription() ).as(" result.getDescription()" ).isEqualTo("ER Rated Event");
        softly.assertThat(result.isSuccess() ).as(" result.isSuccess()" ).isTrue() ;
        softly.assertThat(result.getUndiscountedStandardRate() ).as(" result.getUndiscountedStandardRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.isAlwaysValidateMsisdn() ).as(" result.isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(result.getCurrencyId() ).as(" result.getCurrencyId()" ).isEqualTo(826) ;
        softly.assertThat(result.getNetStandardRate() ).as(" result.getNetStandardRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getNetRate() ).as(" result.getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(result.getRatingSystemId() ).as(" result.getRatingSystemId()" ).isEqualTo("ER");
        softly.assertThat(result.getRatingSystemVersion() ).as(" result.getRatingSystemVersion()" ).isEqualTo("ER 5.0.0");
        softly.assertThat(result.isDiscount() ).as(" result.isDiscount()" ).isFalse() ;
        softly.assertThat(result.getDiscountPromoText() ).as(" result.getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.isAlternativePaymentMethod() ).as(" result.isAlternativePaymentMethod()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.PricePoint
// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(result.getMatchingAttributes().getResource().getName() ).as(" result.getMatchingAttributes().getResource().getName()" ).isEqualTo("GBP");
//        softly.assertThat(result.getMatchingAttributes().getResource().getDescription() ).as(" result.getMatchingAttributes().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
//        softly.assertThat(result.getMatchingAttributes().getResource().isToken() ).as(" result.getMatchingAttributes().getResource().isToken()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResource().isUsageToken() ).as(" result.getMatchingAttributes().getResource().isUsageToken()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResource().isPayToken() ).as(" result.getMatchingAttributes().getResource().isPayToken()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResource().getResourceSymbol() ).as(" result.getMatchingAttributes().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//        softly.assertThat(result.getMatchingAttributes().getResource().getCode() ).as(" result.getMatchingAttributes().getResource().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(result.getMatchingAttributes().getResource().isCurrency() ).as(" result.getMatchingAttributes().getResource().isCurrency()" ).isTrue() ;
//        softly.assertThat(result.getMatchingAttributes().getResource().isResource() ).as(" result.getMatchingAttributes().getResource().isResource()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResource().getResourceName() ).as(" result.getMatchingAttributes().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(result.getMatchingAttributes().getResource().getCountryId() ).as(" result.getMatchingAttributes().getResource().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().getKey() ).as(" result.getMatchingAttributes().getKey()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getId() ).as(" result.getMatchingAttributes().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
//        softly.assertThat(result.getMatchingAttributes().isPreOrder() ).as(" result.getMatchingAttributes().isPreOrder()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getTaxRate() ).as(" result.getMatchingAttributes().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(result.getMatchingAttributes().getTaxCode() ).as(" result.getMatchingAttributes().getTaxCode()" ).isEqualTo("TAX");
//        softly.assertThat(result.getMatchingAttributes().getLinkedByTrialPricepoint() ).as(" result.getMatchingAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getRate() ).as(" result.getMatchingAttributes().getRate()" ).isEqualTo(new Double(11.75)) ;
//        softly.assertThat(result.getMatchingAttributes().getDescription() ).as(" result.getMatchingAttributes().getDescription()" ).isEqualTo("Recurring 7 day");
//        softly.assertThat(result.getMatchingAttributes().getStartDate() ).as(" result.getMatchingAttributes().getStartDate()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isAlwaysValidateMsisdn() ).as(" result.getMatchingAttributes().isAlwaysValidateMsisdn()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResourceBalances() ).as(" result.getMatchingAttributes().getResourceBalances()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getNetRate() ).as(" result.getMatchingAttributes().getNetRate()" ).isEqualTo(new Double(10.0)) ;
//        softly.assertThat(result.getMatchingAttributes().getStandardRate() ).as(" result.getMatchingAttributes().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
//        softly.assertThat(result.getMatchingAttributes().isDiscount() ).as(" result.getMatchingAttributes().isDiscount()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getDiscountPromoText() ).as(" result.getMatchingAttributes().getDiscountPromoText()" ).isNullOrEmpty();
//        softly.assertThat(result.getMatchingAttributes().getPackageId() ).as(" result.getMatchingAttributes().getPackageId()" ).isEqualTo("pAlt");
//        softly.assertThat(result.getMatchingAttributes().getContentId() ).as(" result.getMatchingAttributes().getContentId()" ).isEqualTo("*");
//        softly.assertThat(result.getMatchingAttributes().getPricingText1() ).as(" result.getMatchingAttributes().getPricingText1()" ).isNullOrEmpty();
//        softly.assertThat(result.getMatchingAttributes().getPricingText2() ).as(" result.getMatchingAttributes().getPricingText2()" ).isNullOrEmpty();
//        softly.assertThat(result.getMatchingAttributes().getUsageTime() ).as(" result.getMatchingAttributes().getUsageTime()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(result.getMatchingAttributes().getAccessDuration() ).as(" result.getMatchingAttributes().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
//        softly.assertThat(result.getMatchingAttributes().isZeroCostIgnore() ).as(" result.getMatchingAttributes().isZeroCostIgnore()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getCustomResourceBalances() ).as(" result.getMatchingAttributes().getCustomResourceBalances()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricingModelTier() ).as(" result.getMatchingAttributes().getPricingModelTier()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isArchived() ).as(" result.getMatchingAttributes().isArchived()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isBasePricePoint() ).as(" result.getMatchingAttributes().isBasePricePoint()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getAccessDevice() ).as(" result.getMatchingAttributes().getAccessDevice()" ).isEqualTo(999) ;
//        softly.assertThat(result.getMatchingAttributes().getAlternativeRate() ).as(" result.getMatchingAttributes().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;
////check size of array!
//        softly.assertThat(result.getMatchingAttributes().getBalanceImpacts().length ).as(" result.getMatchingAttributes().getBalanceImpacts().length" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().isTrial() ).as(" result.getMatchingAttributes().isTrial()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getGlid() ).as(" result.getMatchingAttributes().getGlid()" ).isNullOrEmpty();
//// java.util.HashMap
//        softly.assertThat(result.getMatchingAttributes().getPricepointIdLink() ).as(" result.getMatchingAttributes().getPricepointIdLink()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isPreview() ).as(" result.getMatchingAttributes().isPreview()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getInteractiveFlag() ).as(" result.getMatchingAttributes().getInteractiveFlag()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isForcedPurchase() ).as(" result.getMatchingAttributes().isForcedPurchase()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isSubscriptionDuplicate() ).as(" result.getMatchingAttributes().isSubscriptionDuplicate()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getFixedExpiryDate() ).as(" result.getMatchingAttributes().getFixedExpiryDate()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isReserveOnly() ).as(" result.getMatchingAttributes().isReserveOnly()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getMinSubPeriod() ).as(" result.getMatchingAttributes().getMinSubPeriod()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().getPenaltyCharges() ).as(" result.getMatchingAttributes().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
//        softly.assertThat(result.getMatchingAttributes().getCancellation() ).as(" result.getMatchingAttributes().getCancellation()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getMonthEndSubscription() ).as(" result.getMatchingAttributes().getMonthEndSubscription()" ).isEqualTo("NULL");
//        softly.assertThat(result.getMatchingAttributes().isHistoric() ).as(" result.getMatchingAttributes().isHistoric()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getFixedRecurrence() ).as(" result.getMatchingAttributes().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(result.getMatchingAttributes().isFixedRecurringPricePoint() ).as(" result.getMatchingAttributes().isFixedRecurringPricePoint()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isReceipting() ).as(" result.getMatchingAttributes().isReceipting()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getReceiptingAttribute() ).as(" result.getMatchingAttributes().getReceiptingAttribute()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getOrder() ).as(" result.getMatchingAttributes().getOrder()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().getPaymentHandler() ).as(" result.getMatchingAttributes().getPaymentHandler()" ).isEqualTo("NULL");
////check size of array!
//        softly.assertThat(result.getMatchingAttributes().getNonMatchAllUserGroups().length ).as(" result.getMatchingAttributes().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().isPromo() ).as(" result.getMatchingAttributes().isPromo()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isSubmitToPaymentHandler() ).as(" result.getMatchingAttributes().isSubmitToPaymentHandler()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isSuppressToPaymentHandler() ).as(" result.getMatchingAttributes().isSuppressToPaymentHandler()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getPricingTextTemplateName1() ).as(" result.getMatchingAttributes().getPricingTextTemplateName1()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricingTextTemplateName2() ).as(" result.getMatchingAttributes().getPricingTextTemplateName2()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getTranslatedPricingText1() ).as(" result.getMatchingAttributes().getTranslatedPricingText1()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getTranslatedPricingText2() ).as(" result.getMatchingAttributes().getTranslatedPricingText2()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getRecurrenceDay() ).as(" result.getMatchingAttributes().getRecurrenceDay()" ).isEqualTo(-1) ;
//// java.util.HashMap
//// java.util.HashMap
//        softly.assertThat(result.getMatchingAttributes().isAlignWithExternal() ).as(" result.getMatchingAttributes().isAlignWithExternal()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getGracePeriod() ).as(" result.getMatchingAttributes().getGracePeriod()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getRetryFrequency() ).as(" result.getMatchingAttributes().getRetryFrequency()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getSuspensionPeriod() ).as(" result.getMatchingAttributes().getSuspensionPeriod()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isGraceSuspensionRetryFrequencyUndefined() ).as(" result.getMatchingAttributes().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
//        softly.assertThat(result.getMatchingAttributes().getTranslatedPricingText() ).as(" result.getMatchingAttributes().getTranslatedPricingText()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getFairUsageLimit() ).as(" result.getMatchingAttributes().getFairUsageLimit()" ).isEqualTo(-1) ;
//        softly.assertThat(result.getMatchingAttributes().getFairUsagePeriod() ).as(" result.getMatchingAttributes().getFairUsagePeriod()" ).isEqualTo(-1) ;
//        softly.assertThat(result.getMatchingAttributes().getFairUsagePeriodUnit() ).as(" result.getMatchingAttributes().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
//        softly.assertThat(result.getMatchingAttributes().getExtensionPeriod() ).as(" result.getMatchingAttributes().getExtensionPeriod()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().isIncludeServiceForPackageFUP() ).as(" result.getMatchingAttributes().isIncludeServiceForPackageFUP()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isFairUsagePolicyEnabled() ).as(" result.getMatchingAttributes().isFairUsagePolicyEnabled()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isTariff() ).as(" result.getMatchingAttributes().isTariff()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isHideForPurchaseOptions() ).as(" result.getMatchingAttributes().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(result.getMatchingAttributes().getTax().getName() ).as(" result.getMatchingAttributes().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(result.getMatchingAttributes().getTax().getKey() ).as(" result.getMatchingAttributes().getTax().getKey()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getTax().getTaxRate() ).as(" result.getMatchingAttributes().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(result.getMatchingAttributes().getTax().getTaxCode() ).as(" result.getMatchingAttributes().getTax().getTaxCode()" ).isEqualTo("TAX");
//        softly.assertThat(result.getMatchingAttributes().getBalances() ).as(" result.getMatchingAttributes().getBalances()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isRecurring() ).as(" result.getMatchingAttributes().isRecurring()" ).isTrue() ;
//        softly.assertThat(result.getMatchingAttributes().getRenewalsUntilLinkedPricepoint() ).as(" result.getMatchingAttributes().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
//        softly.assertThat(result.getMatchingAttributes().getPricePointTier().getKey() ).as(" result.getMatchingAttributes().getPricePointTier().getKey()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTier().getPromotionalPrice() ).as(" result.getMatchingAttributes().getPricePointTier().getPromotionalPrice()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTier().getPromotionalPricingText() ).as(" result.getMatchingAttributes().getPricePointTier().getPromotionalPricingText()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTier().getPricingModel() ).as(" result.getMatchingAttributes().getPricePointTier().getPricingModel()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTier().getTier() ).as(" result.getMatchingAttributes().getPricePointTier().getTier()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTier().isDefaultPPT() ).as(" result.getMatchingAttributes().getPricePointTier().isDefaultPPT()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getPricePointTier().getPromotionalPricingTextList() ).as(" result.getMatchingAttributes().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPackageIdentifier() ).as(" result.getMatchingAttributes().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_10010_999_999_*_*_*_false_false_*");
//        softly.assertThat(result.getMatchingAttributes().getServiceIdentifier() ).as(" result.getMatchingAttributes().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_10010_*_999_999");
//// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(result.getMatchingAttributes().getResourceField().getName() ).as(" result.getMatchingAttributes().getResourceField().getName()" ).isEqualTo("GBP");
//        softly.assertThat(result.getMatchingAttributes().getResourceField().getDescription() ).as(" result.getMatchingAttributes().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
//        softly.assertThat(result.getMatchingAttributes().getResourceField().isToken() ).as(" result.getMatchingAttributes().getResourceField().isToken()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResourceField().isUsageToken() ).as(" result.getMatchingAttributes().getResourceField().isUsageToken()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResourceField().isPayToken() ).as(" result.getMatchingAttributes().getResourceField().isPayToken()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResourceField().getResourceSymbol() ).as(" result.getMatchingAttributes().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//        softly.assertThat(result.getMatchingAttributes().getResourceField().getCode() ).as(" result.getMatchingAttributes().getResourceField().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(result.getMatchingAttributes().getResourceField().isCurrency() ).as(" result.getMatchingAttributes().getResourceField().isCurrency()" ).isTrue() ;
//        softly.assertThat(result.getMatchingAttributes().getResourceField().isResource() ).as(" result.getMatchingAttributes().getResourceField().isResource()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getResourceField().getResourceName() ).as(" result.getMatchingAttributes().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(result.getMatchingAttributes().getResourceField().getCountryId() ).as(" result.getMatchingAttributes().getResourceField().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().getStandardRateWithoutTax() ).as(" result.getMatchingAttributes().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
//        softly.assertThat(result.getMatchingAttributes().isVolumeType() ).as(" result.getMatchingAttributes().isVolumeType()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isOriginal() ).as(" result.getMatchingAttributes().isOriginal()" ).isFalse() ;
////check size of array!
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers().length ).as(" result.getMatchingAttributes().getPricePointTiers().length" ).isEqualTo(1) ;
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers()[0].getKey() ).as(" result.getMatchingAttributes().getPricePointTiers()[0].getKey()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getMatchingAttributes().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getMatchingAttributes().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers()[0].getPricingModel() ).as(" result.getMatchingAttributes().getPricePointTiers()[0].getPricingModel()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers()[0].getTier() ).as(" result.getMatchingAttributes().getPricePointTiers()[0].getTier()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers()[0].isDefaultPPT() ).as(" result.getMatchingAttributes().getPricePointTiers()[0].isDefaultPPT()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getMatchingAttributes().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getProtectedFk() ).as(" result.getMatchingAttributes().getProtectedFk()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getmPricingText1() ).as(" result.getMatchingAttributes().getmPricingText1()" ).isNullOrEmpty();
//        softly.assertThat(result.getMatchingAttributes().getmPricingText2() ).as(" result.getMatchingAttributes().getmPricingText2()" ).isNullOrEmpty();
//        softly.assertThat(result.getMatchingAttributes().isNonRecurring() ).as(" result.getMatchingAttributes().isNonRecurring()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isEvent() ).as(" result.getMatchingAttributes().isEvent()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isActive() ).as(" result.getMatchingAttributes().isActive()" ).isTrue() ;
//        softly.assertThat(result.getMatchingAttributes().getExpiryDate() ).as(" result.getMatchingAttributes().getExpiryDate()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getChannel() ).as(" result.getMatchingAttributes().getChannel()" ).isEqualTo(999) ;
//        softly.assertThat(result.getMatchingAttributes().getMultiUsageMode() ).as(" result.getMatchingAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().getNetworkCodeMatchMethod() ).as(" result.getMatchingAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().isPreRatePriceGross() ).as(" result.getMatchingAttributes().isPreRatePriceGross()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getPreRate() ).as(" result.getMatchingAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(result.getMatchingAttributes().getPaymentInformation() ).as(" result.getMatchingAttributes().getPaymentInformation()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getContentName() ).as(" result.getMatchingAttributes().getContentName()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getAssetID() ).as(" result.getMatchingAttributes().getAssetID()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPremiumLevel() ).as(" result.getMatchingAttributes().getPremiumLevel()" ).isEqualTo(999) ;
//        softly.assertThat(result.getMatchingAttributes().getReserveOnlyFlag() ).as(" result.getMatchingAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
//        softly.assertThat(result.getMatchingAttributes().getSupplierId() ).as(" result.getMatchingAttributes().getSupplierId()" ).isEqualTo("*");
//        softly.assertThat(result.getMatchingAttributes().getDeviceType() ).as(" result.getMatchingAttributes().getDeviceType()" ).isEqualTo(999) ;
////check size of array!
//        softly.assertThat(result.getMatchingAttributes().getUserGroups().length ).as(" result.getMatchingAttributes().getUserGroups().length" ).isEqualTo(1) ;
//        softly.assertThat(result.getMatchingAttributes().getUserGroup() ).as(" result.getMatchingAttributes().getUserGroup()" ).isEqualTo("*");
//        softly.assertThat(result.getMatchingAttributes().getPaymentType() ).as(" result.getMatchingAttributes().getPaymentType()" ).isEqualTo(10010) ;
//        softly.assertThat(result.getMatchingAttributes().getEventUnits() ).as(" result.getMatchingAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
////check size of array!
//        softly.assertThat(result.getMatchingAttributes().getPromoCodes().length ).as(" result.getMatchingAttributes().getPromoCodes().length" ).isEqualTo(1) ;
////check size of array!
//        softly.assertThat(result.getMatchingAttributes().getBearerIds().length ).as(" result.getMatchingAttributes().getBearerIds().length" ).isEqualTo(1) ;
//        softly.assertThat(result.getMatchingAttributes().getPromoCode() ).as(" result.getMatchingAttributes().getPromoCode()" ).isEqualTo("*");
//        softly.assertThat(result.getMatchingAttributes().getDuration() ).as(" result.getMatchingAttributes().getDuration()" ).isEqualTo(2) ;
//        softly.assertThat(result.getMatchingAttributes().getChargingMethod() ).as(" result.getMatchingAttributes().getChargingMethod()" ).isEqualTo(3) ;
//        softly.assertThat(result.getMatchingAttributes().getBearer() ).as(" result.getMatchingAttributes().getBearer()" ).isEqualTo("*");
//        softly.assertThat(result.getMatchingAttributes().isInteractive() ).as(" result.getMatchingAttributes().isInteractive()" ).isTrue() ;
//        softly.assertThat(result.getMatchingAttributes().isIncludeUnavailable() ).as(" result.getMatchingAttributes().isIncludeUnavailable()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getExpressFlag() ).as(" result.getMatchingAttributes().getExpressFlag()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isExpressFlag() ).as(" result.getMatchingAttributes().isExpressFlag()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isCancellationUsage() ).as(" result.getMatchingAttributes().isCancellationUsage()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getTierName() ).as(" result.getMatchingAttributes().getTierName()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPromoPrecode() ).as(" result.getMatchingAttributes().getPromoPrecode()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getUniquePromoCode() ).as(" result.getMatchingAttributes().getUniquePromoCode()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPromoUniqueCode() ).as(" result.getMatchingAttributes().getPromoUniqueCode()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getNextCycleDiscount() ).as(" result.getMatchingAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
//        softly.assertThat(result.getMatchingAttributes().getHasHistoricPricePointFlag() ).as(" result.getMatchingAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isIsForRenewal() ).as(" result.getMatchingAttributes().isIsForRenewal()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getTaxRateAsDouble() ).as(" result.getMatchingAttributes().getTaxRateAsDouble()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getAffiliateID() ).as(" result.getMatchingAttributes().getAffiliateID()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPartnerId() ).as(" result.getMatchingAttributes().getPartnerId()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getTariff() ).as(" result.getMatchingAttributes().getTariff()" ).isEqualTo("*");
//        softly.assertThat(result.getMatchingAttributes().getAggregatorId() ).as(" result.getMatchingAttributes().getAggregatorId()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isForcePurchaseFlow() ).as(" result.getMatchingAttributes().isForcePurchaseFlow()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getReceipientMsisdn() ).as(" result.getMatchingAttributes().getReceipientMsisdn()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getProductCode() ).as(" result.getMatchingAttributes().getProductCode()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getMerchantName() ).as(" result.getMatchingAttributes().getMerchantName()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getInvoiceText() ).as(" result.getMatchingAttributes().getInvoiceText()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isReIssueEnabled() ).as(" result.getMatchingAttributes().isReIssueEnabled()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isReIssueFlagPresent() ).as(" result.getMatchingAttributes().isReIssueFlagPresent()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getShortPackageId() ).as(" result.getMatchingAttributes().getShortPackageId()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getHistoryStartDate() ).as(" result.getMatchingAttributes().getHistoryStartDate()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getVendorId() ).as(" result.getMatchingAttributes().getVendorId()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().isIsForNextPaymentAmount() ).as(" result.getMatchingAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getRenewalPreRate() ).as(" result.getMatchingAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(result.getMatchingAttributes().isOverrideDisallowPreRateFlag() ).as(" result.getMatchingAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getContentCategory() ).as(" result.getMatchingAttributes().getContentCategory()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPartnerUrl() ).as(" result.getMatchingAttributes().getPartnerUrl()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPartnerContactInfo() ).as(" result.getMatchingAttributes().getPartnerContactInfo()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPartnerEmail() ).as(" result.getMatchingAttributes().getPartnerEmail()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPartnerName() ).as(" result.getMatchingAttributes().getPartnerName()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" result.getMatchingAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(result.getMatchingAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getMatchingAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(result.getMatchingAttributes().getSubRenewalPricepointId() ).as(" result.getMatchingAttributes().getSubRenewalPricepointId()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getLinkPricepointId() ).as(" result.getMatchingAttributes().getLinkPricepointId()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getSubPurchaseTransactionTrial() ).as(" result.getMatchingAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getDiscardHiddenInactivePricepoints() ).as(" result.getMatchingAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" result.getMatchingAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
//        softly.assertThat(result.getMatchingAttributes().getExtIdentifier1() ).as(" result.getMatchingAttributes().getExtIdentifier1()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getExtIdentifier2() ).as(" result.getMatchingAttributes().getExtIdentifier2()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getExtIdentifier3() ).as(" result.getMatchingAttributes().getExtIdentifier3()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getAccessChannel() ).as(" result.getMatchingAttributes().getAccessChannel()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getPurchaseChannel() ).as(" result.getMatchingAttributes().getPurchaseChannel()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getDeviceID() ).as(" result.getMatchingAttributes().getDeviceID()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getLocal() ).as(" result.getMatchingAttributes().getLocal()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getMsisdn() ).as(" result.getMatchingAttributes().getMsisdn()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getLanguageLocale() ).as(" result.getMatchingAttributes().getLanguageLocale()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getLanguageCode() ).as(" result.getMatchingAttributes().getLanguageCode()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getExternalField1() ).as(" result.getMatchingAttributes().getExternalField1()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getExternalField2() ).as(" result.getMatchingAttributes().getExternalField2()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getExternalTransId() ).as(" result.getMatchingAttributes().getExternalTransId()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getActiveSubscriptions() ).as(" result.getMatchingAttributes().getActiveSubscriptions()" ).isNull();
//        softly.assertThat(result.getMatchingAttributes().getCsrId() ).as(" result.getMatchingAttributes().getCsrId()" ).isNull();
// com.vizzavi.ecommerce.business.common.RatingAttributes
//        softly.assertThat(result.getInputAttributes().getChannel() ).as(" result.getInputAttributes().getChannel()" ).isEqualTo(999) ;
//        softly.assertThat(result.getInputAttributes().getMultiUsageMode() ).as(" result.getInputAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
//        softly.assertThat(result.getInputAttributes().getNetworkCodeMatchMethod() ).as(" result.getInputAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(0) ;
//        softly.assertThat(result.getInputAttributes().isPreRatePriceGross() ).as(" result.getInputAttributes().isPreRatePriceGross()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getPreRate() ).as(" result.getInputAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(result.getInputAttributes().getPaymentInformation() ).as(" result.getInputAttributes().getPaymentInformation()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getContentName() ).as(" result.getInputAttributes().getContentName()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getAssetID() ).as(" result.getInputAttributes().getAssetID()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPremiumLevel() ).as(" result.getInputAttributes().getPremiumLevel()" ).isEqualTo(999) ;
//        softly.assertThat(result.getInputAttributes().getReserveOnlyFlag() ).as(" result.getInputAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
//        softly.assertThat(result.getInputAttributes().getSupplierId() ).as(" result.getInputAttributes().getSupplierId()" ).isEqualTo("*");
//        softly.assertThat(result.getInputAttributes().getDeviceType() ).as(" result.getInputAttributes().getDeviceType()" ).isEqualTo(999) ;
////check size of array!
//        softly.assertThat(result.getInputAttributes().getUserGroups().length ).as(" result.getInputAttributes().getUserGroups().length" ).isEqualTo(1) ;
//        softly.assertThat(result.getInputAttributes().getUserGroup() ).as(" result.getInputAttributes().getUserGroup()" ).isEqualTo("*");
//        softly.assertThat(result.getInputAttributes().getPaymentType() ).as(" result.getInputAttributes().getPaymentType()" ).isEqualTo(10010) ;
//        softly.assertThat(result.getInputAttributes().getEventUnits() ).as(" result.getInputAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
////check size of array!
//        softly.assertThat(result.getInputAttributes().getPromoCodes().length ).as(" result.getInputAttributes().getPromoCodes().length" ).isEqualTo(0) ;
////check size of array!
//        softly.assertThat(result.getInputAttributes().getBearerIds().length ).as(" result.getInputAttributes().getBearerIds().length" ).isEqualTo(1) ;
//        softly.assertThat(result.getInputAttributes().getPromoCode() ).as(" result.getInputAttributes().getPromoCode()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getDuration() ).as(" result.getInputAttributes().getDuration()" ).isEqualTo(2) ;
//        softly.assertThat(result.getInputAttributes().getChargingMethod() ).as(" result.getInputAttributes().getChargingMethod()" ).isEqualTo(3) ;
//        softly.assertThat(result.getInputAttributes().getBearer() ).as(" result.getInputAttributes().getBearer()" ).isEqualTo("*");
//        softly.assertThat(result.getInputAttributes().isInteractive() ).as(" result.getInputAttributes().isInteractive()" ).isTrue() ;
//        softly.assertThat(result.getInputAttributes().isIncludeUnavailable() ).as(" result.getInputAttributes().isIncludeUnavailable()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getExpressFlag() ).as(" result.getInputAttributes().getExpressFlag()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().isExpressFlag() ).as(" result.getInputAttributes().isExpressFlag()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().isPreOrder() ).as(" result.getInputAttributes().isPreOrder()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().isCancellationUsage() ).as(" result.getInputAttributes().isCancellationUsage()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getTierName() ).as(" result.getInputAttributes().getTierName()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPromoPrecode() ).as(" result.getInputAttributes().getPromoPrecode()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getUniquePromoCode() ).as(" result.getInputAttributes().getUniquePromoCode()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPromoUniqueCode() ).as(" result.getInputAttributes().getPromoUniqueCode()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getNextCycleDiscount() ).as(" result.getInputAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
//        softly.assertThat(result.getInputAttributes().getHasHistoricPricePointFlag() ).as(" result.getInputAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().isIsForRenewal() ).as(" result.getInputAttributes().isIsForRenewal()" ).isTrue() ;
//        softly.assertThat(result.getInputAttributes().getTaxRate() ).as(" result.getInputAttributes().getTaxRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(result.getInputAttributes().getTaxRateAsDouble() ).as(" result.getInputAttributes().getTaxRateAsDouble()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getAffiliateID() ).as(" result.getInputAttributes().getAffiliateID()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPartnerId() ).as(" result.getInputAttributes().getPartnerId()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getTariff() ).as(" result.getInputAttributes().getTariff()" ).isEqualTo("*");
//        softly.assertThat(result.getInputAttributes().getAggregatorId() ).as(" result.getInputAttributes().getAggregatorId()" ).isNull();
//        softly.assertThat(result.getInputAttributes().isForcePurchaseFlow() ).as(" result.getInputAttributes().isForcePurchaseFlow()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getReceipientMsisdn() ).as(" result.getInputAttributes().getReceipientMsisdn()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getProductCode() ).as(" result.getInputAttributes().getProductCode()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getMerchantName() ).as(" result.getInputAttributes().getMerchantName()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getInvoiceText() ).as(" result.getInputAttributes().getInvoiceText()" ).isNull();
//        softly.assertThat(result.getInputAttributes().isReIssueEnabled() ).as(" result.getInputAttributes().isReIssueEnabled()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().isReIssueFlagPresent() ).as(" result.getInputAttributes().isReIssueFlagPresent()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getShortPackageId() ).as(" result.getInputAttributes().getShortPackageId()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getTaxCode() ).as(" result.getInputAttributes().getTaxCode()" ).isEqualTo("*");
//        softly.assertThat(result.getInputAttributes().getHistoryStartDate() ).as(" result.getInputAttributes().getHistoryStartDate()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getVendorId() ).as(" result.getInputAttributes().getVendorId()" ).isNull();
//        softly.assertThat(result.getInputAttributes().isIsForNextPaymentAmount() ).as(" result.getInputAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getRenewalPreRate() ).as(" result.getInputAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(result.getInputAttributes().isOverrideDisallowPreRateFlag() ).as(" result.getInputAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getContentCategory() ).as(" result.getInputAttributes().getContentCategory()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPartnerUrl() ).as(" result.getInputAttributes().getPartnerUrl()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPartnerContactInfo() ).as(" result.getInputAttributes().getPartnerContactInfo()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPartnerEmail() ).as(" result.getInputAttributes().getPartnerEmail()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPartnerName() ).as(" result.getInputAttributes().getPartnerName()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" result.getInputAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(result.getInputAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getInputAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(result.getInputAttributes().getLinkedByTrialPricepoint() ).as(" result.getInputAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getSubRenewalPricepointId() ).as(" result.getInputAttributes().getSubRenewalPricepointId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
//        softly.assertThat(result.getInputAttributes().getLinkPricepointId() ).as(" result.getInputAttributes().getLinkPricepointId()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getSubPurchaseTransactionTrial() ).as(" result.getInputAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getDiscardHiddenInactivePricepoints() ).as(" result.getInputAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" result.getInputAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
//        softly.assertThat(result.getInputAttributes().getExtIdentifier1() ).as(" result.getInputAttributes().getExtIdentifier1()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getExtIdentifier2() ).as(" result.getInputAttributes().getExtIdentifier2()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getExtIdentifier3() ).as(" result.getInputAttributes().getExtIdentifier3()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getAccessChannel() ).as(" result.getInputAttributes().getAccessChannel()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getPurchaseChannel() ).as(" result.getInputAttributes().getPurchaseChannel()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getDeviceID() ).as(" result.getInputAttributes().getDeviceID()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getLocal() ).as(" result.getInputAttributes().getLocal()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getMsisdn() ).as(" result.getInputAttributes().getMsisdn()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getLanguageLocale() ).as(" result.getInputAttributes().getLanguageLocale()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getLanguageCode() ).as(" result.getInputAttributes().getLanguageCode()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getExternalField1() ).as(" result.getInputAttributes().getExternalField1()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getExternalField2() ).as(" result.getInputAttributes().getExternalField2()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getExternalTransId() ).as(" result.getInputAttributes().getExternalTransId()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getActiveSubscriptions() ).as(" result.getInputAttributes().getActiveSubscriptions()" ).isNull();
//        softly.assertThat(result.getInputAttributes().getCsrId() ).as(" result.getInputAttributes().getCsrId()" ).isNull();
        softly.assertThat(result.getDiscountPercentage() ).as(" result.getDiscountPercentage()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPackageId() ).as(" result.getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(result.getContentId() ).as(" result.getContentId()" ).isEqualTo("*");
        softly.assertThat(result.getPricingText1() ).as(" result.getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getPricingText2() ).as(" result.getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getAlternativeCurrencyId() ).as(" result.getAlternativeCurrencyId()" ).isEqualTo(0) ;
        softly.assertThat(result.getAlternativeNetRate() ).as(" result.getAlternativeNetRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getRateIdentifier() ).as(" result.getRateIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
//check size of array!
//        softly.assertThat(result.getRateIdentifiers().length ).as(" result.getRateIdentifiers().length" ).isEqualTo(1) ;
        softly.assertThat(result.getUsageTime() ).as(" result.getUsageTime()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getAccessDuration() ).as(" result.getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getPricePointId() ).as(" result.getPricePointId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(result.isUniquePromoCode() ).as(" result.isUniquePromoCode()" ).isFalse() ;
        softly.assertThat(result.isZeroCostIgnore() ).as(" result.isZeroCostIgnore()" ).isFalse() ;
//check size of array!
//        softly.assertThat(result.getCustomResourceBalances().length ).as(" result.getCustomResourceBalances().length" ).isEqualTo(1) ;
//// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().getName() ).as(" result.getCustomResourceBalances()[0].getResource().getName()" ).isEqualTo("Content Credit");
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().getDescription() ).as(" result.getCustomResourceBalances()[0].getResource().getDescription()" ).isNull();
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().isToken() ).as(" result.getCustomResourceBalances()[0].getResource().isToken()" ).isFalse() ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().isUsageToken() ).as(" result.getCustomResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().isPayToken() ).as(" result.getCustomResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().getResourceSymbol() ).as(" result.getCustomResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().getCode() ).as(" result.getCustomResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().isCurrency() ).as(" result.getCustomResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().isResource() ).as(" result.getCustomResourceBalances()[0].getResource().isResource()" ).isTrue() ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().getResourceName() ).as(" result.getCustomResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
//        softly.assertThat(result.getCustomResourceBalances()[0].getResource().getCountryId() ).as(" result.getCustomResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getBalance() ).as(" result.getCustomResourceBalances()[0].getBalance()" ).isEqualTo(new Double(2.0)) ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getThreshold() ).as(" result.getCustomResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
//        softly.assertThat(result.getCustomResourceBalances()[0].getSubscription() ).as(" result.getCustomResourceBalances()[0].getSubscription()" ).isNull();
//        softly.assertThat(result.getCustomResourceBalances()[0].getPackageId() ).as(" result.getCustomResourceBalances()[0].getPackageId()" ).isNull();
//        softly.assertThat(result.getCustomResourceBalances()[0].getOldestSubscriptionId() ).as(" result.getCustomResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
//        softly.assertThat(result.getCustomResourceBalances()[0].getSubscriptionId() ).as(" result.getCustomResourceBalances()[0].getSubscriptionId()" ).isNull();
//        softly.assertThat(result.getCustomResourceBalances()[0].getSubscriptionIdLong() ).as(" result.getCustomResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;

        //Only want to report the SoftAssertionErrors and not actually fail the test
        try {
            softly.assertAll();
        } catch (SoftAssertionError e) {
            e.getErrors().forEach(System.err::println);
        }

    }

}
