package com.vodafone.er.ecom.proxy.usagecomplete;

import com.vizzavi.ecommerce.business.charging.PurchaseAttributes;
import com.vizzavi.ecommerce.business.charging.PurchaseAuthorization;
import com.vizzavi.ecommerce.business.charging.UsageAuthorization;
import com.vizzavi.ecommerce.business.common.EcomApiFactory;
import org.assertj.core.api.SoftAssertions;
import org.junit.Ignore;
import org.junit.Test;

import java.util.Locale;
import java.util.Random;

import static org.junit.Assert.assertTrue;

/**
 * Created by Ravi Aghera
 */
public class UsageComplete4IT_pt6 {

    private SoftAssertions softly = new SoftAssertions();

    @Ignore
    public void usageComplete() throws Exception {
        final String msisdn = String.valueOf(new Random().nextInt());

        final String packageId = "2PP_P002__X__package:2PP_P002_TAX_999_999_999_999_999_*_*_false_false";

        final PurchaseAuthorization auth =
                EcomApiFactory.getPurchaseApi(Locale.UK).purchasePackageMsisdn("test", msisdn, packageId, new PurchaseAttributes());

        final UsageAuthorization result = EcomApiFactory.getChargingApi(Locale.UK)
                .usageComplete("test-client-id", auth.getEventReservationId(), 1);


        //if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPricingModel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].isDefaultPPT() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPreOrder() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTaxRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTaxCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLinkedByTrialPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isDiscount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isDiscount()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDiscountPromoText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPackageId()" ).isEqualTo("CP_001");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getContentId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getContentId()" ).isEqualTo("2PP_S001");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingText1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingText2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUsageTime() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAccessDuration() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingModelTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingModelTier()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isArchived() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isArchived()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isBasePricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isBasePricePoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAccessDevice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAlternativeRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAlternativeRate()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpacts().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpacts().length" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isActive() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isActive()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExpiryDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExpiryDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isTrial() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isTrial()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getGlid() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricepointIdLink() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricepointIdLink()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPreview() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPreview()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getInteractiveFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getInteractiveFlag()" ).isEqualTo("NONE");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isForcedPurchase() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isForcedPurchase()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isSubscriptionDuplicate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isSubscriptionDuplicate()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getFixedExpiryDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getFixedExpiryDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReserveOnly() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReserveOnly()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMinSubPeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPenaltyCharges() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getCancellation() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getCancellation()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMonthEndSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isHistoric() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isHistoric()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getFixedRecurrence() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isFixedRecurringPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReceipting() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReceipting()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getReceiptingAttribute() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getReceiptingAttribute()" ).isEqualTo("NULL");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getOrder() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getOrder()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getNonMatchAllUserGroups().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPromo() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPromo()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isSubmitToPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isSuppressToPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingTextTemplateName1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingTextTemplateName2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTranslatedPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTranslatedPricingText1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTranslatedPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTranslatedPricingText2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRecurrenceDay() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isAlignWithExternal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isAlignWithExternal()" ).isFalse() ;
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAllBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPackageIdentifier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPackageIdentifier()" ).isEqualTo("package:CP_001_TAX_999_999_999_999_999_*_*_*_false_false_*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getServiceIdentifier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getServiceIdentifier()" ).isEqualTo("content:CP_001_TAX_2PP_S001_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getStandardRateWithoutTax() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getStandardRateWithoutTax()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getProtectedFk() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getProtectedFk()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getmPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getmPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isNonRecurring() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isNonRecurring()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isZeroCostIgnore() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDescription()" ).isEqualTo("Default (event) ");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isTariff() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isTariff()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isHideForPurchaseOptions() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getName()" ).isEqualTo("TAX");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxCode()" ).isEqualTo("TAX");
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().size()").isEqualTo(3);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().size() >= 3);
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(0).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(0).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(0).getKey()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(1).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(1).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(1).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(1).getKey()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(2).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(2).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(2).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTax().getTaxRates().get(2).getKey()" ).isEqualTo(new Long(0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getBalance() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getBalance()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getSubscriptionIdLong() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getOldestSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isRecurring() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isRecurring()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRenewalsUntilLinkedPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getKey()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPromotionalPrice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPromotionalPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPricingModel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().isDefaultPPT() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPromotionalPricingTextList() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPricePointTier().getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isEvent() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isEvent()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getStandardRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getStandardRate()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getBalance() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getSubscriptionIdLong() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getOldestSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBalanceImpactList().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getChannel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getChannel()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMultiUsageMode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getNetworkCodeMatchMethod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPreRatePriceGross() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPreRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPaymentInformation() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPaymentInformation()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getContentName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getContentName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAssetID() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAssetID()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPremiumLevel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getReserveOnlyFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSupplierId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSupplierId()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDeviceType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUserGroups().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUserGroup() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUserGroup()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPaymentType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getEventDateTime() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getEventDateTime()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getEventUnits() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoCodes().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBearerIds().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoCode()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDuration() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDuration()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getChargingMethod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getChargingMethod()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBearer() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getBearer()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isInteractive() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isInteractive()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isIncludeUnavailable() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExpressFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isExpressFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isCancellationUsage() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isCancellationUsage()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTierName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTierName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoPrecode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoPrecode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUniquePromoCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getUniquePromoCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoUniqueCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPromoUniqueCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getNextCycleDiscount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getHasHistoricPricePointFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isIsForRenewal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isIsForRenewal()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTaxRateAsDouble() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTaxRateAsDouble()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAffiliateID() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAffiliateID()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTariff() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getTariff()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAggregatorId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAggregatorId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isForcePurchaseFlow() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getReceipientMsisdn() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getReceipientMsisdn()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getProductCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getProductCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMerchantName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMerchantName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getInvoiceText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getInvoiceText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReIssueEnabled() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReIssueFlagPresent() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getShortPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getShortPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getHistoryStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getHistoryStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getVendorId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getVendorId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isIsForNextPaymentAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRenewalPreRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isOverrideDisallowPreRateFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getContentCategory() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getContentCategory()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerUrl() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerUrl()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerContactInfo() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerContactInfo()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerEmail() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerEmail()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPartnerName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSubRenewalCounterToLinkedPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSubRenewalPricepointId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLinkPricepointId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLinkPricepointId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSubPurchaseTransactionTrial() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDiscardHiddenInactivePricepoints() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isDiscardMiddleAdvancedPricepoints() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExtIdentifier1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExtIdentifier2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExtIdentifier3() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExtIdentifier3()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAccessChannel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getAccessChannel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPurchaseChannel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getPurchaseChannel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDeviceID() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getDeviceID()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLocal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLocal()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMsisdn() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getMsisdn()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLanguageLocale() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLanguageLocale()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLanguageCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getLanguageCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExternalField1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExternalField1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExternalField2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExternalField2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExternalTransId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getExternalTransId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getActiveSubscriptions() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getCsrId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(3).getCsrId()" ).isNull();
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getId()" ).isEqualTo("content:PRE001NEW_TAX_2PP_S001_999_999_999_999");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getGracePeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getGracePeriod()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNetRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNetRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isAlwaysValidateMsisdn() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getCustomResourceBalances() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getCustomResourceBalances()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRetryFrequency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRetryFrequency()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSuspensionPeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSuspensionPeriod()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isGraceSuspensionRetryFrequencyUndefined() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTranslatedPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTranslatedPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFairUsageLimit() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFairUsagePeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFairUsagePeriodUnit() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtensionPeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIncludeServiceForPackageFUP() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isFairUsagePolicyEnabled() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isVolumeType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isVolumeType()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isOriginal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getKey()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPricingModel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].isDefaultPPT() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPreOrder() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTaxRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTaxCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLinkedByTrialPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isDiscount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isDiscount()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDiscountPromoText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPackageId()" ).isEqualTo("PRE001NEW");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getContentId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getContentId()" ).isEqualTo("2PP_S001");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingText1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingText2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUsageTime() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAccessDuration() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingModelTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingModelTier()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isArchived() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isArchived()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isBasePricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isBasePricePoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAccessDevice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAlternativeRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAlternativeRate()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpacts().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpacts().length" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isActive() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isActive()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExpiryDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExpiryDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isTrial() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isTrial()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getGlid() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricepointIdLink() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricepointIdLink()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPreview() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPreview()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getInteractiveFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getInteractiveFlag()" ).isEqualTo("NONE");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isForcedPurchase() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isForcedPurchase()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isSubscriptionDuplicate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isSubscriptionDuplicate()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFixedExpiryDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFixedExpiryDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReserveOnly() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReserveOnly()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMinSubPeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPenaltyCharges() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getCancellation() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getCancellation()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMonthEndSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isHistoric() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isHistoric()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFixedRecurrence() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isFixedRecurringPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReceipting() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReceipting()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getReceiptingAttribute() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getReceiptingAttribute()" ).isEqualTo("NULL");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getOrder() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getOrder()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNonMatchAllUserGroups().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPromo() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPromo()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isSubmitToPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isSuppressToPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingTextTemplateName1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingTextTemplateName2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTranslatedPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTranslatedPricingText1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTranslatedPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTranslatedPricingText2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRecurrenceDay() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isAlignWithExternal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isAlignWithExternal()" ).isFalse() ;
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAllBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPackageIdentifier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPackageIdentifier()" ).isEqualTo("package:PRE001NEW_TAX_999_999_999_999_999_*_*_*_false_false_*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getServiceIdentifier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getServiceIdentifier()" ).isEqualTo("content:PRE001NEW_TAX_2PP_S001_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getStandardRateWithoutTax() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getStandardRateWithoutTax()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getProtectedFk() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getProtectedFk()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getmPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getmPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isNonRecurring() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isNonRecurring()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isZeroCostIgnore() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDescription()" ).isEqualTo("Default (event) ");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isTariff() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isTariff()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isHideForPurchaseOptions() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getName()" ).isEqualTo("TAX");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxCode()" ).isEqualTo("TAX");
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().size()").isEqualTo(3);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().size() >= 3);
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(0).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(0).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(0).getKey()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(1).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(1).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(1).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(1).getKey()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(2).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(2).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(2).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTax().getTaxRates().get(2).getKey()" ).isEqualTo(new Long(0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getBalance() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getBalance()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getSubscriptionIdLong() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getOldestSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isRecurring() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isRecurring()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRenewalsUntilLinkedPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getKey()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPromotionalPrice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPromotionalPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPricingModel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().isDefaultPPT() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPromotionalPricingTextList() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPricePointTier().getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isEvent() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isEvent()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getStandardRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getStandardRate()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getBalance() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getSubscriptionIdLong() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getOldestSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBalanceImpactList().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getChannel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getChannel()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMultiUsageMode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNetworkCodeMatchMethod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPreRatePriceGross() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPreRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPaymentInformation() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPaymentInformation()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getContentName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getContentName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAssetID() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAssetID()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPremiumLevel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getReserveOnlyFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSupplierId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSupplierId()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDeviceType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUserGroups().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUserGroup() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUserGroup()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPaymentType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getEventDateTime() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getEventDateTime()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getEventUnits() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoCodes().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBearerIds().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoCode()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDuration() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDuration()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getChargingMethod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getChargingMethod()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBearer() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getBearer()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isInteractive() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isInteractive()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIncludeUnavailable() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExpressFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isExpressFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isExpressFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isCancellationUsage() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isCancellationUsage()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTierName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTierName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoPrecode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoPrecode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUniquePromoCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getUniquePromoCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoUniqueCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPromoUniqueCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNextCycleDiscount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getHasHistoricPricePointFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIsForRenewal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIsForRenewal()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTaxRateAsDouble() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTaxRateAsDouble()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAffiliateID() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAffiliateID()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTariff() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getTariff()" ).isEqualTo("*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAggregatorId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAggregatorId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isForcePurchaseFlow() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getReceipientMsisdn() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getReceipientMsisdn()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getProductCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getProductCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMerchantName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMerchantName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getInvoiceText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getInvoiceText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReIssueEnabled() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReIssueFlagPresent() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getShortPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getShortPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getHistoryStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getHistoryStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getVendorId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getVendorId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIsForNextPaymentAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRenewalPreRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isOverrideDisallowPreRateFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getContentCategory() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getContentCategory()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerUrl() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerUrl()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerContactInfo() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerContactInfo()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerEmail() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerEmail()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPartnerName()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSubRenewalCounterToLinkedPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPPtRenewalCounterToLinkedPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSubRenewalPricepointId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLinkPricepointId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLinkPricepointId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSubPurchaseTransactionTrial() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDiscardHiddenInactivePricepoints() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isDiscardMiddleAdvancedPricepoints() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtIdentifier1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtIdentifier1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtIdentifier2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtIdentifier2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtIdentifier3() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExtIdentifier3()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAccessChannel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getAccessChannel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPurchaseChannel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getPurchaseChannel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDeviceID() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getDeviceID()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLocal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLocal()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMsisdn() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getMsisdn()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLanguageLocale() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLanguageLocale()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLanguageCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getLanguageCode()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExternalField1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExternalField1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExternalField2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExternalField2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExternalTransId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getExternalTransId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getActiveSubscriptions() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getActiveSubscriptions()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getCsrId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(4).getCsrId()" ).isNull();
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getId()" ).isEqualTo("content:PRE_DRM_TAX_2PP_S001_999_999_999_999");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getGracePeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getGracePeriod()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getNetRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getNetRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isAlwaysValidateMsisdn() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getCustomResourceBalances() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getCustomResourceBalances()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRetryFrequency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRetryFrequency()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getSuspensionPeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getSuspensionPeriod()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isGraceSuspensionRetryFrequencyUndefined() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTranslatedPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTranslatedPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFairUsageLimit() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFairUsagePeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFairUsagePeriodUnit() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getExtensionPeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isIncludeServiceForPackageFUP() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isFairUsagePolicyEnabled() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isVolumeType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isVolumeType()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isOriginal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getKey()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPromotionalPrice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPromotionalPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPricingModel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].isDefaultPPT() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isPreOrder() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isPreOrder()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTaxRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTaxCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getLinkedByTrialPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isDiscount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isDiscount()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getDiscountPromoText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPackageId()" ).isEqualTo("PRE_DRM");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getContentId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getContentId()" ).isEqualTo("2PP_S001");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingText1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingText2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getUsageTime() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAccessDuration() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingModelTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingModelTier()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isArchived() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isArchived()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isBasePricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isBasePricePoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAccessDevice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAlternativeRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAlternativeRate()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpacts().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpacts().length" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isActive() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isActive()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getExpiryDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getExpiryDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isTrial() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isTrial()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getGlid() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricepointIdLink() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricepointIdLink()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isPreview() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isPreview()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getInteractiveFlag() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getInteractiveFlag()" ).isEqualTo("NONE");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isForcedPurchase() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isForcedPurchase()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isSubscriptionDuplicate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isSubscriptionDuplicate()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFixedExpiryDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFixedExpiryDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isReserveOnly() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isReserveOnly()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getMinSubPeriod() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPenaltyCharges() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getCancellation() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getCancellation()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getMonthEndSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isHistoric() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isHistoric()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFixedRecurrence() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isFixedRecurringPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isReceipting() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isReceipting()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getReceiptingAttribute() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getReceiptingAttribute()" ).isEqualTo("NULL");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getOrder() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getOrder()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getNonMatchAllUserGroups().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isPromo() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isPromo()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isSubmitToPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isSuppressToPaymentHandler() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingTextTemplateName1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingTextTemplateName2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTranslatedPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTranslatedPricingText1()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTranslatedPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTranslatedPricingText2()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRecurrenceDay() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isAlignWithExternal() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isAlignWithExternal()" ).isFalse() ;
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getAllBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPackageIdentifier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPackageIdentifier()" ).isEqualTo("package:PRE_DRM_TAX_999_999_999_999_999_*_*_*_false_false_*");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getServiceIdentifier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getServiceIdentifier()" ).isEqualTo("content:PRE_DRM_TAX_2PP_S001_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getStandardRateWithoutTax() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getStandardRateWithoutTax()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getProtectedFk() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getProtectedFk()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getmPricingText1() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getmPricingText2() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isNonRecurring() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isNonRecurring()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isZeroCostIgnore() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getDescription()" ).isEqualTo("Default (event) ");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isTariff() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isTariff()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isHideForPurchaseOptions() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getName()" ).isEqualTo("TAX");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxCode()" ).isEqualTo("TAX");
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().size()").isEqualTo(3);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().size() >= 3);
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(0).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(0).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(0).getKey()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(1).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(1).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(1).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(1).getKey()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(2).getValue() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(2).value()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(2).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getTax().getTaxRates().get(2).getKey()" ).isEqualTo(new Long(0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getBalance() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getBalance()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getSubscriptionIdLong() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getOldestSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isRecurring() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isRecurring()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRenewalsUntilLinkedPricepoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getKey()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getKey() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getType() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getPricePoint() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getFixedAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getScaledAmount() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPromotionalPrice() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPromotionalPricingText() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPricingModel() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getTier() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().isDefaultPPT() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPromotionalPricingTextList() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getPricePointTier().getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isEvent() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).isEvent()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getStandardRate() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getStandardRate()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances().length ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getCode() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getResourceName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getDescription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getCountryId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isUsageToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isPayToken() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getResourceSymbol() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isResource() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getThreshold() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getBalance() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getPackageId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getSubscription() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getSubscriptionIdLong() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getOldestSubscriptionId() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
//check size of list!
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpactList().size()).as("result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpactList().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpactList().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpactList().get(0).getResource().getName() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpactList().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpactList().get(0).getResource().isCurrency() ).as(" result.getSubscription().getPackage().getServiceArray()[0].getPricePoints().get(5).getBalanceImpactList().get(0).getResource().isCurrency()" ).isTrue() ;



        softly.assertAll();


    }

}
