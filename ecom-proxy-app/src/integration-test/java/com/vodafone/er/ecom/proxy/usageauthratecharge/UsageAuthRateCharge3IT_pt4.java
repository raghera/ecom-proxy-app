package com.vodafone.er.ecom.proxy.usageauthratecharge;

import com.vizzavi.ecommerce.business.charging.*;
import com.vizzavi.ecommerce.business.common.EcomApiFactory;
import org.assertj.core.api.SoftAssertions;
import org.junit.Test;

import java.util.Locale;
import java.util.Random;

import static com.vodafone.er.ecom.proxy.enums.EcomAppEnum.CLIENT_ID;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Created by Ravi Aghera
 */
public class UsageAuthRateCharge3IT_pt4 {
    private SoftAssertions softly = new SoftAssertions();

    @Test
    public void usageAuthRateCharge3UsageAuthResponse() throws Exception {
        final String msisdn = String.valueOf(new Random().nextInt());
        final String packageId = "pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*";

        final PurchaseAuthorization auth = EcomApiFactory.getPurchaseApi(Locale.UK).purchasePackageMsisdn("test", msisdn, packageId, new PurchaseAttributes());
        assertNotNull(auth);
        assertTrue("Auth response is false", auth.isSuccess());

        final ChargingApi chargingApi = EcomApiFactory.getChargingApi(Locale.UK);
        UsageAuthorization usageAuth = chargingApi.usageAuthRateCharge(CLIENT_ID.getValue(), msisdn, "sAlt", new UsageAttributes());
        assertNotNull(usageAuth);
        assertTrue(usageAuth.isSuccess());


        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPreRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPaymentInformation() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPaymentInformation()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getContentName() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getContentName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAssetID() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAssetID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPremiumLevel() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getReserveOnlyFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSupplierId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSupplierId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDeviceType() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getUserGroups().length ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getUserGroup() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getUserGroup()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPaymentType() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getEventDateTime() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getEventDateTime()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getEventUnits() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoCodes().length ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getBearerIds().length ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDuration() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDuration()" ).isEqualTo(4) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getChargingMethod() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getChargingMethod()" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getBearer() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getBearer()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isInteractive() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isInteractive()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isIncludeUnavailable() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExpressFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isExpressFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isCancellationUsage() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isCancellationUsage()" ).isFalse() ;



        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getTierName() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getTierName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoPrecode() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoPrecode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getUniquePromoCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getUniquePromoCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoUniqueCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPromoUniqueCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getNextCycleDiscount() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getHasHistoricPricePointFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isIsForRenewal() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isIsForRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getTaxRateAsDouble() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getTaxRateAsDouble()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAffiliateID() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAffiliateID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getTariff() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getTariff()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAggregatorId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAggregatorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isForcePurchaseFlow() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getReceipientMsisdn() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getReceipientMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getProductCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getProductCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getMerchantName() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getInvoiceText() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getInvoiceText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isReIssueEnabled() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isReIssueFlagPresent() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getShortPackageId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getShortPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getHistoryStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getHistoryStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getVendorId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getVendorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isIsForNextPaymentAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getRenewalPreRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isOverrideDisallowPreRateFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getContentCategory() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getContentCategory()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerUrl() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerUrl()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerContactInfo() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerContactInfo()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerEmail() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerEmail()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerName() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPartnerName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSubRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPPtRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSubRenewalPricepointId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLinkPricepointId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLinkPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSubPurchaseTransactionTrial() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDiscardHiddenInactivePricepoints() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).isDiscardMiddleAdvancedPricepoints() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExtIdentifier1() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExtIdentifier2() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExtIdentifier3() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAccessChannel() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getAccessChannel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPurchaseChannel() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getPurchaseChannel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDeviceID() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getDeviceID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLocal() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLocal()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getMsisdn() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLanguageLocale() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLanguageLocale()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLanguageCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getLanguageCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExternalField1() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExternalField1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExternalField2() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExternalField2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExternalTransId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getExternalTransId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getActiveSubscriptions() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getActiveSubscriptions()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoints().get(2).getCsrId() ).as(" usageAuth.getSubscription().getPackage().getPricePoints().get(2).getCsrId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getProtectedType() ).as(" usageAuth.getSubscription().getPackage().getProtectedType()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getProtectedType() ).as(" usageAuth.getSubscription().getPackage().getProtectedType()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getDynamicProtectedValue() ).as(" usageAuth.getSubscription().getPackage().getDynamicProtectedValue()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getDynamicProtectedValue() ).as(" usageAuth.getSubscription().getPackage().getDynamicProtectedValue()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPurchaseMethod() ).as(" usageAuth.getSubscription().getPackage().getPurchaseMethod()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPurchaseMethod() ).as(" usageAuth.getSubscription().getPackage().getPurchaseMethod()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getKpiPackageProductCategory() ).as(" usageAuth.getSubscription().getPackage().getKpiPackageProductCategory()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getKpiPackageType() ).as(" usageAuth.getSubscription().getPackage().getKpiPackageType()" ).isNull();
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricingModels().length ).as(" usageAuth.getSubscription().getPackage().getPricingModels().length" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isExpressPurchase() ).as(" usageAuth.getSubscription().getPackage().isExpressPurchase()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isRecieptingFlag() ).as(" usageAuth.getSubscription().getPackage().isRecieptingFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isPricePointOrder() ).as(" usageAuth.getSubscription().getPackage().isPricePointOrder()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isSuperPackage() ).as(" usageAuth.getSubscription().getPackage().isSuperPackage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isRevenueShareByUsage() ).as(" usageAuth.getSubscription().getPackage().isRevenueShareByUsage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isDynamicDefault() ).as(" usageAuth.getSubscription().getPackage().isDynamicDefault()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getACEPackage() ).as(" usageAuth.getSubscription().getPackage().getACEPackage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isUpSell() ).as(" usageAuth.getSubscription().getPackage().isUpSell()" ).isFalse() ;
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPackage().getLogoId() ).as(" usageAuth.getSubscription().getPackage().getLogoId()" ).isNull();
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPackage().getPartnerInfo() ).as(" usageAuth.getSubscription().getPackage().getPartnerInfo()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getIsPackageModel() ).as(" usageAuth.getSubscription().getPackage().getIsPackageModel()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isParentPackage() ).as(" usageAuth.getSubscription().getPackage().isParentPackage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getChildPackages() ).as(" usageAuth.getSubscription().getPackage().getChildPackages()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getServicesNotInPackageFairUsagePolicyList() ).as(" usageAuth.getSubscription().getPackage().getServicesNotInPackageFairUsagePolicyList()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().isHasParentSub() ).as(" usageAuth.getSubscription().getPackage().isHasParentSub()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getParentSubId() ).as(" usageAuth.getSubscription().getPackage().getParentSubId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().isHasParentSubSuspendedResProv() ).as(" usageAuth.getSubscription().getPackage().isHasParentSubSuspendedResProv()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getParentSubStatus() ).as(" usageAuth.getSubscription().getPackage().getParentSubStatus()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isDisallowCancellations() ).as(" usageAuth.getSubscription().getPackage().isDisallowCancellations()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getSalesModel() ).as(" usageAuth.getSubscription().getPackage().getSalesModel()" ).isEqualTo("Reseller");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPackageClass() ).as(" usageAuth.getSubscription().getPackage().getPackageClass()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().isDataVoiceTariffInclusive() ).as(" usageAuth.getSubscription().getPackage().isDataVoiceTariffInclusive()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getNominalValue() ).as(" usageAuth.getSubscription().getPackage().getNominalValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isUseBeingDeprovisionedStatus() ).as(" usageAuth.getSubscription().getPackage().isUseBeingDeprovisionedStatus()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getDisallowDuplicateSubPurchase() ).as(" usageAuth.getSubscription().getPackage().getDisallowDuplicateSubPurchase()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getNoActivePricepoints() ).as(" usageAuth.getSubscription().getPackage().getNoActivePricepoints()" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isHasBalanceImpactsWithDate() ).as(" usageAuth.getSubscription().getPackage().isHasBalanceImpactsWithDate()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isHasPricePointsWithDate() ).as(" usageAuth.getSubscription().getPackage().isHasPricePointsWithDate()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isHasPromosWithDate() ).as(" usageAuth.getSubscription().getPackage().isHasPromosWithDate()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isHasTaxRateWithDate() ).as(" usageAuth.getSubscription().getPackage().isHasTaxRateWithDate()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPromoCodeMap() ).as(" usageAuth.getSubscription().getPackage().getPromoCodeMap()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPromoCodeMapSize() ).as(" usageAuth.getSubscription().getPackage().getPromoCodeMapSize()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getActiveStatusAsString() ).as(" usageAuth.getSubscription().getPackage().getActiveStatusAsString()" ).isEqualTo("ACTIVE");
        softly.assertThat(usageAuth.getSubscription().getPackage().isUseRateCardService() ).as(" usageAuth.getSubscription().getPackage().isUseRateCardService()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getRateCardServiceId() ).as(" usageAuth.getSubscription().getPackage().getRateCardServiceId()" ).isNull();



        softly.assertThat(usageAuth.getSubscription().getPackage().isUserGroupCalendarPricePointPackage() ).as(" usageAuth.getSubscription().getPackage().isUserGroupCalendarPricePointPackage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isUpsellDiscountProrated() ).as(" usageAuth.getSubscription().getPackage().isUpsellDiscountProrated()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().isDisallowPrerate() ).as(" usageAuth.getSubscription().getPackage().isDisallowPrerate()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getServiceNames().length ).as(" usageAuth.getSubscription().getPackage().getServiceNames().length" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getDefaultPartnerProvisioningId() ).as(" usageAuth.getSubscription().getPackage().getDefaultPartnerProvisioningId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getUserGroupComparisonAtRenewal() ).as(" usageAuth.getSubscription().getPackage().getUserGroupComparisonAtRenewal()" ).isEqualTo("SYSTEM");
// com.vizzavi.ecommerce.business.catalog.internal.PricePointImpl
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getDescription()" ).isEqualTo("Recurring 7 day");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isPreOrder() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTaxRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTaxCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getLinkedByTrialPricepoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExpiryDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getNetRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isAlwaysValidateMsisdn() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isDiscount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getDiscountPromoText() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getDiscountPromoText() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getDiscountPromoText()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPackageId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getContentId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricingText1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricingText1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricingText1()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricingText2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricingText2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricingText2()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getUsageTime() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAccessDuration() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isZeroCostIgnore() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isZeroCostIgnore()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getSubscription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getBalance() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getBalance()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getPackageId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCustomResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricingModelTier() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isArchived() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isBasePricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAccessDevice() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAlternativeRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts().length" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpacts()[0].getResourceName()" ).isEqualTo("ChargingResource_826");
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().size()).as("usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");




        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalanceImpactList().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isTrial() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getGlid() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getGlid()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getGlid() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getGlid()" ).isEqualTo("");
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricepointIdLink() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricepointIdLink()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isPreview() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getInteractiveFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getInteractiveFlag()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isForcedPurchase() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isSubscriptionDuplicate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isSubscriptionDuplicate()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getFixedExpiryDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isReserveOnly() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getMinSubPeriod() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPenaltyCharges() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCancellation() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getMonthEndSubscription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isHistoric() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getFixedRecurrence() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isFixedRecurringPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isReceipting() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getReceiptingAttribute() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getReceiptingAttribute()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getOrder() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPaymentHandler() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getNonMatchAllUserGroups().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isPromo() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isSubmitToPaymentHandler() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isSuppressToPaymentHandler() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricingTextTemplateName1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricingTextTemplateName2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTranslatedPricingText1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTranslatedPricingText2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getRecurrenceDay() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isAlignWithExternal() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getGracePeriod() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getRetryFrequency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getSuspensionPeriod() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTranslatedPricingText() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTranslatedPricingText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getFairUsageLimit() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getFairUsagePeriod() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getFairUsagePeriodUnit() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExtensionPeriod() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isIncludeServiceForPackageFUP() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isFairUsagePolicyEnabled() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isTariff() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isHideForPurchaseOptions() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
//check size of list!
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().size()).as("usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().size()").isEqualTo(3);
//if the list is smaller than expected we can't continue, so do a hard assert
//        assertTrue(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().size() >= 3);
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(0).getValue() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(0).getValue()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(0).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(0).getKey()" ).isEqualTo(new Long(0)) ;
// java.util.Date
// java.util.Date
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(1).getValue() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(1).getValue()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(1).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(1).getKey()" ).isEqualTo(new Long(0)) ;
// java.util.Date
// java.util.Date
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(2).getValue() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(2).getValue()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(2).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(2).getKey()" ).isEqualTo(new Long(0)) ;
// java.util.Date
//        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(2).getStartDate().getTimezoneOffset() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTax().getTaxRates().get(2).getStartDate().getTimezoneOffset()" ).isEqualTo(0) ;
// java.util.Date
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getSubscription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getBalance() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getBalance()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getPackageId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getSubscriptionId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isRecurring() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getKey()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().size()).as("usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPricingModel() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getTier() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().isDefaultPPT() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().size()).as("usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPackageIdentifier() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*_*_false_false_*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getServiceIdentifier() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getStandardRateWithoutTax() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isVolumeType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isOriginal() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()).as("usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getTier() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getProtectedFk() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText1()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getmPricingText2()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isNonRecurring() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isEvent() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isActive() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getStandardRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getSubscription() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getBalance() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getPackageId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getThreshold() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getChannel() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getMultiUsageMode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getNetworkCodeMatchMethod() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isPreRatePriceGross() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPreRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPaymentInformation() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getContentName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getContentName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAssetID() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPremiumLevel() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getReserveOnlyFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getSupplierId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getDeviceType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getUserGroups().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getUserGroup() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPaymentType() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getEventDateTime() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getEventUnits() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPromoCodes().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBearerIds().length ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPromoCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getDuration() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getChargingMethod() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getBearer() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isInteractive() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isIncludeUnavailable() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExpressFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isExpressFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isCancellationUsage() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTierName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTierName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPromoPrecode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getUniquePromoCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPromoUniqueCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getNextCycleDiscount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getHasHistoricPricePointFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isIsForRenewal() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTaxRateAsDouble() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAffiliateID() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPartnerId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getTariff() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAggregatorId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isForcePurchaseFlow() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getReceipientMsisdn() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getProductCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getMerchantName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getInvoiceText() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isReIssueEnabled() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isReIssueFlagPresent() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getShortPackageId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getHistoryStartDate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getVendorId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isIsForNextPaymentAmount() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getRenewalPreRate() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isOverrideDisallowPreRateFlag() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getContentCategory() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPartnerUrl() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPartnerContactInfo() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPartnerEmail() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPartnerName() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getSubRenewalPricepointId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getLinkPricepointId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getSubPurchaseTransactionTrial() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExtIdentifier1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExtIdentifier2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExtIdentifier3() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getAccessChannel() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getPurchaseChannel() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getDeviceID() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getLocal() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getLocal()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getMsisdn() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getLanguageLocale() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getLanguageCode() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExternalField1() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExternalField2() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getExternalTransId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getActiveSubscriptions() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricePoint().getCsrId() ).as(" usageAuth.getSubscription().getPackage().getPricePoint().getCsrId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackage().getDescription() ).as(" usageAuth.getSubscription().getPackage().getDescription()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getDescription() ).as(" usageAuth.getSubscription().getPackage().getDescription()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getTaxCode() ).as(" usageAuth.getSubscription().getPackage().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(usageAuth.getSubscription().getPackage().isDefault() ).as(" usageAuth.getSubscription().getPackage().isDefault()" ).isFalse() ;
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPackage().getParentPackageId() ).as(" usageAuth.getSubscription().getPackage().getParentPackageId()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getParentPackageId() ).as(" usageAuth.getSubscription().getPackage().getParentPackageId()" ).isEqualTo("");
// java.util.Date
        softly.assertThat(usageAuth.getSubscription().getPackage().getRate() ).as(" usageAuth.getSubscription().getPackage().getRate()" ).isEqualTo(new Double(11.75)) ;
// java.util.Date
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricingText1() ).as(" usageAuth.getSubscription().getPackage().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricingText1() ).as(" usageAuth.getSubscription().getPackage().getPricingText1()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricingText2() ).as(" usageAuth.getSubscription().getPackage().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricingText2() ).as(" usageAuth.getSubscription().getPackage().getPricingText2()" ).isEqualTo("");
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPackage().isReserveOnly() ).as(" usageAuth.getSubscription().getPackage().isReserveOnly()" ).isFalse() ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPackage().isOriginal() ).as(" usageAuth.getSubscription().getPackage().isOriginal()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getPricingModel() ).as(" usageAuth.getSubscription().getPackage().getPricingModel()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPackage().getServices().size()).as("usageAuth.getSubscription().getPackage().getServices().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPackage().getServices().size() >= 0);
        softly.assertThat(usageAuth.getSubscription().getPackage().isActive() ).as(" usageAuth.getSubscription().getPackage().isActive()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPackage().getUrl() ).as(" usageAuth.getSubscription().getPackage().getUrl()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getCountry() ).as(" usageAuth.getSubscription().getCountry()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().isRefundable() ).as(" usageAuth.getSubscription().isRefundable()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().isSuperPackage() ).as(" usageAuth.getSubscription().isSuperPackage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPackageClass() ).as(" usageAuth.getSubscription().getPackageClass()" ).isNull();
// com.vizzavi.ecommerce.business.catalog.internal.PricePointImpl
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getKey() ).as(" usageAuth.getSubscription().getPricePoint().getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getId() ).as(" usageAuth.getSubscription().getPricePoint().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getDescription()" ).isEqualTo("Recurring 7 day");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isPreOrder() ).as(" usageAuth.getSubscription().getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTaxRate() ).as(" usageAuth.getSubscription().getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTaxCode() ).as(" usageAuth.getSubscription().getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getLinkedByTrialPricepoint() ).as(" usageAuth.getSubscription().getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getRate() ).as(" usageAuth.getSubscription().getPricePoint().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExpiryDate() ).as(" usageAuth.getSubscription().getPricePoint().getExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getNetRate() ).as(" usageAuth.getSubscription().getPricePoint().getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isAlwaysValidateMsisdn() ).as(" usageAuth.getSubscription().getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isDiscount() ).as(" usageAuth.getSubscription().getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getDiscountPromoText() ).as(" usageAuth.getSubscription().getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getDiscountPromoText() ).as(" usageAuth.getSubscription().getPricePoint().getDiscountPromoText()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPackageId() ).as(" usageAuth.getSubscription().getPricePoint().getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getContentId() ).as(" usageAuth.getSubscription().getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricingText1() ).as(" usageAuth.getSubscription().getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricingText1() ).as(" usageAuth.getSubscription().getPricePoint().getPricingText1()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricingText2() ).as(" usageAuth.getSubscription().getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricingText2() ).as(" usageAuth.getSubscription().getPricePoint().getPricingText2()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getUsageTime() ).as(" usageAuth.getSubscription().getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAccessDuration() ).as(" usageAuth.getSubscription().getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isZeroCostIgnore() ).as(" usageAuth.getSubscription().getPricePoint().isZeroCostIgnore()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances().length ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscription() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getBalance() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getBalance()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getPackageId() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricingModelTier() ).as(" usageAuth.getSubscription().getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isArchived() ).as(" usageAuth.getSubscription().getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isBasePricePoint() ).as(" usageAuth.getSubscription().getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAccessDevice() ).as(" usageAuth.getSubscription().getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAlternativeRate() ).as(" usageAuth.getSubscription().getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts().length ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts().length" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getName() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCode() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isResource() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceName()" ).isEqualTo("ChargingResource_826");
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().size()).as("usageAuth.getSubscription().getPricePoint().getBalanceImpactList().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getId() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getType() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getId() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getType() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isTrial() ).as(" usageAuth.getSubscription().getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getGlid() ).as(" usageAuth.getSubscription().getPricePoint().getGlid()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getGlid() ).as(" usageAuth.getSubscription().getPricePoint().getGlid()" ).isEqualTo("");
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricepointIdLink() ).as(" usageAuth.getSubscription().getPricePoint().getPricepointIdLink()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isPreview() ).as(" usageAuth.getSubscription().getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getInteractiveFlag() ).as(" usageAuth.getSubscription().getPricePoint().getInteractiveFlag()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isForcedPurchase() ).as(" usageAuth.getSubscription().getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isSubscriptionDuplicate() ).as(" usageAuth.getSubscription().getPricePoint().isSubscriptionDuplicate()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getFixedExpiryDate() ).as(" usageAuth.getSubscription().getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isReserveOnly() ).as(" usageAuth.getSubscription().getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getMinSubPeriod() ).as(" usageAuth.getSubscription().getPricePoint().getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPenaltyCharges() ).as(" usageAuth.getSubscription().getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCancellation() ).as(" usageAuth.getSubscription().getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getMonthEndSubscription() ).as(" usageAuth.getSubscription().getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isHistoric() ).as(" usageAuth.getSubscription().getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getFixedRecurrence() ).as(" usageAuth.getSubscription().getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isFixedRecurringPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isReceipting() ).as(" usageAuth.getSubscription().getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getReceiptingAttribute() ).as(" usageAuth.getSubscription().getPricePoint().getReceiptingAttribute()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getOrder() ).as(" usageAuth.getSubscription().getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPaymentHandler() ).as(" usageAuth.getSubscription().getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getNonMatchAllUserGroups().length ).as(" usageAuth.getSubscription().getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isPromo() ).as(" usageAuth.getSubscription().getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isSubmitToPaymentHandler() ).as(" usageAuth.getSubscription().getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isSuppressToPaymentHandler() ).as(" usageAuth.getSubscription().getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricingTextTemplateName1() ).as(" usageAuth.getSubscription().getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricingTextTemplateName2() ).as(" usageAuth.getSubscription().getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTranslatedPricingText1() ).as(" usageAuth.getSubscription().getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTranslatedPricingText2() ).as(" usageAuth.getSubscription().getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getRecurrenceDay() ).as(" usageAuth.getSubscription().getPricePoint().getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isAlignWithExternal() ).as(" usageAuth.getSubscription().getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getGracePeriod() ).as(" usageAuth.getSubscription().getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getRetryFrequency() ).as(" usageAuth.getSubscription().getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getSuspensionPeriod() ).as(" usageAuth.getSubscription().getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" usageAuth.getSubscription().getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTranslatedPricingText() ).as(" usageAuth.getSubscription().getPricePoint().getTranslatedPricingText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getFairUsageLimit() ).as(" usageAuth.getSubscription().getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getFairUsagePeriod() ).as(" usageAuth.getSubscription().getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getFairUsagePeriodUnit() ).as(" usageAuth.getSubscription().getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExtensionPeriod() ).as(" usageAuth.getSubscription().getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isIncludeServiceForPackageFUP() ).as(" usageAuth.getSubscription().getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isFairUsagePolicyEnabled() ).as(" usageAuth.getSubscription().getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isTariff() ).as(" usageAuth.getSubscription().getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isHideForPurchaseOptions() ).as(" usageAuth.getSubscription().getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getName() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getKey() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRate() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxCode() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
//check size of list!
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().size()).as("usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().size()").isEqualTo(3);
//if the list is smaller than expected we can't continue, so do a hard assert
//        assertTrue(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().size() >= 3);
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).getValue() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).getValue()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).getKey()" ).isEqualTo(new Long(0)) ;
// java.util.Date
// java.util.Date
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).getValue() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).getValue()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).getKey()" ).isEqualTo(new Long(0)) ;
// java.util.Date
// java.util.Date
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).getValue() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).getValue()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).getKey()" ).isEqualTo(new Long(0)) ;
// java.util.Date
// java.util.Date
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances().length ).as(" usageAuth.getSubscription().getPricePoint().getBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getSubscription() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getBalance() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getBalance()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getPackageId() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionId() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBalances()[0].getThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isRecurring() ).as(" usageAuth.getSubscription().getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" usageAuth.getSubscription().getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getKey() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getKey()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size()).as("usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getPricingModel() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getTier() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().isDefaultPPT() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().size()).as("usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getId() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getType() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getId() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getType() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPackageIdentifier() ).as(" usageAuth.getSubscription().getPricePoint().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*_*_false_false_*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getServiceIdentifier() ).as(" usageAuth.getSubscription().getPricePoint().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().getName() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceField().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getStandardRateWithoutTax() ).as(" usageAuth.getSubscription().getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isVolumeType() ).as(" usageAuth.getSubscription().getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isOriginal() ).as(" usageAuth.getSubscription().getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers().length ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getKey() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()).as("usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getTier() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" usageAuth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getProtectedFk() ).as(" usageAuth.getSubscription().getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getmPricingText1() ).as(" usageAuth.getSubscription().getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getmPricingText1() ).as(" usageAuth.getSubscription().getPricePoint().getmPricingText1()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getmPricingText2() ).as(" usageAuth.getSubscription().getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getmPricingText2() ).as(" usageAuth.getSubscription().getPricePoint().getmPricingText2()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isNonRecurring() ).as(" usageAuth.getSubscription().getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isEvent() ).as(" usageAuth.getSubscription().getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isActive() ).as(" usageAuth.getSubscription().getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getStandardRate() ).as(" usageAuth.getSubscription().getPricePoint().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances().length ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getName() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscription() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getBalance() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getPackageId() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getThreshold() ).as(" usageAuth.getSubscription().getPricePoint().getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getChannel() ).as(" usageAuth.getSubscription().getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getMultiUsageMode() ).as(" usageAuth.getSubscription().getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getNetworkCodeMatchMethod() ).as(" usageAuth.getSubscription().getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isPreRatePriceGross() ).as(" usageAuth.getSubscription().getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPreRate() ).as(" usageAuth.getSubscription().getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPaymentInformation() ).as(" usageAuth.getSubscription().getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getContentName() ).as(" usageAuth.getSubscription().getPricePoint().getContentName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAssetID() ).as(" usageAuth.getSubscription().getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPremiumLevel() ).as(" usageAuth.getSubscription().getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getReserveOnlyFlag() ).as(" usageAuth.getSubscription().getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getSupplierId() ).as(" usageAuth.getSubscription().getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getDeviceType() ).as(" usageAuth.getSubscription().getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getUserGroups().length ).as(" usageAuth.getSubscription().getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getUserGroup() ).as(" usageAuth.getSubscription().getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPaymentType() ).as(" usageAuth.getSubscription().getPricePoint().getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getEventDateTime() ).as(" usageAuth.getSubscription().getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getEventUnits() ).as(" usageAuth.getSubscription().getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPromoCodes().length ).as(" usageAuth.getSubscription().getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBearerIds().length ).as(" usageAuth.getSubscription().getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPromoCode() ).as(" usageAuth.getSubscription().getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getDuration() ).as(" usageAuth.getSubscription().getPricePoint().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getChargingMethod() ).as(" usageAuth.getSubscription().getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getBearer() ).as(" usageAuth.getSubscription().getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isInteractive() ).as(" usageAuth.getSubscription().getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isIncludeUnavailable() ).as(" usageAuth.getSubscription().getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExpressFlag() ).as(" usageAuth.getSubscription().getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isExpressFlag() ).as(" usageAuth.getSubscription().getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isCancellationUsage() ).as(" usageAuth.getSubscription().getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTierName() ).as(" usageAuth.getSubscription().getPricePoint().getTierName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPromoPrecode() ).as(" usageAuth.getSubscription().getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getUniquePromoCode() ).as(" usageAuth.getSubscription().getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPromoUniqueCode() ).as(" usageAuth.getSubscription().getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getNextCycleDiscount() ).as(" usageAuth.getSubscription().getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getHasHistoricPricePointFlag() ).as(" usageAuth.getSubscription().getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isIsForRenewal() ).as(" usageAuth.getSubscription().getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTaxRateAsDouble() ).as(" usageAuth.getSubscription().getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAffiliateID() ).as(" usageAuth.getSubscription().getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPartnerId() ).as(" usageAuth.getSubscription().getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getTariff() ).as(" usageAuth.getSubscription().getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAggregatorId() ).as(" usageAuth.getSubscription().getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isForcePurchaseFlow() ).as(" usageAuth.getSubscription().getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getReceipientMsisdn() ).as(" usageAuth.getSubscription().getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getProductCode() ).as(" usageAuth.getSubscription().getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getMerchantName() ).as(" usageAuth.getSubscription().getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getInvoiceText() ).as(" usageAuth.getSubscription().getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isReIssueEnabled() ).as(" usageAuth.getSubscription().getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isReIssueFlagPresent() ).as(" usageAuth.getSubscription().getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getShortPackageId() ).as(" usageAuth.getSubscription().getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getHistoryStartDate() ).as(" usageAuth.getSubscription().getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getVendorId() ).as(" usageAuth.getSubscription().getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isIsForNextPaymentAmount() ).as(" usageAuth.getSubscription().getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getRenewalPreRate() ).as(" usageAuth.getSubscription().getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isOverrideDisallowPreRateFlag() ).as(" usageAuth.getSubscription().getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getContentCategory() ).as(" usageAuth.getSubscription().getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPartnerUrl() ).as(" usageAuth.getSubscription().getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPartnerContactInfo() ).as(" usageAuth.getSubscription().getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPartnerEmail() ).as(" usageAuth.getSubscription().getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPartnerName() ).as(" usageAuth.getSubscription().getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getSubRenewalPricepointId() ).as(" usageAuth.getSubscription().getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getLinkPricepointId() ).as(" usageAuth.getSubscription().getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getSubPurchaseTransactionTrial() ).as(" usageAuth.getSubscription().getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" usageAuth.getSubscription().getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" usageAuth.getSubscription().getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExtIdentifier1() ).as(" usageAuth.getSubscription().getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExtIdentifier2() ).as(" usageAuth.getSubscription().getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExtIdentifier3() ).as(" usageAuth.getSubscription().getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getAccessChannel() ).as(" usageAuth.getSubscription().getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getPurchaseChannel() ).as(" usageAuth.getSubscription().getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getDeviceID() ).as(" usageAuth.getSubscription().getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getLocal() ).as(" usageAuth.getSubscription().getPricePoint().getLocal()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getMsisdn() ).as(" usageAuth.getSubscription().getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getLanguageLocale() ).as(" usageAuth.getSubscription().getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getLanguageCode() ).as(" usageAuth.getSubscription().getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExternalField1() ).as(" usageAuth.getSubscription().getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExternalField2() ).as(" usageAuth.getSubscription().getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getExternalTransId() ).as(" usageAuth.getSubscription().getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getActiveSubscriptions() ).as(" usageAuth.getSubscription().getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPricePoint().getCsrId() ).as(" usageAuth.getSubscription().getPricePoint().getCsrId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPaymentType() ).as(" usageAuth.getSubscription().getPaymentType()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPartnerId() ).as(" usageAuth.getSubscription().getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getMerchantName() ).as(" usageAuth.getSubscription().getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRenewalPreRate() ).as(" usageAuth.getSubscription().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getExtIdentifier1() ).as(" usageAuth.getSubscription().getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getExtIdentifier2() ).as(" usageAuth.getSubscription().getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getExtIdentifier3() ).as(" usageAuth.getSubscription().getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().isDefault() ).as(" usageAuth.getSubscription().isDefault()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().isPromotional() ).as(" usageAuth.getSubscription().isPromotional()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getPromotionalExpiryDate() ).as(" usageAuth.getSubscription().getPromotionalExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getStatus() ).as(" usageAuth.getSubscription().getStatus()" ).isEqualTo(1) ;
// java.util.Date
        softly.assertThat(usageAuth.getSubscription().getExternalSubId() ).as(" usageAuth.getSubscription().getExternalSubId()" ).isNull();
// java.util.Date
        softly.assertThat(usageAuth.getSubscription().getMicroServiceSubList() ).as(" usageAuth.getSubscription().getMicroServiceSubList()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getPackageId() ).as(" usageAuth.getSubscription().getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().isArchived() ).as(" usageAuth.getSubscription().isArchived()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getExtensionPeriod() ).as(" usageAuth.getSubscription().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().isRecurring() ).as(" usageAuth.getSubscription().isRecurring()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getSubscriptionId() ).as(" usageAuth.getSubscription().getSubscriptionId()" ).isEqualTo("184");
        softly.assertThat(usageAuth.getSubscription().getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getSubscriptionIdLong()" ).isEqualTo(new Long(184)) ;
        softly.assertThat(usageAuth.getSubscription().getAccount() ).as(" usageAuth.getSubscription().getAccount()" ).isNull();
// java.util.Date
        softly.assertThat(usageAuth.getSubscription().getRenewalDate() ).as(" usageAuth.getSubscription().getRenewalDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().isInactiveOrClosed() ).as(" usageAuth.getSubscription().isInactiveOrClosed()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().isFailed() ).as(" usageAuth.getSubscription().isFailed()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().isBeingProvisioned() ).as(" usageAuth.getSubscription().isBeingProvisioned()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().isReserved() ).as(" usageAuth.getSubscription().isReserved()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getLinkedPtID() ).as(" usageAuth.getSubscription().getLinkedPtID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().isPreOrdered() ).as(" usageAuth.getSubscription().isPreOrdered()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getContentPaymentType() ).as(" usageAuth.getSubscription().getContentPaymentType()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getPurchaseDeviceType() ).as(" usageAuth.getSubscription().getPurchaseDeviceType()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getNextCyclePercentDiscount() ).as(" usageAuth.getSubscription().getNextCyclePercentDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getNextPaymentAmount() ).as(" usageAuth.getSubscription().getNextPaymentAmount()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getServiceIds().length ).as(" usageAuth.getSubscription().getServiceIds().length" ).isEqualTo(1) ;
//check size of list!
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().size()).as("usageAuth.getSubscription().getResourceBalancesList().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getSubscription().getResourceBalancesList().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getName() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getName()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getCode() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getDescription() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getDescription()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isToken() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isUsageToken() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isPayToken() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isCurrency() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isResource() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getCountryId() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceName() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getSubscription() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getBalance() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getBalance()" ).isEqualTo(new Double(1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getPackageId() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getSubscriptionId() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getSubscriptionId()" ).isEqualTo("184");
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getSubscriptionIdLong() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getSubscriptionIdLong()" ).isEqualTo(new Long(184)) ;
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getOldestSubscriptionId() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getResourceBalancesList().get(0).getThreshold() ).as(" usageAuth.getSubscription().getResourceBalancesList().get(0).getThreshold()" ).isEqualTo(0) ;
// com.vodafone.global.er.subscriptionmanagement.ERRatingAttributes
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getChannel() ).as(" usageAuth.getSubscription().getRatingAttributes().getChannel()" ).isEqualTo(999) ;



        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getChannel() ).as(" usageAuth.getSubscription().getRatingAttributes().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getMultiUsageMode() ).as(" usageAuth.getSubscription().getRatingAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getNetworkCodeMatchMethod() ).as(" usageAuth.getSubscription().getRatingAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isPreRatePriceGross() ).as(" usageAuth.getSubscription().getRatingAttributes().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPreRate() ).as(" usageAuth.getSubscription().getRatingAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPaymentInformation() ).as(" usageAuth.getSubscription().getRatingAttributes().getPaymentInformation()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getContentName() ).as(" usageAuth.getSubscription().getRatingAttributes().getContentName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getAssetID() ).as(" usageAuth.getSubscription().getRatingAttributes().getAssetID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPremiumLevel() ).as(" usageAuth.getSubscription().getRatingAttributes().getPremiumLevel()" ).isEqualTo(998) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getReserveOnlyFlag() ).as(" usageAuth.getSubscription().getRatingAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getSupplierId() ).as(" usageAuth.getSubscription().getRatingAttributes().getSupplierId()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getSupplierId() ).as(" usageAuth.getSubscription().getRatingAttributes().getSupplierId()" ).isEqualTo("");
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getDeviceType() ).as(" usageAuth.getSubscription().getRatingAttributes().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getUserGroups().length ).as(" usageAuth.getSubscription().getRatingAttributes().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getUserGroup() ).as(" usageAuth.getSubscription().getRatingAttributes().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPaymentType() ).as(" usageAuth.getSubscription().getRatingAttributes().getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getEventDateTime() ).as(" usageAuth.getSubscription().getRatingAttributes().getEventDateTime()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getEventUnits() ).as(" usageAuth.getSubscription().getRatingAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPromoCodes().length ).as(" usageAuth.getSubscription().getRatingAttributes().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getBearerIds().length ).as(" usageAuth.getSubscription().getRatingAttributes().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPromoCode() ).as(" usageAuth.getSubscription().getRatingAttributes().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getDuration() ).as(" usageAuth.getSubscription().getRatingAttributes().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getChargingMethod() ).as(" usageAuth.getSubscription().getRatingAttributes().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getBearer() ).as(" usageAuth.getSubscription().getRatingAttributes().getBearer()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isInteractive() ).as(" usageAuth.getSubscription().getRatingAttributes().isInteractive()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isIncludeUnavailable() ).as(" usageAuth.getSubscription().getRatingAttributes().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getExpressFlag() ).as(" usageAuth.getSubscription().getRatingAttributes().getExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isExpressFlag() ).as(" usageAuth.getSubscription().getRatingAttributes().isExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isPreOrder() ).as(" usageAuth.getSubscription().getRatingAttributes().isPreOrder()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isCancellationUsage() ).as(" usageAuth.getSubscription().getRatingAttributes().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getTierName() ).as(" usageAuth.getSubscription().getRatingAttributes().getTierName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPromoPrecode() ).as(" usageAuth.getSubscription().getRatingAttributes().getPromoPrecode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getUniquePromoCode() ).as(" usageAuth.getSubscription().getRatingAttributes().getUniquePromoCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPromoUniqueCode() ).as(" usageAuth.getSubscription().getRatingAttributes().getPromoUniqueCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getNextCycleDiscount() ).as(" usageAuth.getSubscription().getRatingAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getHasHistoricPricePointFlag() ).as(" usageAuth.getSubscription().getRatingAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isIsForRenewal() ).as(" usageAuth.getSubscription().getRatingAttributes().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getTaxRate() ).as(" usageAuth.getSubscription().getRatingAttributes().getTaxRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getTaxRateAsDouble() ).as(" usageAuth.getSubscription().getRatingAttributes().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getAffiliateID() ).as(" usageAuth.getSubscription().getRatingAttributes().getAffiliateID()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPartnerId() ).as(" usageAuth.getSubscription().getRatingAttributes().getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getTariff() ).as(" usageAuth.getSubscription().getRatingAttributes().getTariff()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getAggregatorId() ).as(" usageAuth.getSubscription().getRatingAttributes().getAggregatorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isForcePurchaseFlow() ).as(" usageAuth.getSubscription().getRatingAttributes().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getReceipientMsisdn() ).as(" usageAuth.getSubscription().getRatingAttributes().getReceipientMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getProductCode() ).as(" usageAuth.getSubscription().getRatingAttributes().getProductCode()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getMerchantName() ).as(" usageAuth.getSubscription().getRatingAttributes().getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getInvoiceText() ).as(" usageAuth.getSubscription().getRatingAttributes().getInvoiceText()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isReIssueEnabled() ).as(" usageAuth.getSubscription().getRatingAttributes().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isReIssueFlagPresent() ).as(" usageAuth.getSubscription().getRatingAttributes().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getShortPackageId() ).as(" usageAuth.getSubscription().getRatingAttributes().getShortPackageId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getTaxCode() ).as(" usageAuth.getSubscription().getRatingAttributes().getTaxCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getHistoryStartDate() ).as(" usageAuth.getSubscription().getRatingAttributes().getHistoryStartDate()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getVendorId() ).as(" usageAuth.getSubscription().getRatingAttributes().getVendorId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isIsForNextPaymentAmount() ).as(" usageAuth.getSubscription().getRatingAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getRenewalPreRate() ).as(" usageAuth.getSubscription().getRatingAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isOverrideDisallowPreRateFlag() ).as(" usageAuth.getSubscription().getRatingAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getContentCategory() ).as(" usageAuth.getSubscription().getRatingAttributes().getContentCategory()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPartnerUrl() ).as(" usageAuth.getSubscription().getRatingAttributes().getPartnerUrl()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPartnerContactInfo() ).as(" usageAuth.getSubscription().getRatingAttributes().getPartnerContactInfo()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPartnerEmail() ).as(" usageAuth.getSubscription().getRatingAttributes().getPartnerEmail()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPartnerName() ).as(" usageAuth.getSubscription().getRatingAttributes().getPartnerName()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getRatingAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getSubscription().getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getLinkedByTrialPricepoint() ).as(" usageAuth.getSubscription().getRatingAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getSubRenewalPricepointId() ).as(" usageAuth.getSubscription().getRatingAttributes().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getLinkPricepointId() ).as(" usageAuth.getSubscription().getRatingAttributes().getLinkPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getSubPurchaseTransactionTrial() ).as(" usageAuth.getSubscription().getRatingAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getDiscardHiddenInactivePricepoints() ).as(" usageAuth.getSubscription().getRatingAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" usageAuth.getSubscription().getRatingAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getExtIdentifier1() ).as(" usageAuth.getSubscription().getRatingAttributes().getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getExtIdentifier2() ).as(" usageAuth.getSubscription().getRatingAttributes().getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getExtIdentifier3() ).as(" usageAuth.getSubscription().getRatingAttributes().getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getAccessChannel() ).as(" usageAuth.getSubscription().getRatingAttributes().getAccessChannel()" ).isNull();
        softly.assertThat(usageAuth.getSubscription().getRatingAttributes().getPurchaseChannel() ).as(" usageAuth.getSubscription().getRatingAttributes().getPurchaseChannel()" ).isNull();


    }
}
