package com.vodafone.er.ecom.proxy.usageAuthRate;

import com.vizzavi.ecommerce.business.charging.PurchaseAttributes;
import com.vizzavi.ecommerce.business.charging.PurchaseAuthorization;
import com.vizzavi.ecommerce.business.charging.UsageAttributes;
import com.vizzavi.ecommerce.business.charging.UsageAuthorization;
import com.vizzavi.ecommerce.business.common.EcomApiFactory;
import org.assertj.core.api.SoftAssertions;
import org.junit.Test;

import java.util.Locale;
import java.util.Random;

import static com.vodafone.er.ecom.proxy.enums.EcomAppEnum.CLIENT_ID;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Created by Ravi Aghera
 *
 * UsageAuthRateCharge with a UsageAuthorisation response
 * Split into parts since the test is so long!
 */
public class UsageAuthRate2IT_pt11 {

    private SoftAssertions softly = new SoftAssertions();

    @Test
    public void usageAuthRateCharge3UsageAuthResponse() throws Exception {
        final String msisdn = String.valueOf(new Random().nextInt());
        String packageId = "BP001__X__package:BP001_TAX_3_4_10010_999_999_*_*_*_false_false";
//
//        //Purchase
        final PurchaseAuthorization purchaseAuthorization = EcomApiFactory.getPurchaseApi(Locale.UK).purchasePackageMsisdn("test", msisdn, packageId, new PurchaseAttributes());
        assertNotNull(purchaseAuthorization);
        assertTrue("Auth response is false", purchaseAuthorization.isSuccess());

        final UsageAuthorization auth = EcomApiFactory.getChargingApi(Locale.UK)
                .usageAuthRate(CLIENT_ID.getValue(), msisdn, "B001", new UsageAttributes());
        assertNotNull(auth);
        assertTrue(auth.isSuccess());


        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalCounterToLinkedPricepoint() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getPPtRenewalCounterToLinkedPricepoint() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalPricepointId() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLinkPricepointId() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLinkPricepointId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getSubPurchaseTransactionTrial() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getDiscardHiddenInactivePricepoints() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).isDiscardMiddleAdvancedPricepoints() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier1() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier1()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier2() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier2()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier3() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier3()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getAccessChannel() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getAccessChannel()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getPurchaseChannel() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getPurchaseChannel()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getDeviceID() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getDeviceID()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLocal() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLocal()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getMsisdn() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getMsisdn()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLanguageLocale() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLanguageLocale()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLanguageCode() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getLanguageCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExternalField1() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExternalField1()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExternalField2() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExternalField2()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExternalTransId() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getExternalTransId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getActiveSubscriptions() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getActiveSubscriptions()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getCsrId() ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricePoints().get(0).getCsrId()" ).isNull();
//check size of array!
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getPricingModels().length ).as(" auth.getSubscription().getPackage().getServices().get(0).getPricingModels().length" ).isEqualTo(0) ;
// java.util.HashMap
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getSalesModel() ).as(" auth.getSubscription().getPackage().getServices().get(0).getSalesModel()" ).isEqualTo("Reseller");
        softly.assertThat(auth.getSubscription().getPackage().getServices().get(0).getServiceType() ).as(" auth.getSubscription().getPackage().getServices().get(0).getServiceType()" ).isEqualTo("service");
        softly.assertThat(auth.getSubscription().getCountry() ).as(" auth.getSubscription().getCountry()" ).isNull();
        softly.assertThat(auth.getSubscription().isArchived() ).as(" auth.getSubscription().isArchived()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getExtensionPeriod() ).as(" auth.getSubscription().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().isRecurring() ).as(" auth.getSubscription().isRecurring()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getSubscriptionId() ).as(" auth.getSubscription().getSubscriptionId()" ).isEqualTo("1126");
        softly.assertThat(auth.getSubscription().getSubscriptionIdLong() ).as(" auth.getSubscription().getSubscriptionIdLong()" ).isEqualTo(new Long(1126)) ;
        softly.assertThat(auth.getSubscription().getAccount() ).as(" auth.getSubscription().getAccount()" ).isNull();
        softly.assertThat(auth.getSubscription().getRenewalDate() ).as(" auth.getSubscription().getRenewalDate()" ).isNull();
        softly.assertThat(auth.getSubscription().isInactiveOrClosed() ).as(" auth.getSubscription().isInactiveOrClosed()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().isFailed() ).as(" auth.getSubscription().isFailed()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().isBeingProvisioned() ).as(" auth.getSubscription().isBeingProvisioned()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().isReserved() ).as(" auth.getSubscription().isReserved()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getLinkedPtID() ).as(" auth.getSubscription().getLinkedPtID()" ).isNull();
        softly.assertThat(auth.getSubscription().isPreOrdered() ).as(" auth.getSubscription().isPreOrdered()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getContentPaymentType() ).as(" auth.getSubscription().getContentPaymentType()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPurchaseDeviceType() ).as(" auth.getSubscription().getPurchaseDeviceType()" ).isEqualTo(999) ;
        softly.assertThat(auth.getSubscription().getNextCyclePercentDiscount() ).as(" auth.getSubscription().getNextCyclePercentDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getNextPaymentAmount() ).as(" auth.getSubscription().getNextPaymentAmount()" ).isEqualTo(new Double(7.0)) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getServiceIds().length ).as(" auth.getSubscription().getServiceIds().length" ).isEqualTo(1) ;
//check size of list!
        softly.assertThat(auth.getSubscription().getResourceBalancesList().size()).as("auth.getSubscription().getResourceBalancesList().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getResourceBalancesList().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().getName() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().getName()" ).isEqualTo("Alerts");
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().isCurrency() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().isResource() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().getCountryId() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceName() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().getCode() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().getCode()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().getDescription() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().getDescription()" ).isEqualTo("Alerts");
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().isToken() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().isUsageToken() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().isPayToken() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceSymbol() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getSubscriptionId() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getSubscriptionId()" ).isEqualTo("1126");
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getSubscriptionIdLong() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getSubscriptionIdLong()" ).isEqualTo(new Long(1126)) ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getOldestSubscriptionId() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getOldestSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getThreshold() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getSubscription() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getSubscription()" ).isNull();
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getBalance() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getBalance()" ).isEqualTo(new Double(1.0)) ;
        softly.assertThat(auth.getSubscription().getResourceBalancesList().get(0).getPackageId() ).as(" auth.getSubscription().getResourceBalancesList().get(0).getPackageId()" ).isNull();
// com.vodafone.global.er.subscriptionmanagement.ERRatingAttributes
        softly.assertThat(auth.getSubscription().getRatingAttributes().getChannel() ).as(" auth.getSubscription().getRatingAttributes().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getMultiUsageMode() ).as(" auth.getSubscription().getRatingAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getNetworkCodeMatchMethod() ).as(" auth.getSubscription().getRatingAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isPreRatePriceGross() ).as(" auth.getSubscription().getRatingAttributes().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPreRate() ).as(" auth.getSubscription().getRatingAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPaymentInformation() ).as(" auth.getSubscription().getRatingAttributes().getPaymentInformation()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getContentName() ).as(" auth.getSubscription().getRatingAttributes().getContentName()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getAssetID() ).as(" auth.getSubscription().getRatingAttributes().getAssetID()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPremiumLevel() ).as(" auth.getSubscription().getRatingAttributes().getPremiumLevel()" ).isEqualTo(998) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getReserveOnlyFlag() ).as(" auth.getSubscription().getRatingAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getSupplierId() ).as(" auth.getSubscription().getRatingAttributes().getSupplierId()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getDeviceType() ).as(" auth.getSubscription().getRatingAttributes().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getRatingAttributes().getUserGroups().length ).as(" auth.getSubscription().getRatingAttributes().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getUserGroup() ).as(" auth.getSubscription().getRatingAttributes().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPaymentType() ).as(" auth.getSubscription().getRatingAttributes().getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getEventDateTime() ).as(" auth.getSubscription().getRatingAttributes().getEventDateTime()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getEventUnits() ).as(" auth.getSubscription().getRatingAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPromoCodes().length ).as(" auth.getSubscription().getRatingAttributes().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getRatingAttributes().getBearerIds().length ).as(" auth.getSubscription().getRatingAttributes().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPromoCode() ).as(" auth.getSubscription().getRatingAttributes().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getRatingAttributes().getDuration() ).as(" auth.getSubscription().getRatingAttributes().getDuration()" ).isEqualTo(4) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getChargingMethod() ).as(" auth.getSubscription().getRatingAttributes().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getBearer() ).as(" auth.getSubscription().getRatingAttributes().getBearer()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getRatingAttributes().isInteractive() ).as(" auth.getSubscription().getRatingAttributes().isInteractive()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isIncludeUnavailable() ).as(" auth.getSubscription().getRatingAttributes().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getExpressFlag() ).as(" auth.getSubscription().getRatingAttributes().getExpressFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isExpressFlag() ).as(" auth.getSubscription().getRatingAttributes().isExpressFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isPreOrder() ).as(" auth.getSubscription().getRatingAttributes().isPreOrder()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isCancellationUsage() ).as(" auth.getSubscription().getRatingAttributes().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getTierName() ).as(" auth.getSubscription().getRatingAttributes().getTierName()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPromoPrecode() ).as(" auth.getSubscription().getRatingAttributes().getPromoPrecode()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getUniquePromoCode() ).as(" auth.getSubscription().getRatingAttributes().getUniquePromoCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPromoUniqueCode() ).as(" auth.getSubscription().getRatingAttributes().getPromoUniqueCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getNextCycleDiscount() ).as(" auth.getSubscription().getRatingAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getHasHistoricPricePointFlag() ).as(" auth.getSubscription().getRatingAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isIsForRenewal() ).as(" auth.getSubscription().getRatingAttributes().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getTaxRate() ).as(" auth.getSubscription().getRatingAttributes().getTaxRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getTaxRateAsDouble() ).as(" auth.getSubscription().getRatingAttributes().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getAffiliateID() ).as(" auth.getSubscription().getRatingAttributes().getAffiliateID()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPartnerId() ).as(" auth.getSubscription().getRatingAttributes().getPartnerId()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getTariff() ).as(" auth.getSubscription().getRatingAttributes().getTariff()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getRatingAttributes().getAggregatorId() ).as(" auth.getSubscription().getRatingAttributes().getAggregatorId()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().isForcePurchaseFlow() ).as(" auth.getSubscription().getRatingAttributes().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getReceipientMsisdn() ).as(" auth.getSubscription().getRatingAttributes().getReceipientMsisdn()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getProductCode() ).as(" auth.getSubscription().getRatingAttributes().getProductCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getMerchantName() ).as(" auth.getSubscription().getRatingAttributes().getMerchantName()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getInvoiceText() ).as(" auth.getSubscription().getRatingAttributes().getInvoiceText()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().isReIssueEnabled() ).as(" auth.getSubscription().getRatingAttributes().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isReIssueFlagPresent() ).as(" auth.getSubscription().getRatingAttributes().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getShortPackageId() ).as(" auth.getSubscription().getRatingAttributes().getShortPackageId()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getTaxCode() ).as(" auth.getSubscription().getRatingAttributes().getTaxCode()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getRatingAttributes().getHistoryStartDate() ).as(" auth.getSubscription().getRatingAttributes().getHistoryStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getVendorId() ).as(" auth.getSubscription().getRatingAttributes().getVendorId()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().isIsForNextPaymentAmount() ).as(" auth.getSubscription().getRatingAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getRenewalPreRate() ).as(" auth.getSubscription().getRatingAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isOverrideDisallowPreRateFlag() ).as(" auth.getSubscription().getRatingAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getContentCategory() ).as(" auth.getSubscription().getRatingAttributes().getContentCategory()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPartnerUrl() ).as(" auth.getSubscription().getRatingAttributes().getPartnerUrl()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPartnerContactInfo() ).as(" auth.getSubscription().getRatingAttributes().getPartnerContactInfo()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPartnerEmail() ).as(" auth.getSubscription().getRatingAttributes().getPartnerEmail()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPartnerName() ).as(" auth.getSubscription().getRatingAttributes().getPartnerName()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" auth.getSubscription().getRatingAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" auth.getSubscription().getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getLinkedByTrialPricepoint() ).as(" auth.getSubscription().getRatingAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getSubRenewalPricepointId() ).as(" auth.getSubscription().getRatingAttributes().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getLinkPricepointId() ).as(" auth.getSubscription().getRatingAttributes().getLinkPricepointId()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getSubPurchaseTransactionTrial() ).as(" auth.getSubscription().getRatingAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getDiscardHiddenInactivePricepoints() ).as(" auth.getSubscription().getRatingAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" auth.getSubscription().getRatingAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getRatingAttributes().getExtIdentifier1() ).as(" auth.getSubscription().getRatingAttributes().getExtIdentifier1()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getExtIdentifier2() ).as(" auth.getSubscription().getRatingAttributes().getExtIdentifier2()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getExtIdentifier3() ).as(" auth.getSubscription().getRatingAttributes().getExtIdentifier3()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getAccessChannel() ).as(" auth.getSubscription().getRatingAttributes().getAccessChannel()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getPurchaseChannel() ).as(" auth.getSubscription().getRatingAttributes().getPurchaseChannel()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getDeviceID() ).as(" auth.getSubscription().getRatingAttributes().getDeviceID()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getLocal() ).as(" auth.getSubscription().getRatingAttributes().getLocal()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getMsisdn() ).as(" auth.getSubscription().getRatingAttributes().getMsisdn()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getLanguageLocale() ).as(" auth.getSubscription().getRatingAttributes().getLanguageLocale()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getLanguageCode() ).as(" auth.getSubscription().getRatingAttributes().getLanguageCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getExternalField1() ).as(" auth.getSubscription().getRatingAttributes().getExternalField1()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getExternalField2() ).as(" auth.getSubscription().getRatingAttributes().getExternalField2()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getExternalTransId() ).as(" auth.getSubscription().getRatingAttributes().getExternalTransId()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getActiveSubscriptions() ).as(" auth.getSubscription().getRatingAttributes().getActiveSubscriptions()" ).isNull();
        softly.assertThat(auth.getSubscription().getRatingAttributes().getCsrId() ).as(" auth.getSubscription().getRatingAttributes().getCsrId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPaymentTransactionId() ).as(" auth.getSubscription().getPaymentTransactionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getNonRefundDescription() ).as(" auth.getSubscription().getNonRefundDescription()" ).isNull();
        softly.assertThat(auth.getSubscription().getInteractiveUsageFlag() ).as(" auth.getSubscription().getInteractiveUsageFlag()" ).isEqualTo(1) ;
        softly.assertThat(auth.getSubscription().isFirstUsage() ).as(" auth.getSubscription().isFirstUsage()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().isSubscriptionUsed() ).as(" auth.getSubscription().isSubscriptionUsed()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getCurrentNoOfOccurences() ).as(" auth.getSubscription().getCurrentNoOfOccurences()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(auth.getSubscription().getPenaltyCharge() ).as(" auth.getSubscription().getPenaltyCharge()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().isMinSubscriptionPeriodElapsed() ).as(" auth.getSubscription().isMinSubscriptionPeriodElapsed()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().isUnderGracePeriod() ).as(" auth.getSubscription().isUnderGracePeriod()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getBatchRetryDate() ).as(" auth.getSubscription().getBatchRetryDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getOverdueExpiryDate() ).as(" auth.getSubscription().getOverdueExpiryDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getLastExpiryDate() ).as(" auth.getSubscription().getLastExpiryDate()" ).isNull();
        softly.assertThat(auth.getSubscription().isWasRecurringTrial() ).as(" auth.getSubscription().isWasRecurringTrial()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getParentPackageID() ).as(" auth.getSubscription().getParentPackageID()" ).isNull();
//check size of list!
        softly.assertThat(auth.getSubscription().getTransactions().size()).as("auth.getSubscription().getTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getTransactions().size() >= 0);
//check size of list!
        softly.assertThat(auth.getSubscription().getRefundTransactions().size()).as("auth.getSubscription().getRefundTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getRefundTransactions().size() >= 0);
        softly.assertThat(auth.getSubscription().getPreviousStatus() ).as(" auth.getSubscription().getPreviousStatus()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().isParentAlsoPurchased() ).as(" auth.getSubscription().isParentAlsoPurchased()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().isProvisionOnUsageSuccess() ).as(" auth.getSubscription().isProvisionOnUsageSuccess()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getMLocalEndDate() ).as(" auth.getSubscription().getMLocalEndDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getMLocalStartDate() ).as(" auth.getSubscription().getMLocalStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getMLocalEndDateCal() ).as(" auth.getSubscription().getMLocalEndDateCal()" ).isNull();
        softly.assertThat(auth.getSubscription().getMLocalStartDateCal() ).as(" auth.getSubscription().getMLocalStartDateCal()" ).isNull();
        softly.assertThat(auth.getSubscription().getLastUsageTransactionIdForSameContent() ).as(" auth.getSubscription().getLastUsageTransactionIdForSameContent()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(auth.getSubscription().getSpId() ).as(" auth.getSubscription().getSpId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPartnerTaxRate() ).as(" auth.getSubscription().getPartnerTaxRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(auth.getSubscription().getCountryId() ).as(" auth.getSubscription().getCountryId()" ).isNull();
        softly.assertThat(auth.getSubscription().isWasRecurringPromoCode() ).as(" auth.getSubscription().isWasRecurringPromoCode()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getLastPaymentTransaction() ).as(" auth.getSubscription().getLastPaymentTransaction()" ).isNull();
        softly.assertThat(auth.getSubscription().getB2BPartner() ).as(" auth.getSubscription().getB2BPartner()" ).isNull();
        softly.assertThat(auth.getSubscription().getRenewalCounterToLinkedPricepoint() ).as(" auth.getSubscription().getRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().isRenewalPreRateGross() ).as(" auth.getSubscription().isRenewalPreRateGross()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getNextPricePointId() ).as(" auth.getSubscription().getNextPricePointId()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getLastPaymentTransactionAmount() ).as(" auth.getSubscription().getLastPaymentTransactionAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getLastToLastPaymentTransactionAmount() ).as(" auth.getSubscription().getLastToLastPaymentTransactionAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().isPricePointChangeOnRenewal() ).as(" auth.getSubscription().isPricePointChangeOnRenewal()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getOldSubscriptionId() ).as(" auth.getSubscription().getOldSubscriptionId()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(auth.getSubscription().getOldMsisdn() ).as(" auth.getSubscription().getOldMsisdn()" ).isNull();
        softly.assertThat(auth.getSubscription().isProvisionable() ).as(" auth.getSubscription().isProvisionable()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getFuturePricePointRenewals() ).as(" auth.getSubscription().getFuturePricePointRenewals()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPurcServiceList() ).as(" auth.getSubscription().getPurcServiceList()" ).isNull();
//check size of list!
        softly.assertThat(auth.getSubscription().getPaymentTransactions().size()).as("auth.getSubscription().getPaymentTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getPaymentTransactions().size() >= 0);
//check size of list!
        softly.assertThat(auth.getSubscription().getModifyTransactions().size()).as("auth.getSubscription().getModifyTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getModifyTransactions().size() >= 0);
        softly.assertThat(auth.getSubscription().getNextCyclePercentValue() ).as(" auth.getSubscription().getNextCyclePercentValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getLockId() ).as(" auth.getSubscription().getLockId()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(auth.getSubscription().isDefault() ).as(" auth.getSubscription().isDefault()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPaymentType() ).as(" auth.getSubscription().getPaymentType()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPartnerId() ).as(" auth.getSubscription().getPartnerId()" ).isNull();
        softly.assertThat(auth.getSubscription().getMerchantName() ).as(" auth.getSubscription().getMerchantName()" ).isNull();
        softly.assertThat(auth.getSubscription().getRenewalPreRate() ).as(" auth.getSubscription().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getExtIdentifier1() ).as(" auth.getSubscription().getExtIdentifier1()" ).isNull();
        softly.assertThat(auth.getSubscription().getExtIdentifier2() ).as(" auth.getSubscription().getExtIdentifier2()" ).isNull();
        softly.assertThat(auth.getSubscription().getExtIdentifier3() ).as(" auth.getSubscription().getExtIdentifier3()" ).isNull();
        softly.assertThat(auth.getSubscription().getMsisdn() ).as(" auth.getSubscription().getMsisdn()" ).isEqualTo("-465397633");
        softly.assertThat(auth.getSubscription().getCsrId() ).as(" auth.getSubscription().getCsrId()" ).isNull();
        softly.assertThat(auth.getSubscription().isPromotional() ).as(" auth.getSubscription().isPromotional()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPromotionalExpiryDate() ).as(" auth.getSubscription().getPromotionalExpiryDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getStatus() ).as(" auth.getSubscription().getStatus()" ).isEqualTo(1) ;
        softly.assertThat(auth.getSubscription().getExternalSubId() ).as(" auth.getSubscription().getExternalSubId()" ).isNull();
        softly.assertThat(auth.getSubscription().getOptions() ).as(" auth.getSubscription().getOptions()" ).isNull();
// com.vizzavi.ecommerce.business.catalog.PricePoint
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().getName() ).as(" auth.getSubscription().getPricePoint().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getResource().isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getKey() ).as(" auth.getSubscription().getPricePoint().getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getId() ).as(" auth.getSubscription().getPricePoint().getId()" ).isEqualTo("package:BP001_TAX_3_4_10010_999_999_*_*_*_false_false");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricingModelTier() ).as(" auth.getSubscription().getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isArchived() ).as(" auth.getSubscription().getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isBasePricePoint() ).as(" auth.getSubscription().getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAccessDevice() ).as(" auth.getSubscription().getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAlternativeRate() ).as(" auth.getSubscription().getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(8.225)) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts().length ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts().length" ).isEqualTo(2) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getName() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isCurrency() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isResource() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCountryId() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceName() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCode() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getDescription() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isUsageToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isPayToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//check size of list!
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().size()).as("auth.getSubscription().getPricePoint().getBalanceImpactList().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getPricePoint().getBalanceImpactList().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getKey() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getId() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getType() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isCurrency() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isResource() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getRate() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getRate()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getFixedAmount()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getName()" ).isEqualTo("Credit Alert");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCode()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getKey() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getId() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getId()" ).isEqualTo("1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getType() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isCurrency() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isResource() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getRate() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getFixedAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isTrial() ).as(" auth.getSubscription().getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getGlid() ).as(" auth.getSubscription().getPricePoint().getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(auth.getSubscription().getPricePoint().getPricepointIdLink() ).as(" auth.getSubscription().getPricePoint().getPricepointIdLink()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getPricePoint().isPreview() ).as(" auth.getSubscription().getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getInteractiveFlag() ).as(" auth.getSubscription().getPricePoint().getInteractiveFlag()" ).isEqualTo("NONE");
        softly.assertThat(auth.getSubscription().getPricePoint().isForcedPurchase() ).as(" auth.getSubscription().getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isSubscriptionDuplicate() ).as(" auth.getSubscription().getPricePoint().isSubscriptionDuplicate()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getFixedExpiryDate() ).as(" auth.getSubscription().getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isReserveOnly() ).as(" auth.getSubscription().getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getMinSubPeriod() ).as(" auth.getSubscription().getPricePoint().getMinSubPeriod()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPenaltyCharges() ).as(" auth.getSubscription().getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCancellation() ).as(" auth.getSubscription().getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getMonthEndSubscription() ).as(" auth.getSubscription().getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(auth.getSubscription().getPricePoint().isHistoric() ).as(" auth.getSubscription().getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getFixedRecurrence() ).as(" auth.getSubscription().getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isFixedRecurringPricePoint() ).as(" auth.getSubscription().getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isReceipting() ).as(" auth.getSubscription().getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getReceiptingAttribute() ).as(" auth.getSubscription().getPricePoint().getReceiptingAttribute()" ).isEqualTo("NULL");
        softly.assertThat(auth.getSubscription().getPricePoint().getOrder() ).as(" auth.getSubscription().getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPaymentHandler() ).as(" auth.getSubscription().getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getNonMatchAllUserGroups().length ).as(" auth.getSubscription().getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isPromo() ).as(" auth.getSubscription().getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isSubmitToPaymentHandler() ).as(" auth.getSubscription().getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isSuppressToPaymentHandler() ).as(" auth.getSubscription().getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricingTextTemplateName1() ).as(" auth.getSubscription().getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricingTextTemplateName2() ).as(" auth.getSubscription().getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getTranslatedPricingText1() ).as(" auth.getSubscription().getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getTranslatedPricingText2() ).as(" auth.getSubscription().getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getRecurrenceDay() ).as(" auth.getSubscription().getPricePoint().getRecurrenceDay()" ).isEqualTo(0) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(auth.getSubscription().getPricePoint().isAlignWithExternal() ).as(" auth.getSubscription().getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getGracePeriod() ).as(" auth.getSubscription().getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getRetryFrequency() ).as(" auth.getSubscription().getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getSuspensionPeriod() ).as(" auth.getSubscription().getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" auth.getSubscription().getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getTranslatedPricingText() ).as(" auth.getSubscription().getPricePoint().getTranslatedPricingText()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getFairUsageLimit() ).as(" auth.getSubscription().getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getFairUsagePeriod() ).as(" auth.getSubscription().getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getFairUsagePeriodUnit() ).as(" auth.getSubscription().getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(auth.getSubscription().getPricePoint().getExtensionPeriod() ).as(" auth.getSubscription().getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isIncludeServiceForPackageFUP() ).as(" auth.getSubscription().getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isFairUsagePolicyEnabled() ).as(" auth.getSubscription().getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isTariff() ).as(" auth.getSubscription().getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isHideForPurchaseOptions() ).as(" auth.getSubscription().getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getName() ).as(" auth.getSubscription().getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getKey() ).as(" auth.getSubscription().getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRate() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxCode() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
////check size of list!
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRates().size()).as("auth.getSubscription().getPricePoint().getTax().getTaxRates().size()").isEqualTo(3);
////if the list is smaller than expected we can't continue, so do a hard assert
//        assertTrue(auth.getSubscription().getPricePoint().getTax().getTaxRates().size() >= 3);
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).value() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).value()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).getKey() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxRates().get(0).getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).value() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).value()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).getKey() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxRates().get(1).getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).value() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).value()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).getKey() ).as(" auth.getSubscription().getPricePoint().getTax().getTaxRates().get(2).getKey()" ).isEqualTo(new Long(0)) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances().length ).as(" auth.getSubscription().getPricePoint().getBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().getName() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionId() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionIdLong() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getOldestSubscriptionId() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getThreshold() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getSubscription() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getBalance() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getBalance()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBalances()[0].getPackageId() ).as(" auth.getSubscription().getPricePoint().getBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isRecurring() ).as(" auth.getSubscription().getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" auth.getSubscription().getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getKey() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getKey()" ).isNull();
//check size of list!
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size()).as("auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Credit Alert");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId()" ).isEqualTo("1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getPricingModel() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getTier() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().isDefaultPPT() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" auth.getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
//check size of list!
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().size()).as("auth.getSubscription().getPricePoint().getAllBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getPricePoint().getAllBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getKey() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getId() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getType() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isCurrency() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isResource() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getRate() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Credit Alert");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getKey() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getId() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getId()" ).isEqualTo("1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getType() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isCurrency() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isResource() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getRate() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPackageIdentifier() ).as(" auth.getSubscription().getPricePoint().getPackageIdentifier()" ).isEqualTo("package:BP001_TAX_3_4_10010_999_999_*_*_*_false_false_*");
        softly.assertThat(auth.getSubscription().getPricePoint().getServiceIdentifier() ).as(" auth.getSubscription().getPricePoint().getServiceIdentifier()" ).isEqualTo("content:BP001_TAX_*_999_10010_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().getName() ).as(" auth.getSubscription().getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().isCurrency() ).as(" auth.getSubscription().getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().isResource() ).as(" auth.getSubscription().getPricePoint().getResourceField().isResource()" ).isFalse() ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().getCountryId() ).as(" auth.getSubscription().getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().getResourceName() ).as(" auth.getSubscription().getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().getCode() ).as(" auth.getSubscription().getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().getDescription() ).as(" auth.getSubscription().getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().isToken() ).as(" auth.getSubscription().getPricePoint().getResourceField().isToken()" ).isFalse() ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().isPayToken() ).as(" auth.getSubscription().getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
//        softly.assertThat(auth.getSubscription().getPricePoint().getResourceField().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getStandardRateWithoutTax() ).as(" auth.getSubscription().getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isVolumeType() ).as(" auth.getSubscription().getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isOriginal() ).as(" auth.getSubscription().getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers().length ).as(" auth.getSubscription().getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getKey() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
//check size of list!
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()).as("auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Credit Alert");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId()" ).isEqualTo("1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getTier() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" auth.getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getProtectedFk() ).as(" auth.getSubscription().getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getmPricingText1() ).as(" auth.getSubscription().getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getPricePoint().getmPricingText2() ).as(" auth.getSubscription().getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getPricePoint().isNonRecurring() ).as(" auth.getSubscription().getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isEvent() ).as(" auth.getSubscription().getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isPreOrder() ).as(" auth.getSubscription().getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getTaxRate() ).as(" auth.getSubscription().getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getTaxCode() ).as(" auth.getSubscription().getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(auth.getSubscription().getPricePoint().getLinkedByTrialPricepoint() ).as(" auth.getSubscription().getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getStartDate() ).as(" auth.getSubscription().getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getDescription() ).as(" auth.getSubscription().getPricePoint().getDescription()" ).isEqualTo("Recurring 1 month");
        softly.assertThat(auth.getSubscription().getPricePoint().getExpiryDate() ).as(" auth.getSubscription().getPricePoint().getExpiryDate()" ).isNull();
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances().length ).as(" auth.getSubscription().getPricePoint().getResourceBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getName() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionId() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getThreshold() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscription() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getBalance() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getResourceBalances()[0].getPackageId() ).as(" auth.getSubscription().getPricePoint().getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getNetRate() ).as(" auth.getSubscription().getPricePoint().getNetRate()" ).isEqualTo(new Double(7.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isAlwaysValidateMsisdn() ).as(" auth.getSubscription().getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getStandardRate() ).as(" auth.getSubscription().getPricePoint().getStandardRate()" ).isEqualTo(new Double(8.225)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isDiscount() ).as(" auth.getSubscription().getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getDiscountPromoText() ).as(" auth.getSubscription().getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getPricePoint().getPackageId() ).as(" auth.getSubscription().getPricePoint().getPackageId()" ).isEqualTo("BP001");
        softly.assertThat(auth.getSubscription().getPricePoint().getContentId() ).as(" auth.getSubscription().getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getPricePoint().getPricingText1() ).as(" auth.getSubscription().getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getPricePoint().getPricingText2() ).as(" auth.getSubscription().getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(auth.getSubscription().getPricePoint().getUsageTime() ).as(" auth.getSubscription().getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getAccessDuration() ).as(" auth.getSubscription().getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isZeroCostIgnore() ).as(" auth.getSubscription().getPricePoint().isZeroCostIgnore()" ).isFalse() ;
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances().length ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getName() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getName()" ).isEqualTo("Credit Alert");
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isResource() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCode() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isToken() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getThreshold() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscription() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getBalance() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getBalance()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getPackageId() ).as(" auth.getSubscription().getPricePoint().getCustomResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isActive() ).as(" auth.getSubscription().getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getRate() ).as(" auth.getSubscription().getPricePoint().getRate()" ).isEqualTo(new Double(8.225)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getChannel() ).as(" auth.getSubscription().getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getMultiUsageMode() ).as(" auth.getSubscription().getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getNetworkCodeMatchMethod() ).as(" auth.getSubscription().getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isPreRatePriceGross() ).as(" auth.getSubscription().getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPreRate() ).as(" auth.getSubscription().getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPaymentInformation() ).as(" auth.getSubscription().getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getContentName() ).as(" auth.getSubscription().getPricePoint().getContentName()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAssetID() ).as(" auth.getSubscription().getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPremiumLevel() ).as(" auth.getSubscription().getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getReserveOnlyFlag() ).as(" auth.getSubscription().getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getSupplierId() ).as(" auth.getSubscription().getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getPricePoint().getDeviceType() ).as(" auth.getSubscription().getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getUserGroups().length ).as(" auth.getSubscription().getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getUserGroup() ).as(" auth.getSubscription().getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getPricePoint().getPaymentType() ).as(" auth.getSubscription().getPricePoint().getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getEventDateTime() ).as(" auth.getSubscription().getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getEventUnits() ).as(" auth.getSubscription().getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getPromoCodes().length ).as(" auth.getSubscription().getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(auth.getSubscription().getPricePoint().getBearerIds().length ).as(" auth.getSubscription().getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPromoCode() ).as(" auth.getSubscription().getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getPricePoint().getDuration() ).as(" auth.getSubscription().getPricePoint().getDuration()" ).isEqualTo(4) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getChargingMethod() ).as(" auth.getSubscription().getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getBearer() ).as(" auth.getSubscription().getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getPricePoint().isInteractive() ).as(" auth.getSubscription().getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isIncludeUnavailable() ).as(" auth.getSubscription().getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getExpressFlag() ).as(" auth.getSubscription().getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isExpressFlag() ).as(" auth.getSubscription().getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isCancellationUsage() ).as(" auth.getSubscription().getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getTierName() ).as(" auth.getSubscription().getPricePoint().getTierName()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPromoPrecode() ).as(" auth.getSubscription().getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getUniquePromoCode() ).as(" auth.getSubscription().getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPromoUniqueCode() ).as(" auth.getSubscription().getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getNextCycleDiscount() ).as(" auth.getSubscription().getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getHasHistoricPricePointFlag() ).as(" auth.getSubscription().getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isIsForRenewal() ).as(" auth.getSubscription().getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getTaxRateAsDouble() ).as(" auth.getSubscription().getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAffiliateID() ).as(" auth.getSubscription().getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPartnerId() ).as(" auth.getSubscription().getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getTariff() ).as(" auth.getSubscription().getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(auth.getSubscription().getPricePoint().getAggregatorId() ).as(" auth.getSubscription().getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isForcePurchaseFlow() ).as(" auth.getSubscription().getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getReceipientMsisdn() ).as(" auth.getSubscription().getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getProductCode() ).as(" auth.getSubscription().getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getMerchantName() ).as(" auth.getSubscription().getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getInvoiceText() ).as(" auth.getSubscription().getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isReIssueEnabled() ).as(" auth.getSubscription().getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isReIssueFlagPresent() ).as(" auth.getSubscription().getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getShortPackageId() ).as(" auth.getSubscription().getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getHistoryStartDate() ).as(" auth.getSubscription().getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getVendorId() ).as(" auth.getSubscription().getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().isIsForNextPaymentAmount() ).as(" auth.getSubscription().getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getRenewalPreRate() ).as(" auth.getSubscription().getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getSubscription().getPricePoint().isOverrideDisallowPreRateFlag() ).as(" auth.getSubscription().getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getContentCategory() ).as(" auth.getSubscription().getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPartnerUrl() ).as(" auth.getSubscription().getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPartnerContactInfo() ).as(" auth.getSubscription().getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPartnerEmail() ).as(" auth.getSubscription().getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPartnerName() ).as(" auth.getSubscription().getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" auth.getSubscription().getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" auth.getSubscription().getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getSubscription().getPricePoint().getSubRenewalPricepointId() ).as(" auth.getSubscription().getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getLinkPricepointId() ).as(" auth.getSubscription().getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getSubPurchaseTransactionTrial() ).as(" auth.getSubscription().getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" auth.getSubscription().getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" auth.getSubscription().getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPricePoint().getExtIdentifier1() ).as(" auth.getSubscription().getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getExtIdentifier2() ).as(" auth.getSubscription().getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getExtIdentifier3() ).as(" auth.getSubscription().getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getAccessChannel() ).as(" auth.getSubscription().getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getPurchaseChannel() ).as(" auth.getSubscription().getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getDeviceID() ).as(" auth.getSubscription().getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getLocal() ).as(" auth.getSubscription().getPricePoint().getLocal()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getMsisdn() ).as(" auth.getSubscription().getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getLanguageLocale() ).as(" auth.getSubscription().getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getLanguageCode() ).as(" auth.getSubscription().getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getExternalField1() ).as(" auth.getSubscription().getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getExternalField2() ).as(" auth.getSubscription().getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getExternalTransId() ).as(" auth.getSubscription().getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getActiveSubscriptions() ).as(" auth.getSubscription().getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(auth.getSubscription().getPricePoint().getCsrId() ).as(" auth.getSubscription().getPricePoint().getCsrId()" ).isNull();
//check size of array!
        softly.assertThat(auth.getSubscription().getResourceBalances().length ).as(" auth.getSubscription().getResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().getName() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().getName()" ).isEqualTo("Alerts");
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().isCurrency() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().isResource() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().getCountryId() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().getResourceName() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().getCode() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().getDescription() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("Alerts");
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().isToken() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().isUsageToken() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().isPayToken() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getResource().getResourceSymbol() ).as(" auth.getSubscription().getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getSubscriptionId() ).as(" auth.getSubscription().getResourceBalances()[0].getSubscriptionId()" ).isEqualTo("1126");
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getSubscriptionIdLong() ).as(" auth.getSubscription().getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(1126)) ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getOldestSubscriptionId() ).as(" auth.getSubscription().getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getThreshold() ).as(" auth.getSubscription().getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getSubscription() ).as(" auth.getSubscription().getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getBalance() ).as(" auth.getSubscription().getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(1.0)) ;
        softly.assertThat(auth.getSubscription().getResourceBalances()[0].getPackageId() ).as(" auth.getSubscription().getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(auth.getSubscription().getMicroServiceSubList() ).as(" auth.getSubscription().getMicroServiceSubList()" ).isNull();
        softly.assertThat(auth.getSubscription().getPackageId() ).as(" auth.getSubscription().getPackageId()" ).isNull();
        softly.assertThat(auth.getSubscription().isRefundable() ).as(" auth.getSubscription().isRefundable()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().isSuperPackage() ).as(" auth.getSubscription().isSuperPackage()" ).isFalse() ;
        softly.assertThat(auth.getSubscription().getPackageClass() ).as(" auth.getSubscription().getPackageClass()" ).isNull();
        softly.assertThat(auth.getSubscription().isActive() ).as(" auth.getSubscription().isActive()" ).isTrue() ;
        softly.assertThat(auth.getSubscription().isSuspended() ).as(" auth.getSubscription().isSuspended()" ).isFalse() ;
        softly.assertThat(auth.isValid() ).as(" auth.isValid()" ).isFalse() ;
        softly.assertThat(auth.getAuthCode() ).as(" auth.getAuthCode()" ).isNull();
        softly.assertThat(auth.isReservedOnly() ).as(" auth.isReservedOnly()" ).isFalse() ;
        softly.assertThat(auth.isCharged() ).as(" auth.isCharged()" ).isTrue() ;
// com.vizzavi.ecommerce.business.selfcare.ResourceBalance
// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(auth.getUserResourceBalance().getResource().getName() ).as(" auth.getUserResourceBalance().getResource().getName()" ).isEqualTo("Alerts");
//        softly.assertThat(auth.getUserResourceBalance().getResource().isCurrency() ).as(" auth.getUserResourceBalance().getResource().isCurrency()" ).isFalse() ;
//        softly.assertThat(auth.getUserResourceBalance().getResource().isResource() ).as(" auth.getUserResourceBalance().getResource().isResource()" ).isTrue() ;
//        softly.assertThat(auth.getUserResourceBalance().getResource().getCountryId() ).as(" auth.getUserResourceBalance().getResource().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(auth.getUserResourceBalance().getResource().getResourceName() ).as(" auth.getUserResourceBalance().getResource().getResourceName()" ).isEqualTo("ChargingResource_1100033");
//        softly.assertThat(auth.getUserResourceBalance().getResource().getCode() ).as(" auth.getUserResourceBalance().getResource().getCode()" ).isEqualTo(1100033) ;
//        softly.assertThat(auth.getUserResourceBalance().getResource().getDescription() ).as(" auth.getUserResourceBalance().getResource().getDescription()" ).isNull();
//        softly.assertThat(auth.getUserResourceBalance().getResource().isToken() ).as(" auth.getUserResourceBalance().getResource().isToken()" ).isFalse() ;
//        softly.assertThat(auth.getUserResourceBalance().getResource().isUsageToken() ).as(" auth.getUserResourceBalance().getResource().isUsageToken()" ).isFalse() ;
//        softly.assertThat(auth.getUserResourceBalance().getResource().isPayToken() ).as(" auth.getUserResourceBalance().getResource().isPayToken()" ).isFalse() ;
//        softly.assertThat(auth.getUserResourceBalance().getResource().getResourceSymbol() ).as(" auth.getUserResourceBalance().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100033");
//        softly.assertThat(auth.getUserResourceBalance().getSubscriptionId() ).as(" auth.getUserResourceBalance().getSubscriptionId()" ).isNull();
//        softly.assertThat(auth.getUserResourceBalance().getSubscriptionIdLong() ).as(" auth.getUserResourceBalance().getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
//        softly.assertThat(auth.getUserResourceBalance().getOldestSubscriptionId() ).as(" auth.getUserResourceBalance().getOldestSubscriptionId()" ).isNull();
//        softly.assertThat(auth.getUserResourceBalance().getThreshold() ).as(" auth.getUserResourceBalance().getThreshold()" ).isEqualTo(0) ;
//        softly.assertThat(auth.getUserResourceBalance().getSubscription() ).as(" auth.getUserResourceBalance().getSubscription()" ).isNull();
//        softly.assertThat(auth.getUserResourceBalance().getBalance() ).as(" auth.getUserResourceBalance().getBalance()" ).isEqualTo(new Double(1.0)) ;
//        softly.assertThat(auth.getUserResourceBalance().getPackageId() ).as(" auth.getUserResourceBalance().getPackageId()" ).isNull();
// com.vizzavi.ecommerce.business.common.ReasonCode
        softly.assertThat(auth.getSubReasonCode().getName() ).as(" auth.getSubReasonCode().getName()" ).isEqualTo("OK");
        softly.assertThat(auth.getSubReasonCode().getSubCode() ).as(" auth.getSubReasonCode().getSubCode()" ).isEqualTo(0) ;
        softly.assertThat(auth.getSubReasonCode().getResourceName() ).as(" auth.getSubReasonCode().getResourceName()" ).isEqualTo("ReasonCode_0");
        softly.assertThat(auth.getSubReasonCode().getCode() ).as(" auth.getSubReasonCode().getCode()" ).isEqualTo(0) ;
        softly.assertThat(auth.getPaymentErrorId() ).as(" auth.getPaymentErrorId()" ).isNull();
        softly.assertThat(auth.getPaymentErrorDescription() ).as(" auth.getPaymentErrorDescription()" ).isNull();
        softly.assertThat(auth.getPaymentId() ).as(" auth.getPaymentId()" ).isNull();
        softly.assertThat(auth.getEventReservationId() ).as(" auth.getEventReservationId()" ).isNull();
        softly.assertThat(auth.getPackageSubscriptionId() ).as(" auth.getPackageSubscriptionId()" ).isEqualTo("1126");
        softly.assertThat(auth.getPackageSubscriptionIdLong() ).as(" auth.getPackageSubscriptionIdLong()" ).isEqualTo(new Long(1126)) ;
        softly.assertThat(auth.getTransactionId() ).as(" auth.getTransactionId()" ).isNull();
        softly.assertThat(auth.getTransactionIdLong() ).as(" auth.getTransactionIdLong()" ).isEqualTo(new Long(-2)) ;
        softly.assertThat(auth.getPaymentStatus() ).as(" auth.getPaymentStatus()" ).isEqualTo(1) ;
// com.vodafone.global.er.payment.PaymentAuthStatus
        softly.assertThat(auth.getPaymentStatusEnum().getId() ).as(" auth.getPaymentStatusEnum().getId()" ).isEqualTo(1) ;
        softly.assertThat(auth.getPaymentStatusEnum().getCode() ).as(" auth.getPaymentStatusEnum().getCode()" ).isEqualTo("ACCEPTED");
        softly.assertThat(auth.getPaymentStatusEnum().getRetryPeriod() ).as(" auth.getPaymentStatusEnum().getRetryPeriod()" ).isNull();
// com.vizzavi.ecommerce.business.common.ResponseStatus
        softly.assertThat(auth.getPaymentStatusEnum().getResponseStatus().getName() ).as(" auth.getPaymentStatusEnum().getResponseStatus().getName()" ).isEqualTo("ACCEPTED");
        softly.assertThat(auth.getPaymentStatusEnum().getResponseStatus().getId() ).as(" auth.getPaymentStatusEnum().getResponseStatus().getId()" ).isEqualTo(1) ;
        softly.assertThat(auth.getPaymentStatusEnum().getResponseStatus().isError() ).as(" auth.getPaymentStatusEnum().getResponseStatus().isError()" ).isFalse() ;
        softly.assertThat(auth.getPaymentStatusEnum().getResponseStatus().isFailed() ).as(" auth.getPaymentStatusEnum().getResponseStatus().isFailed()" ).isFalse() ;
        softly.assertThat(auth.getPaymentStatusEnum().getResponseStatus().isAccepted() ).as(" auth.getPaymentStatusEnum().getResponseStatus().isAccepted()" ).isTrue() ;
        softly.assertThat(auth.getPaymentStatusEnum().getResponseStatus().isDenied() ).as(" auth.getPaymentStatusEnum().getResponseStatus().isDenied()" ).isFalse() ;
        softly.assertThat(auth.getPaymentStatusEnum().getResponseStatus().isRejected() ).as(" auth.getPaymentStatusEnum().getResponseStatus().isRejected()" ).isFalse() ;
// com.vizzavi.ecommerce.business.common.ResponseStatus
        softly.assertThat(auth.getStatusEnum().getName() ).as(" auth.getStatusEnum().getName()" ).isEqualTo("ACCEPTED");
        softly.assertThat(auth.getStatusEnum().getId() ).as(" auth.getStatusEnum().getId()" ).isEqualTo(1) ;
        softly.assertThat(auth.getStatusEnum().isError() ).as(" auth.getStatusEnum().isError()" ).isFalse() ;
        softly.assertThat(auth.getStatusEnum().isFailed() ).as(" auth.getStatusEnum().isFailed()" ).isFalse() ;
        softly.assertThat(auth.getStatusEnum().isAccepted() ).as(" auth.getStatusEnum().isAccepted()" ).isTrue() ;
        softly.assertThat(auth.getStatusEnum().isDenied() ).as(" auth.getStatusEnum().isDenied()" ).isFalse() ;
        softly.assertThat(auth.getStatusEnum().isRejected() ).as(" auth.getStatusEnum().isRejected()" ).isFalse() ;
        softly.assertThat(auth.getTaxAmount() ).as(" auth.getTaxAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getAuthorized() ).as(" auth.getAuthorized()" ).isTrue() ;
        softly.assertThat(auth.getPaymentInfo() ).as(" auth.getPaymentInfo()" ).isNull();
        softly.assertThat(auth.getReceiptingCreditBalanceImpact() ).as(" auth.getReceiptingCreditBalanceImpact()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getReceiptingUsageTypeAttribute() ).as(" auth.getReceiptingUsageTypeAttribute()" ).isEqualTo(-1) ;
//check size of array!
        softly.assertThat(auth.getSubscriptionIds().length ).as(" auth.getSubscriptionIds().length" ).isEqualTo(1) ;
        softly.assertThat(auth.isServiceSubmit() ).as(" auth.isServiceSubmit()" ).isFalse() ;
// [J
        softly.assertThat(auth.getMicroServiceSubList() ).as(" auth.getMicroServiceSubList()" ).isNull();
        softly.assertThat(auth.getValidMicroServiceSub() ).as(" auth.getValidMicroServiceSub()" ).isNull();
        softly.assertThat(auth.getTaxRate() ).as(" auth.getTaxRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getTaxCode() ).as(" auth.getTaxCode()" ).isNull();
        softly.assertThat(auth.getStandardRate() ).as(" auth.getStandardRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getAlternativeTaxCode() ).as(" auth.getAlternativeTaxCode()" ).isNull();
        softly.assertThat(auth.getAlternativeTaxRate() ).as(" auth.getAlternativeTaxRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getAlternativeTaxAmount() ).as(" auth.getAlternativeTaxAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getRate() ).as(" auth.getRate()" ).isEqualTo(new Double(1.0)) ;
        softly.assertThat(auth.isSuccess() ).as(" auth.isSuccess()" ).isTrue() ;
        softly.assertThat(auth.getDescription() ).as(" auth.getDescription()" ).isNull();
        softly.assertThat(auth.getTimestamp() ).as(" auth.getTimestamp()" ).isNull();
        softly.assertThat(auth.getUndiscountedStandardRate() ).as(" auth.getUndiscountedStandardRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getNetRate() ).as(" auth.getNetRate()" ).isEqualTo(new Double(1.0)) ;
        softly.assertThat(auth.isAlwaysValidateMsisdn() ).as(" auth.isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(auth.getCurrencyId() ).as(" auth.getCurrencyId()" ).isEqualTo(1100033) ;
        softly.assertThat(auth.getNetStandardRate() ).as(" auth.getNetStandardRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getRatingSystemId() ).as(" auth.getRatingSystemId()" ).isNull();
        softly.assertThat(auth.getRatingSystemVersion() ).as(" auth.getRatingSystemVersion()" ).isNull();
        softly.assertThat(auth.isDiscount() ).as(" auth.isDiscount()" ).isFalse() ;
        softly.assertThat(auth.getDiscountPromoText() ).as(" auth.getDiscountPromoText()" ).isNull();
        softly.assertThat(auth.isAlternativePaymentMethod() ).as(" auth.isAlternativePaymentMethod()" ).isFalse() ;
// com.vizzavi.ecommerce.business.common.RatingAttributes
//        softly.assertThat(auth.getMatchingAttributes().getChannel() ).as(" auth.getMatchingAttributes().getChannel()" ).isEqualTo(998) ;
//        softly.assertThat(auth.getMatchingAttributes().getMultiUsageMode() ).as(" auth.getMatchingAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
//        softly.assertThat(auth.getMatchingAttributes().getNetworkCodeMatchMethod() ).as(" auth.getMatchingAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
//        softly.assertThat(auth.getMatchingAttributes().isPreRatePriceGross() ).as(" auth.getMatchingAttributes().isPreRatePriceGross()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getPreRate() ).as(" auth.getMatchingAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(auth.getMatchingAttributes().getPaymentInformation() ).as(" auth.getMatchingAttributes().getPaymentInformation()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getContentName() ).as(" auth.getMatchingAttributes().getContentName()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getAssetID() ).as(" auth.getMatchingAttributes().getAssetID()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPremiumLevel() ).as(" auth.getMatchingAttributes().getPremiumLevel()" ).isEqualTo(998) ;
//        softly.assertThat(auth.getMatchingAttributes().getReserveOnlyFlag() ).as(" auth.getMatchingAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
//        softly.assertThat(auth.getMatchingAttributes().getSupplierId() ).as(" auth.getMatchingAttributes().getSupplierId()" ).isNullOrEmpty();
//        softly.assertThat(auth.getMatchingAttributes().getDeviceType() ).as(" auth.getMatchingAttributes().getDeviceType()" ).isEqualTo(999) ;
////check size of array!
//        softly.assertThat(auth.getMatchingAttributes().getUserGroups().length ).as(" auth.getMatchingAttributes().getUserGroups().length" ).isEqualTo(1) ;
//        softly.assertThat(auth.getMatchingAttributes().getUserGroup() ).as(" auth.getMatchingAttributes().getUserGroup()" ).isNullOrEmpty();
//        softly.assertThat(auth.getMatchingAttributes().getPaymentType() ).as(" auth.getMatchingAttributes().getPaymentType()" ).isEqualTo(999) ;
//        softly.assertThat(auth.getMatchingAttributes().getEventDateTime() ).as(" auth.getMatchingAttributes().getEventDateTime()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getEventUnits() ).as(" auth.getMatchingAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
////check size of array!
//        softly.assertThat(auth.getMatchingAttributes().getPromoCodes().length ).as(" auth.getMatchingAttributes().getPromoCodes().length" ).isEqualTo(1) ;
////check size of array!
//        softly.assertThat(auth.getMatchingAttributes().getBearerIds().length ).as(" auth.getMatchingAttributes().getBearerIds().length" ).isEqualTo(1) ;
//        softly.assertThat(auth.getMatchingAttributes().getPromoCode() ).as(" auth.getMatchingAttributes().getPromoCode()" ).isNullOrEmpty();
//        softly.assertThat(auth.getMatchingAttributes().getDuration() ).as(" auth.getMatchingAttributes().getDuration()" ).isEqualTo(999) ;
//        softly.assertThat(auth.getMatchingAttributes().getChargingMethod() ).as(" auth.getMatchingAttributes().getChargingMethod()" ).isEqualTo(999) ;
//        softly.assertThat(auth.getMatchingAttributes().getBearer() ).as(" auth.getMatchingAttributes().getBearer()" ).isEqualTo("*");
//        softly.assertThat(auth.getMatchingAttributes().isInteractive() ).as(" auth.getMatchingAttributes().isInteractive()" ).isTrue() ;
//        softly.assertThat(auth.getMatchingAttributes().isIncludeUnavailable() ).as(" auth.getMatchingAttributes().isIncludeUnavailable()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getExpressFlag() ).as(" auth.getMatchingAttributes().getExpressFlag()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().isExpressFlag() ).as(" auth.getMatchingAttributes().isExpressFlag()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().isPreOrder() ).as(" auth.getMatchingAttributes().isPreOrder()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().isCancellationUsage() ).as(" auth.getMatchingAttributes().isCancellationUsage()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getTierName() ).as(" auth.getMatchingAttributes().getTierName()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPromoPrecode() ).as(" auth.getMatchingAttributes().getPromoPrecode()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getUniquePromoCode() ).as(" auth.getMatchingAttributes().getUniquePromoCode()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPromoUniqueCode() ).as(" auth.getMatchingAttributes().getPromoUniqueCode()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getNextCycleDiscount() ).as(" auth.getMatchingAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
//        softly.assertThat(auth.getMatchingAttributes().getHasHistoricPricePointFlag() ).as(" auth.getMatchingAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().isIsForRenewal() ).as(" auth.getMatchingAttributes().isIsForRenewal()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getTaxRate() ).as(" auth.getMatchingAttributes().getTaxRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(auth.getMatchingAttributes().getTaxRateAsDouble() ).as(" auth.getMatchingAttributes().getTaxRateAsDouble()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getAffiliateID() ).as(" auth.getMatchingAttributes().getAffiliateID()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPartnerId() ).as(" auth.getMatchingAttributes().getPartnerId()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getTariff() ).as(" auth.getMatchingAttributes().getTariff()" ).isEqualTo("*");
//        softly.assertThat(auth.getMatchingAttributes().getAggregatorId() ).as(" auth.getMatchingAttributes().getAggregatorId()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().isForcePurchaseFlow() ).as(" auth.getMatchingAttributes().isForcePurchaseFlow()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getReceipientMsisdn() ).as(" auth.getMatchingAttributes().getReceipientMsisdn()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getProductCode() ).as(" auth.getMatchingAttributes().getProductCode()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getMerchantName() ).as(" auth.getMatchingAttributes().getMerchantName()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getInvoiceText() ).as(" auth.getMatchingAttributes().getInvoiceText()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().isReIssueEnabled() ).as(" auth.getMatchingAttributes().isReIssueEnabled()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().isReIssueFlagPresent() ).as(" auth.getMatchingAttributes().isReIssueFlagPresent()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getShortPackageId() ).as(" auth.getMatchingAttributes().getShortPackageId()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getTaxCode() ).as(" auth.getMatchingAttributes().getTaxCode()" ).isEqualTo("*");
//        softly.assertThat(auth.getMatchingAttributes().getHistoryStartDate() ).as(" auth.getMatchingAttributes().getHistoryStartDate()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getVendorId() ).as(" auth.getMatchingAttributes().getVendorId()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().isIsForNextPaymentAmount() ).as(" auth.getMatchingAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getRenewalPreRate() ).as(" auth.getMatchingAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(auth.getMatchingAttributes().isOverrideDisallowPreRateFlag() ).as(" auth.getMatchingAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getContentCategory() ).as(" auth.getMatchingAttributes().getContentCategory()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPartnerUrl() ).as(" auth.getMatchingAttributes().getPartnerUrl()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPartnerContactInfo() ).as(" auth.getMatchingAttributes().getPartnerContactInfo()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPartnerEmail() ).as(" auth.getMatchingAttributes().getPartnerEmail()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPartnerName() ).as(" auth.getMatchingAttributes().getPartnerName()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" auth.getMatchingAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(auth.getMatchingAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" auth.getMatchingAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(auth.getMatchingAttributes().getLinkedByTrialPricepoint() ).as(" auth.getMatchingAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getSubRenewalPricepointId() ).as(" auth.getMatchingAttributes().getSubRenewalPricepointId()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getLinkPricepointId() ).as(" auth.getMatchingAttributes().getLinkPricepointId()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getSubPurchaseTransactionTrial() ).as(" auth.getMatchingAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getDiscardHiddenInactivePricepoints() ).as(" auth.getMatchingAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" auth.getMatchingAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
//        softly.assertThat(auth.getMatchingAttributes().getExtIdentifier1() ).as(" auth.getMatchingAttributes().getExtIdentifier1()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getExtIdentifier2() ).as(" auth.getMatchingAttributes().getExtIdentifier2()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getExtIdentifier3() ).as(" auth.getMatchingAttributes().getExtIdentifier3()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getAccessChannel() ).as(" auth.getMatchingAttributes().getAccessChannel()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getPurchaseChannel() ).as(" auth.getMatchingAttributes().getPurchaseChannel()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getDeviceID() ).as(" auth.getMatchingAttributes().getDeviceID()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getLocal() ).as(" auth.getMatchingAttributes().getLocal()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getMsisdn() ).as(" auth.getMatchingAttributes().getMsisdn()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getLanguageLocale() ).as(" auth.getMatchingAttributes().getLanguageLocale()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getLanguageCode() ).as(" auth.getMatchingAttributes().getLanguageCode()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getExternalField1() ).as(" auth.getMatchingAttributes().getExternalField1()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getExternalField2() ).as(" auth.getMatchingAttributes().getExternalField2()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getExternalTransId() ).as(" auth.getMatchingAttributes().getExternalTransId()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getActiveSubscriptions() ).as(" auth.getMatchingAttributes().getActiveSubscriptions()" ).isNull();
//        softly.assertThat(auth.getMatchingAttributes().getCsrId() ).as(" auth.getMatchingAttributes().getCsrId()" ).isNull();
        softly.assertThat(auth.getInputAttributes() ).as(" auth.getInputAttributes()" ).isNull();
        softly.assertThat(auth.getDiscountPercentage() ).as(" auth.getDiscountPercentage()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getPackageId() ).as(" auth.getPackageId()" ).isEqualTo("*");
        softly.assertThat(auth.getContentId() ).as(" auth.getContentId()" ).isEqualTo("*");
        softly.assertThat(auth.getPricingText1() ).as(" auth.getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(auth.getPricingText2() ).as(" auth.getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(auth.getAlternativeCurrencyId() ).as(" auth.getAlternativeCurrencyId()" ).isEqualTo(0) ;
        softly.assertThat(auth.getAlternativeNetRate() ).as(" auth.getAlternativeNetRate()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getRateIdentifier() ).as(" auth.getRateIdentifier()" ).isEqualTo("content:BP001_TAX_B001_999_999_*_999_999");
//check size of array!
//        softly.assertThat(auth.getRateIdentifiers().length ).as(" auth.getRateIdentifiers().length" ).isEqualTo(1) ;
        softly.assertThat(auth.getUsageTime() ).as(" auth.getUsageTime()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getAccessDuration() ).as(" auth.getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getPricePointId() ).as(" auth.getPricePointId()" ).isEqualTo("content:BP001_TAX_B001_999_999_*_999_999");
        softly.assertThat(auth.isUniquePromoCode() ).as(" auth.isUniquePromoCode()" ).isFalse() ;
        softly.assertThat(auth.isZeroCostIgnore() ).as(" auth.isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(auth.getCustomResourceBalances() ).as(" auth.getCustomResourceBalances()" ).isNull();

        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getBearerIds().length ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPromoCode() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPromoCode()" ).isEqualTo("*");
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getDuration() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getDuration()" ).isEqualTo(999) ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getChargingMethod() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getChargingMethod()" ).isEqualTo(999) ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getBearer() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getBearer()" ).isEqualTo("*");
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isInteractive() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isInteractive()" ).isTrue() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isIncludeUnavailable() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExpressFlag() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExpressFlag()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isExpressFlag() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isExpressFlag()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isCancellationUsage() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isCancellationUsage()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getTierName() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getTierName()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPromoPrecode() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPromoPrecode()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getUniquePromoCode() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getUniquePromoCode()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPromoUniqueCode() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPromoUniqueCode()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getNextCycleDiscount() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getHasHistoricPricePointFlag() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isIsForRenewal() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isIsForRenewal()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getTaxRateAsDouble() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getTaxRateAsDouble()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getAffiliateID() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getAffiliateID()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerId()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getTariff() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getTariff()" ).isEqualTo("*");
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getAggregatorId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getAggregatorId()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isForcePurchaseFlow() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getReceipientMsisdn() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getReceipientMsisdn()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getProductCode() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getProductCode()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getMerchantName() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getMerchantName()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getInvoiceText() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getInvoiceText()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isReIssueEnabled() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isReIssueFlagPresent() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getShortPackageId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getShortPackageId()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getHistoryStartDate() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getHistoryStartDate()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getVendorId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getVendorId()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isIsForNextPaymentAmount() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getRenewalPreRate() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isOverrideDisallowPreRateFlag() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getContentCategory() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getContentCategory()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerUrl() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerUrl()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerContactInfo() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerContactInfo()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerEmail() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerEmail()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerName() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPartnerName()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalCounterToLinkedPricepoint() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPPtRenewalCounterToLinkedPricepoint() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalPricepointId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLinkPricepointId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLinkPricepointId()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getSubPurchaseTransactionTrial() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getDiscardHiddenInactivePricepoints() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isDiscardMiddleAdvancedPricepoints() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier1() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier1()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier2() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier2()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier3() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExtIdentifier3()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getAccessChannel() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getAccessChannel()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPurchaseChannel() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getPurchaseChannel()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getDeviceID() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getDeviceID()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLocal() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLocal()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getMsisdn() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getMsisdn()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLanguageLocale() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLanguageLocale()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLanguageCode() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getLanguageCode()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExternalField1() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExternalField1()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExternalField2() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExternalField2()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExternalTransId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getExternalTransId()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getActiveSubscriptions() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getActiveSubscriptions()" ).isNull();
        softly.assertThat(auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getCsrId() ).as(" auth.getActiveSubscriptions().get(0).getPackage().getServices().get(0).getPricePoints().get(0).getCsrId()" ).isNull();

        softly.assertAll();

    }

}
