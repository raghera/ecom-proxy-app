package com.vodafone.er.ecom.proxy.getsubscriptions;

import com.vizzavi.ecommerce.business.charging.PurchaseAttributes;
import com.vizzavi.ecommerce.business.charging.PurchaseAuthorization;
import com.vizzavi.ecommerce.business.common.EcomApiFactory;
import com.vizzavi.ecommerce.business.selfcare.Subscription;
import org.assertj.core.api.SoftAssertions;
import org.junit.Test;

import java.util.Random;

import static java.util.Locale.UK;
import static junit.framework.TestCase.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

/**
 * Created by Ravi Aghera
 */
public class GetSubscription26_pt9_IT {

    private SoftAssertions softly = new SoftAssertions();


    @Test
    public void getSubscription26() throws Exception {

        final String msisdn = String.valueOf(new Random().nextInt());
        String packageId = "pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*";
        PurchaseAuthorization auth = EcomApiFactory.getPurchaseApi(UK).purchasePackageMsisdn("test", msisdn, packageId, new PurchaseAttributes());
        assertNotNull(auth);
        assertTrue("Auth response is false", auth.isSuccess());

        Subscription usageAuth = EcomApiFactory.getCustcareApi(UK)
                .getSubscription("test-client-id", msisdn, 0, auth.getPackageSubscriptionId());

        assertNotNull(usageAuth);
        assertEquals(auth.getPackageSubscriptionId(), usageAuth.getSubscriptionId());


        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isDefault() ).as(" usageAuth.getTransactions().get(0).getSubscription().isDefault()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isPromotional() ).as(" usageAuth.getTransactions().get(0).getSubscription().isPromotional()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPromotionalExpiryDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPromotionalExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getStatus() ).as(" usageAuth.getTransactions().get(0).getSubscription().getStatus()" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getExternalSubId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getExternalSubId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getOptions() ).as(" usageAuth.getTransactions().get(0).getSubscription().getOptions()" ).isNull();
// com.vizzavi.ecommerce.business.catalog.PricePoint
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getId()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDescription()" ).isEqualTo("Recurring 7 day");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isActive() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isActive()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPreOrder() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPreOrder()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTaxRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTaxCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTaxCode()" ).isEqualTo("TAX");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLinkedByTrialPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExpiryDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingModelTier() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingModelTier()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isArchived() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isArchived()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isBasePricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isBasePricePoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAccessDevice() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAlternativeRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAlternativeRate()" ).isEqualTo(new Double(11.75)) ;

        //check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts().length" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpacts()[0].isResource()" ).isFalse() ;
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().size()).as("usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalanceImpactList().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isTrial() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getGlid() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getGlid()" ).isNullOrEmpty();
// java.util.HashMap
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricepointIdLink() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricepointIdLink()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPreview() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPreview()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getInteractiveFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getInteractiveFlag()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isForcedPurchase() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isForcedPurchase()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isSubscriptionDuplicate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isSubscriptionDuplicate()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFixedExpiryDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFixedExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReserveOnly() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReserveOnly()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMinSubPeriod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMinSubPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPenaltyCharges() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPenaltyCharges()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCancellation() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCancellation()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMonthEndSubscription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMonthEndSubscription()" ).isEqualTo("NULL");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isHistoric() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isHistoric()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFixedRecurrence() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFixedRecurrence()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isFixedRecurringPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isFixedRecurringPricePoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReceipting() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReceipting()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getReceiptingAttribute() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getReceiptingAttribute()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getOrder() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getOrder()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPaymentHandler() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPaymentHandler()" ).isEqualTo("NULL");
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNonMatchAllUserGroups().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNonMatchAllUserGroups().length" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPromo() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPromo()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isSubmitToPaymentHandler() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isSubmitToPaymentHandler()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isSuppressToPaymentHandler() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isSuppressToPaymentHandler()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingTextTemplateName1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingTextTemplateName1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingTextTemplateName2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingTextTemplateName2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTranslatedPricingText1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTranslatedPricingText1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTranslatedPricingText2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTranslatedPricingText2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRecurrenceDay() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRecurrenceDay()" ).isEqualTo(-1) ;
// java.util.HashMap
// java.util.HashMap
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isAlignWithExternal() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isAlignWithExternal()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getGracePeriod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getGracePeriod()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRetryFrequency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRetryFrequency()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSuspensionPeriod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSuspensionPeriod()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isGraceSuspensionRetryFrequencyUndefined() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isGraceSuspensionRetryFrequencyUndefined()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTranslatedPricingText() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTranslatedPricingText()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFairUsageLimit() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFairUsageLimit()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFairUsagePeriod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFairUsagePeriod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFairUsagePeriodUnit() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getFairUsagePeriodUnit()" ).isEqualTo("Day(s)");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtensionPeriod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIncludeServiceForPackageFUP() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIncludeServiceForPackageFUP()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isFairUsagePolicyEnabled() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isFairUsagePolicyEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isTariff() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isTariff()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isHideForPurchaseOptions() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isHideForPurchaseOptions()" ).isFalse() ;
// com.vizzavi.ecommerce.business.catalog.Tax
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getName()" ).isEqualTo("TAX");
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getKey()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRate()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxCode()" ).isEqualTo("TAX");
////check size of list!
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().size()).as("usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().size()").isEqualTo(3);
////if the list is smaller than expected we can't continue, so do a hard assert
//        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().size() >= 3);
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(0).value() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(0).value()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(0).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(0).getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(1).value() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(1).value()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(1).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(1).getKey()" ).isEqualTo(new Long(0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(2).value() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(2).value()" ).isEqualTo(new Double(0.175)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(2).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTax().getTaxRates().get(2).getKey()" ).isEqualTo(new Long(0)) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getSubscription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getBalance() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getBalance()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isRecurring() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isRecurring()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRenewalsUntilLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRenewalsUntilLinkedPricepoint()" ).isEqualTo(-1) ;
// com.vizzavi.ecommerce.business.catalog.internal.PricePointTier
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getKey()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size()).as("usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPromotionalPrice() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPromotionalPrice()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingText() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingText()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPricingModel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPricingModel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getTier() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getTier()" ).isEqualTo("default");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().isDefaultPPT() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().isDefaultPPT()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingTextList() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTier().getPromotionalPricingTextList()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().size()).as("usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAllBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPackageIdentifier() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPackageIdentifier()" ).isEqualTo("package:pAlt_TAX_3_2_999_999_999_*_*_*_false_false_*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getServiceIdentifier() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getServiceIdentifier()" ).isEqualTo("content:pAlt_TAX_*_999_999_*_999_999");
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceField().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getStandardRateWithoutTax() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getStandardRateWithoutTax()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isVolumeType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isVolumeType()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isOriginal() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isOriginal()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getKey()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()).as("usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size()").isEqualTo(2);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().size() >= 2);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getId()" ).isEqualTo("826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getFixedAmount()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(0).getRate()" ).isEqualTo(new Double(10.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getKey()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getId()" ).isEqualTo("1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getType()" ).isEqualTo("CREDIT");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPriceChangeStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getFixedAmount()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getScaledAmount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getPricePoint()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getNotificationThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getBalanceImpacts().get(1).getRate()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPrice() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPrice()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingText()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPricingModel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPricingModel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getTier() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getTier()" ).isEqualTo("default");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].isDefaultPPT() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].isDefaultPPT()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricePointTiers()[0].getPromotionalPricingTextList()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getProtectedFk() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getProtectedFk()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getmPricingText1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getmPricingText1()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getmPricingText2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getmPricingText2()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isNonRecurring() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isNonRecurring()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isEvent() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isEvent()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getStandardRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getStandardRate()" ).isEqualTo(new Double(11.75)) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances().length" ).isEqualTo(2) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("British Pound Sterling");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getSubscription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getBalance() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNetRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNetRate()" ).isEqualTo(new Double(10.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isAlwaysValidateMsisdn() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isAlwaysValidateMsisdn()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isDiscount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isDiscount()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDiscountPromoText() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDiscountPromoText()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPackageId()" ).isEqualTo("pAlt");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getContentId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getContentId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingText1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingText1()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingText2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPricingText2()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUsageTime() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUsageTime()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAccessDuration() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAccessDuration()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isZeroCostIgnore() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isZeroCostIgnore()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getName()" ).isEqualTo("Content Credit");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getBalance() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getBalance()" ).isEqualTo(new Double(-2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCustomResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getChannel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMultiUsageMode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNetworkCodeMatchMethod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPreRatePriceGross() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPreRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPaymentInformation() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPaymentInformation()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getContentName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getContentName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAssetID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAssetID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPremiumLevel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getReserveOnlyFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSupplierId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDeviceType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUserGroups().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUserGroup() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPaymentType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPaymentType()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getEventDateTime() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getEventDateTime()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getEventUnits() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoCodes().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBearerIds().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDuration() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getChargingMethod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBearer() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getBearer()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isInteractive() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isInteractive()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIncludeUnavailable() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExpressFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isExpressFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isCancellationUsage() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTierName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTierName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoPrecode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoPrecode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUniquePromoCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getUniquePromoCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoUniqueCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPromoUniqueCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNextCycleDiscount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getHasHistoricPricePointFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIsForRenewal() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTaxRateAsDouble() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAffiliateID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAffiliateID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTariff() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getTariff()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAggregatorId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAggregatorId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isForcePurchaseFlow() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getReceipientMsisdn() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getReceipientMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getProductCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getProductCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMerchantName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getInvoiceText() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getInvoiceText()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReIssueEnabled() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReIssueFlagPresent() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getShortPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getShortPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getHistoryStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getHistoryStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getVendorId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getVendorId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIsForNextPaymentAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRenewalPreRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isOverrideDisallowPreRateFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getContentCategory() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getContentCategory()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerUrl() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerUrl()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerContactInfo() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerContactInfo()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerEmail() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerEmail()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPartnerName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSubRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPPtRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSubRenewalPricepointId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLinkPricepointId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLinkPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSubPurchaseTransactionTrial() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDiscardHiddenInactivePricepoints() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isDiscardMiddleAdvancedPricepoints() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtIdentifier1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtIdentifier2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtIdentifier3() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAccessChannel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getAccessChannel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPurchaseChannel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getPurchaseChannel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDeviceID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getDeviceID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLocal() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLocal()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMsisdn() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLanguageLocale() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLanguageLocale()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLanguageCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getLanguageCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExternalField1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExternalField1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExternalField2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExternalField2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExternalTransId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getExternalTransId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getActiveSubscriptions() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getActiveSubscriptions()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCsrId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPricePoint().getCsrId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isActive() ).as(" usageAuth.getTransactions().get(0).getSubscription().isActive()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPaymentType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPartnerId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getMerchantName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRenewalPreRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getExtIdentifier1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getExtIdentifier2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getExtIdentifier3() ).as(" usageAuth.getTransactions().get(0).getSubscription().getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getMsisdn() ).as(" usageAuth.getTransactions().get(0).getSubscription().getMsisdn()" ).isEqualTo("-663281255");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getCsrId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getCsrId()" ).isEqualTo("test");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getAccount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getAccount()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isInactiveOrClosed() ).as(" usageAuth.getTransactions().get(0).getSubscription().isInactiveOrClosed()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isFailed() ).as(" usageAuth.getTransactions().get(0).getSubscription().isFailed()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isBeingProvisioned() ).as(" usageAuth.getTransactions().get(0).getSubscription().isBeingProvisioned()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isReserved() ).as(" usageAuth.getTransactions().get(0).getSubscription().isReserved()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getLinkedPtID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getLinkedPtID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isPreOrdered() ).as(" usageAuth.getTransactions().get(0).getSubscription().isPreOrdered()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getContentPaymentType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getContentPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPurchaseDeviceType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPurchaseDeviceType()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getNextCyclePercentDiscount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getNextCyclePercentDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getNextPaymentAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getNextPaymentAmount()" ).isEqualTo(new Double(10.0)) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getServiceIds().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getServiceIds().length" ).isEqualTo(1) ;
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().size()).as("usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().size()").isEqualTo(1);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().size() >= 1);
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getName()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getDescription()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getSubscription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getSubscriptionId()" ).isEqualTo("946");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getSubscriptionIdLong()" ).isEqualTo(new Long(946)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getOldestSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getBalance() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getBalance()" ).isEqualTo(new Double(2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalancesList().get(0).getPackageId()" ).isNull();
// com.vodafone.global.er.subscriptionmanagement.ERRatingAttributes
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getChannel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getChannel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getMultiUsageMode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getNetworkCodeMatchMethod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isPreRatePriceGross() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isPreRatePriceGross()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPreRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPaymentInformation() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPaymentInformation()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getContentName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getContentName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAssetID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAssetID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPremiumLevel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPremiumLevel()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getReserveOnlyFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSupplierId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSupplierId()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDeviceType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDeviceType()" ).isEqualTo(999) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getUserGroups().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getUserGroups().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getUserGroup() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getUserGroup()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPaymentType() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getEventDateTime() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getEventDateTime()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getEventUnits() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoCodes().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoCodes().length" ).isEqualTo(1) ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getBearerIds().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getBearerIds().length" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDuration() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDuration()" ).isEqualTo(2) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getChargingMethod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getChargingMethod()" ).isEqualTo(3) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getBearer() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getBearer()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isInteractive() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isInteractive()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isIncludeUnavailable() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isIncludeUnavailable()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExpressFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isExpressFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isPreOrder() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isPreOrder()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isCancellationUsage() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isCancellationUsage()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTierName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTierName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoPrecode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoPrecode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getUniquePromoCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getUniquePromoCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoUniqueCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPromoUniqueCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getNextCycleDiscount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getHasHistoricPricePointFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isIsForRenewal() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isIsForRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTaxRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTaxRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTaxRateAsDouble() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTaxRateAsDouble()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAffiliateID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAffiliateID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTariff() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTariff()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAggregatorId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAggregatorId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isForcePurchaseFlow() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isForcePurchaseFlow()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getReceipientMsisdn() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getReceipientMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getProductCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getProductCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getMerchantName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getInvoiceText() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getInvoiceText()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isReIssueEnabled() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isReIssueEnabled()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isReIssueFlagPresent() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isReIssueFlagPresent()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getShortPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getShortPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTaxCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getTaxCode()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getHistoryStartDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getHistoryStartDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getVendorId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getVendorId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isIsForNextPaymentAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getRenewalPreRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isOverrideDisallowPreRateFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getContentCategory() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getContentCategory()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerUrl() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerUrl()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerContactInfo() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerContactInfo()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerEmail() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerEmail()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPartnerName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLinkedByTrialPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSubRenewalPricepointId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSubRenewalPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLinkPricepointId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLinkPricepointId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSubPurchaseTransactionTrial() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDiscardHiddenInactivePricepoints() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExtIdentifier1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExtIdentifier1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExtIdentifier2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExtIdentifier2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExtIdentifier3() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExtIdentifier3()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAccessChannel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getAccessChannel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPurchaseChannel() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getPurchaseChannel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDeviceID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getDeviceID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLocal() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLocal()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getMsisdn() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLanguageLocale() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLanguageLocale()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLanguageCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getLanguageCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExternalField1() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExternalField1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExternalField2() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExternalField2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExternalTransId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getExternalTransId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getActiveSubscriptions() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getActiveSubscriptions()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getCsrId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRatingAttributes().getCsrId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPaymentTransactionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPaymentTransactionId()" ).isEqualTo(new Long(614)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getNonRefundDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getNonRefundDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getInteractiveUsageFlag() ).as(" usageAuth.getTransactions().get(0).getSubscription().getInteractiveUsageFlag()" ).isEqualTo(1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isFirstUsage() ).as(" usageAuth.getTransactions().get(0).getSubscription().isFirstUsage()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isSubscriptionUsed() ).as(" usageAuth.getTransactions().get(0).getSubscription().isSubscriptionUsed()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getCurrentNoOfOccurences() ).as(" usageAuth.getTransactions().get(0).getSubscription().getCurrentNoOfOccurences()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPenaltyCharge() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPenaltyCharge()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isMinSubscriptionPeriodElapsed() ).as(" usageAuth.getTransactions().get(0).getSubscription().isMinSubscriptionPeriodElapsed()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isUnderGracePeriod() ).as(" usageAuth.getTransactions().get(0).getSubscription().isUnderGracePeriod()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getBatchRetryDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getBatchRetryDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getOverdueExpiryDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getOverdueExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getLastExpiryDate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getLastExpiryDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isWasRecurringTrial() ).as(" usageAuth.getTransactions().get(0).getSubscription().isWasRecurringTrial()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getParentPackageID() ).as(" usageAuth.getTransactions().get(0).getSubscription().getParentPackageID()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getTransactions().size()).as("usageAuth.getTransactions().get(0).getSubscription().getTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getTransactions().size() >= 0);
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRefundTransactions().size()).as("usageAuth.getTransactions().get(0).getSubscription().getRefundTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getRefundTransactions().size() >= 0);
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPreviousStatus() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPreviousStatus()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isParentAlsoPurchased() ).as(" usageAuth.getTransactions().get(0).getSubscription().isParentAlsoPurchased()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isProvisionOnUsageSuccess() ).as(" usageAuth.getTransactions().get(0).getSubscription().isProvisionOnUsageSuccess()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getLastUsageTransactionIdForSameContent() ).as(" usageAuth.getTransactions().get(0).getSubscription().getLastUsageTransactionIdForSameContent()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getSpId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getSpId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPartnerTaxRate() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPartnerTaxRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getCountryId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isWasRecurringPromoCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().isWasRecurringPromoCode()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getLastPaymentTransaction() ).as(" usageAuth.getTransactions().get(0).getSubscription().getLastPaymentTransaction()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getB2BPartner() ).as(" usageAuth.getTransactions().get(0).getSubscription().getB2BPartner()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getSubscription().getRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isRenewalPreRateGross() ).as(" usageAuth.getTransactions().get(0).getSubscription().isRenewalPreRateGross()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getNextPricePointId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getNextPricePointId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getLastPaymentTransactionAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getLastPaymentTransactionAmount()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getLastToLastPaymentTransactionAmount() ).as(" usageAuth.getTransactions().get(0).getSubscription().getLastToLastPaymentTransactionAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isPricePointChangeOnRenewal() ).as(" usageAuth.getTransactions().get(0).getSubscription().isPricePointChangeOnRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getOldSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getOldSubscriptionId()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getOldMsisdn() ).as(" usageAuth.getTransactions().get(0).getSubscription().getOldMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isProvisionable() ).as(" usageAuth.getTransactions().get(0).getSubscription().isProvisionable()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getFuturePricePointRenewals() ).as(" usageAuth.getTransactions().get(0).getSubscription().getFuturePricePointRenewals()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPurcServiceList() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPurcServiceList()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPaymentTransactions().size()).as("usageAuth.getTransactions().get(0).getSubscription().getPaymentTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getPaymentTransactions().size() >= 0);
//check size of list!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getModifyTransactions().size()).as("usageAuth.getTransactions().get(0).getSubscription().getModifyTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getTransactions().get(0).getSubscription().getModifyTransactions().size() >= 0);
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getNextCyclePercentValue() ).as(" usageAuth.getTransactions().get(0).getSubscription().getNextCyclePercentValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getLockId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getLockId()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isArchived() ).as(" usageAuth.getTransactions().get(0).getSubscription().isArchived()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getExtensionPeriod() ).as(" usageAuth.getTransactions().get(0).getSubscription().getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isRecurring() ).as(" usageAuth.getTransactions().get(0).getSubscription().isRecurring()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getSubscription().getSubscriptionIdLong()" ).isEqualTo(new Long(946)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isRefundable() ).as(" usageAuth.getTransactions().get(0).getSubscription().isRefundable()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isSuperPackage() ).as(" usageAuth.getTransactions().get(0).getSubscription().isSuperPackage()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPackageClass() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPackageClass()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().isSuspended() ).as(" usageAuth.getTransactions().get(0).getSubscription().isSuspended()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances().length ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getName()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getSubscription() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getSubscriptionId()" ).isEqualTo("946");
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getThreshold() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getSubscriptionIdLong()" ).isNotNull() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getBalance() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(2.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getMicroServiceSubList() ).as(" usageAuth.getTransactions().get(0).getSubscription().getMicroServiceSubList()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscription().getPackageId() ).as(" usageAuth.getTransactions().get(0).getSubscription().getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getSubscriptionId()" ).isEqualTo("946");
        softly.assertThat(usageAuth.getTransactions().get(0).getStatus() ).as(" usageAuth.getTransactions().get(0).getStatus()" ).isEqualTo(101) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getServiceId() ).as(" usageAuth.getTransactions().get(0).getServiceId()" ).isNull();
// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().getName() ).as(" usageAuth.getTransactions().get(0).getChargingResource().getName()" ).isEqualTo("GBP");
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().getCode() ).as(" usageAuth.getTransactions().get(0).getChargingResource().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getChargingResource().getDescription()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getChargingResource().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getChargingResource().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().isToken() ).as(" usageAuth.getTransactions().get(0).getChargingResource().isToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getChargingResource().isUsageToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getChargingResource().isPayToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getChargingResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getChargingResource().isCurrency()" ).isTrue() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getChargingResource().isResource() ).as(" usageAuth.getTransactions().get(0).getChargingResource().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getDescription() ).as(" usageAuth.getTransactions().get(0).getDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getContentName() ).as(" usageAuth.getTransactions().get(0).getContentName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getAssetID() ).as(" usageAuth.getTransactions().get(0).getAssetID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getPaymentType() ).as(" usageAuth.getTransactions().get(0).getPaymentType()" ).isEqualTo(10010) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getEventUnits() ).as(" usageAuth.getTransactions().get(0).getEventUnits()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getBearer() ).as(" usageAuth.getTransactions().get(0).getBearer()" ).isEqualTo("*");
        softly.assertThat(usageAuth.getTransactions().get(0).getExpressFlag() ).as(" usageAuth.getTransactions().get(0).getExpressFlag()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getTierName() ).as(" usageAuth.getTransactions().get(0).getTierName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getPromoPrecode() ).as(" usageAuth.getTransactions().get(0).getPromoPrecode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getPromoUniqueCode() ).as(" usageAuth.getTransactions().get(0).getPromoUniqueCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getNextCycleDiscount() ).as(" usageAuth.getTransactions().get(0).getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getTaxRate() ).as(" usageAuth.getTransactions().get(0).getTaxRate()" ).isEqualTo(new Double(0.175)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getAffiliateID() ).as(" usageAuth.getTransactions().get(0).getAffiliateID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getPartnerId() ).as(" usageAuth.getTransactions().get(0).getPartnerId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getAggregatorId() ).as(" usageAuth.getTransactions().get(0).getAggregatorId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getReceipientMsisdn() ).as(" usageAuth.getTransactions().get(0).getReceipientMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getProductCode() ).as(" usageAuth.getTransactions().get(0).getProductCode()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getMerchantName() ).as(" usageAuth.getTransactions().get(0).getMerchantName()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getInvoiceText() ).as(" usageAuth.getTransactions().get(0).getInvoiceText()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getContentCategory() ).as(" usageAuth.getTransactions().get(0).getContentCategory()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getAccessChannel() ).as(" usageAuth.getTransactions().get(0).getAccessChannel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseChannel() ).as(" usageAuth.getTransactions().get(0).getPurchaseChannel()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getDeviceID() ).as(" usageAuth.getTransactions().get(0).getDeviceID()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getMsisdn() ).as(" usageAuth.getTransactions().get(0).getMsisdn()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getExternalField1() ).as(" usageAuth.getTransactions().get(0).getExternalField1()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getExternalField2() ).as(" usageAuth.getTransactions().get(0).getExternalField2()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getExternalTransId() ).as(" usageAuth.getTransactions().get(0).getExternalTransId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getCsrId() ).as(" usageAuth.getTransactions().get(0).getCsrId()" ).isEqualTo("test");
        softly.assertThat(usageAuth.getTransactions().get(0).getSpId() ).as(" usageAuth.getTransactions().get(0).getSpId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getAccessDevice() ).as(" usageAuth.getTransactions().get(0).getAccessDevice()" ).isEqualTo(999) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getSubscriptionIdLong()" ).isEqualTo(new Long(946)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getNonRefundableDescription() ).as(" usageAuth.getTransactions().get(0).getNonRefundableDescription()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).isRefundable() ).as(" usageAuth.getTransactions().get(0).isRefundable()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getStandardRate() ).as(" usageAuth.getTransactions().get(0).getStandardRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getAuthCode() ).as(" usageAuth.getTransactions().get(0).getAuthCode()" ).isEqualTo("P00007/614Z 1472832418357");
//check size of array!
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances().length ).as(" usageAuth.getTransactions().get(0).getResourceBalances().length" ).isEqualTo(1) ;
//// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getName() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getName()" ).isEqualTo("GBP");
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getDescription()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isCurrency()" ).isTrue() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getResource().isResource()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getSubscription() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getSubscription()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getSubscriptionId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getThreshold() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(-1)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getBalance() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(2.0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getResourceBalances()[0].getPackageId() ).as(" usageAuth.getTransactions().get(0).getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getPaymentErrorId() ).as(" usageAuth.getTransactions().get(0).getPaymentErrorId()" ).isEqualTo("OK");
        softly.assertThat(usageAuth.getTransactions().get(0).getPaymentErrorDescription() ).as(" usageAuth.getTransactions().get(0).getPaymentErrorDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getTransactionId() ).as(" usageAuth.getTransactions().get(0).getTransactionId()" ).isEqualTo("614");
        softly.assertThat(usageAuth.getTransactions().get(0).getTransactionIdLong() ).as(" usageAuth.getTransactions().get(0).getTransactionIdLong()" ).isEqualTo(new Long(614)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getPaymentStatus() ).as(" usageAuth.getTransactions().get(0).getPaymentStatus()" ).isEqualTo(101) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getTaxAmount() ).as(" usageAuth.getTransactions().get(0).getTaxAmount()" ).isEqualTo(new Double(1.75)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getPaymentInfo() ).as(" usageAuth.getTransactions().get(0).getPaymentInfo()" ).isEqualTo("This is payment info from Pay Auth handler");
// com.vodafone.global.er.subscriptionmanagement.ERRatingAttributes
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getChannel() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getChannel()" ).isEqualTo(999) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getMultiUsageMode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getMultiUsageMode()" ).isEqualTo(0) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getNetworkCodeMatchMethod() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getNetworkCodeMatchMethod()" ).isEqualTo(-1) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isPreRatePriceGross() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isPreRatePriceGross()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPreRate() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPaymentInformation() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPaymentInformation()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getContentName() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getContentName()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getAssetID() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getAssetID()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPremiumLevel() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPremiumLevel()" ).isEqualTo(999) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getReserveOnlyFlag() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getReserveOnlyFlag()" ).isEqualTo(0) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getSupplierId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getSupplierId()" ).isEqualTo("*");
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getDeviceType() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getDeviceType()" ).isEqualTo(999) ;
////check size of array!
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getUserGroups().length ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getUserGroups().length" ).isEqualTo(1) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getUserGroup() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getUserGroup()" ).isEqualTo("*");
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPaymentType() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPaymentType()" ).isEqualTo(10010) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getEventUnits() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getEventUnits()" ).isEqualTo(new Double(0.0)) ;
////check size of array!
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoCodes().length ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoCodes().length" ).isEqualTo(1) ;
////check size of array!
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getBearerIds().length ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getBearerIds().length" ).isEqualTo(1) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoCode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoCode()" ).isEqualTo("*");
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getDuration() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getDuration()" ).isEqualTo(2) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getChargingMethod() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getChargingMethod()" ).isEqualTo(3) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getBearer() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getBearer()" ).isEqualTo("*");
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isInteractive() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isInteractive()" ).isTrue() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isIncludeUnavailable() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isIncludeUnavailable()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getExpressFlag() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getExpressFlag()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isExpressFlag() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isExpressFlag()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isPreOrder() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isPreOrder()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isCancellationUsage() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isCancellationUsage()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getTierName() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getTierName()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoPrecode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoPrecode()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getUniquePromoCode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getUniquePromoCode()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoUniqueCode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPromoUniqueCode()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getNextCycleDiscount() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getNextCycleDiscount()" ).isEqualTo(new Double(0.0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getHasHistoricPricePointFlag() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getHasHistoricPricePointFlag()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isIsForRenewal() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isIsForRenewal()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getTaxRate() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getTaxRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getTaxRateAsDouble() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getTaxRateAsDouble()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getAffiliateID() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getAffiliateID()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getTariff() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getTariff()" ).isEqualTo("*");
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getAggregatorId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getAggregatorId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isForcePurchaseFlow() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isForcePurchaseFlow()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getReceipientMsisdn() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getReceipientMsisdn()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getProductCode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getProductCode()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getMerchantName() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getMerchantName()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getInvoiceText() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getInvoiceText()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isReIssueEnabled() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isReIssueEnabled()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isReIssueFlagPresent() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isReIssueFlagPresent()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getShortPackageId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getShortPackageId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getTaxCode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getTaxCode()" ).isEqualTo("*");
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getHistoryStartDate() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getHistoryStartDate()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getVendorId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getVendorId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isIsForNextPaymentAmount() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isIsForNextPaymentAmount()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getRenewalPreRate() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getRenewalPreRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isOverrideDisallowPreRateFlag() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isOverrideDisallowPreRateFlag()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getContentCategory() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getContentCategory()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerUrl() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerUrl()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerContactInfo() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerContactInfo()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerEmail() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerEmail()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerName() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPartnerName()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getSubRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getSubRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPPtRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPPtRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getLinkedByTrialPricepoint() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getLinkedByTrialPricepoint()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getSubRenewalPricepointId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getSubRenewalPricepointId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getLinkPricepointId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getLinkPricepointId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getSubPurchaseTransactionTrial() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getSubPurchaseTransactionTrial()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getDiscardHiddenInactivePricepoints() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getDiscardHiddenInactivePricepoints()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().isDiscardMiddleAdvancedPricepoints() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().isDiscardMiddleAdvancedPricepoints()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getExtIdentifier1() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getExtIdentifier1()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getExtIdentifier2() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getExtIdentifier2()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getExtIdentifier3() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getExtIdentifier3()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getAccessChannel() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getAccessChannel()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getPurchaseChannel() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getPurchaseChannel()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getDeviceID() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getDeviceID()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getLocal() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getLocal()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getMsisdn() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getMsisdn()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getLanguageLocale() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getLanguageLocale()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getLanguageCode() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getLanguageCode()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getExternalField1() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getExternalField1()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getExternalField2() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getExternalField2()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getExternalTransId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getExternalTransId()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getActiveSubscriptions() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getActiveSubscriptions()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getMatchingAttributes().getCsrId() ).as(" usageAuth.getTransactions().get(0).getMatchingAttributes().getCsrId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getPackageId() ).as(" usageAuth.getTransactions().get(0).getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getRateIdentifier() ).as(" usageAuth.getTransactions().get(0).getRateIdentifier()" ).isEqualTo("pAlt__X__package:pAlt_TAX_3_2_999_999_999_*_*");
        softly.assertThat(usageAuth.getTransactions().get(0).getUsageTime() ).as(" usageAuth.getTransactions().get(0).getUsageTime()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).isZeroCostIgnore() ).as(" usageAuth.getTransactions().get(0).isZeroCostIgnore()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getLocalPurchaseDate() ).as(" usageAuth.getTransactions().get(0).getLocalPurchaseDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getLocalPurchaseDateCal() ).as(" usageAuth.getTransactions().get(0).getLocalPurchaseDateCal()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseRate() ).as(" usageAuth.getTransactions().get(0).getPurchaseRate()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseNetRate() ).as(" usageAuth.getTransactions().get(0).getPurchaseNetRate()" ).isEqualTo(new Double(10.0)) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().getName() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().getName()" ).isEqualTo("GBP");
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().getCode() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().getCode()" ).isEqualTo(826) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().getDescription() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().getDescription()" ).isNull();
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().getCountryId() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().getCountryId()" ).isEqualTo(0) ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().getResourceName() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().getResourceName()" ).isEqualTo("ChargingResource_826");
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().isToken() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().isToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().isUsageToken() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().isUsageToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().isPayToken() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().isPayToken()" ).isFalse() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().getResourceSymbol() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_826");
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().isCurrency() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().isCurrency()" ).isTrue() ;
//        softly.assertThat(usageAuth.getTransactions().get(0).getPurchaseCurrency().isResource() ).as(" usageAuth.getTransactions().get(0).getPurchaseCurrency().isResource()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getNextCycleDiscountPercent() ).as(" usageAuth.getTransactions().get(0).getNextCycleDiscountPercent()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getRefundEnlargementDate() ).as(" usageAuth.getTransactions().get(0).getRefundEnlargementDate()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getRefundPaymentTransactionId() ).as(" usageAuth.getTransactions().get(0).getRefundPaymentTransactionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getRefundPaymentTransactionIdLong() ).as(" usageAuth.getTransactions().get(0).getRefundPaymentTransactionIdLong()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getRefundable() ).as(" usageAuth.getTransactions().get(0).getRefundable()" ).isTrue() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getModificationInfo() ).as(" usageAuth.getTransactions().get(0).getModificationInfo()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getClientId() ).as(" usageAuth.getTransactions().get(0).getClientId()" ).isEqualTo("test");
        softly.assertThat(usageAuth.getTransactions().get(0).getHostId() ).as(" usageAuth.getTransactions().get(0).getHostId()" ).isEqualTo("Ravis-MBP.home");
        softly.assertThat(usageAuth.getTransactions().get(0).getNextCycleDiscountValue() ).as(" usageAuth.getTransactions().get(0).getNextCycleDiscountValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getContentDescription() ).as(" usageAuth.getTransactions().get(0).getContentDescription()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSessionId() ).as(" usageAuth.getTransactions().get(0).getSessionId()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getTransactions().get(0).getAssetId() ).as(" usageAuth.getTransactions().get(0).getAssetId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getBalanceImpact() ).as(" usageAuth.getTransactions().get(0).getBalanceImpact()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getSubRecords() ).as(" usageAuth.getTransactions().get(0).getSubRecords()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getDeviceId() ).as(" usageAuth.getTransactions().get(0).getDeviceId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSuitabilityDecision() ).as(" usageAuth.getTransactions().get(0).getSuitabilityDecision()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getParentTransactionId() ).as(" usageAuth.getTransactions().get(0).getParentTransactionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getParentTransactionIdLong() ).as(" usageAuth.getTransactions().get(0).getParentTransactionIdLong()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.getTransactions().get(0).getReIssue() ).as(" usageAuth.getTransactions().get(0).getReIssue()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getTransactions().get(0).isContainsReIssueService() ).as(" usageAuth.getTransactions().get(0).isContainsReIssueService()" ).isFalse() ;
        softly.assertThat(usageAuth.getTransactions().get(0).getIsPrepay() ).as(" usageAuth.getTransactions().get(0).getIsPrepay()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getModifyTransactionId() ).as(" usageAuth.getTransactions().get(0).getModifyTransactionId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getChildSpId() ).as(" usageAuth.getTransactions().get(0).getChildSpId()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).getSpType() ).as(" usageAuth.getTransactions().get(0).getSpType()" ).isNull();
        softly.assertThat(usageAuth.getTransactions().get(0).isRefundTransaction() ).as(" usageAuth.getTransactions().get(0).isRefundTransaction()" ).isFalse() ;
// com.vizzavi.ecommerce.business.selfcare.Transaction$MetaType
        softly.assertThat(usageAuth.getTransactions().get(0).getReason() ).as(" usageAuth.getTransactions().get(0).getReason()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getRefundTransactions().size()).as("usageAuth.getRefundTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getRefundTransactions().size() >= 0);
        softly.assertThat(usageAuth.getPreviousStatus() ).as(" usageAuth.getPreviousStatus()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.isParentAlsoPurchased() ).as(" usageAuth.isParentAlsoPurchased()" ).isFalse() ;
        softly.assertThat(usageAuth.isProvisionOnUsageSuccess() ).as(" usageAuth.isProvisionOnUsageSuccess()" ).isFalse() ;
        softly.assertThat(usageAuth.getLastUsageTransactionIdForSameContent() ).as(" usageAuth.getLastUsageTransactionIdForSameContent()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getSpId() ).as(" usageAuth.getSpId()" ).isNull();
        softly.assertThat(usageAuth.getPartnerTaxRate() ).as(" usageAuth.getPartnerTaxRate()" ).isEqualTo(new Double(-1.0)) ;
//        softly.assertThat(usageAuth.getCountryId() ).as(" usageAuth.getCountryId()" ).isNull();
        softly.assertThat(usageAuth.isWasRecurringPromoCode() ).as(" usageAuth.isWasRecurringPromoCode()" ).isFalse() ;
        softly.assertThat(usageAuth.getLastPaymentTransaction() ).as(" usageAuth.getLastPaymentTransaction()" ).isNull();
        softly.assertThat(usageAuth.getB2BPartner() ).as(" usageAuth.getB2BPartner()" ).isNull();
        softly.assertThat(usageAuth.getRenewalCounterToLinkedPricepoint() ).as(" usageAuth.getRenewalCounterToLinkedPricepoint()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.isRenewalPreRateGross() ).as(" usageAuth.isRenewalPreRateGross()" ).isFalse() ;
        softly.assertThat(usageAuth.getNextPricePointId() ).as(" usageAuth.getNextPricePointId()" ).isNullOrEmpty();
        softly.assertThat(usageAuth.getLastPaymentTransactionAmount() ).as(" usageAuth.getLastPaymentTransactionAmount()" ).isEqualTo(new Double(11.75)) ;
        softly.assertThat(usageAuth.getLastToLastPaymentTransactionAmount() ).as(" usageAuth.getLastToLastPaymentTransactionAmount()" ).isEqualTo(new Double(-1.0)) ;
        softly.assertThat(usageAuth.isPricePointChangeOnRenewal() ).as(" usageAuth.isPricePointChangeOnRenewal()" ).isFalse() ;
        softly.assertThat(usageAuth.getOldSubscriptionId() ).as(" usageAuth.getOldSubscriptionId()" ).isEqualTo(new Long(-1)) ;
        softly.assertThat(usageAuth.getOldMsisdn() ).as(" usageAuth.getOldMsisdn()" ).isNull();
        softly.assertThat(usageAuth.isProvisionable() ).as(" usageAuth.isProvisionable()" ).isFalse() ;
        softly.assertThat(usageAuth.getFuturePricePointRenewals() ).as(" usageAuth.getFuturePricePointRenewals()" ).isEqualTo(-1) ;
        softly.assertThat(usageAuth.getPurcServiceList() ).as(" usageAuth.getPurcServiceList()" ).isNull();
//check size of list!
        softly.assertThat(usageAuth.getPaymentTransactions().size()).as("usageAuth.getPaymentTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getPaymentTransactions().size() >= 0);
//check size of list!
        softly.assertThat(usageAuth.getModifyTransactions().size()).as("usageAuth.getModifyTransactions().size()").isEqualTo(0);
//if the list is smaller than expected we can't continue, so do a hard assert
        assertTrue(usageAuth.getModifyTransactions().size() >= 0);
        softly.assertThat(usageAuth.getNextCyclePercentValue() ).as(" usageAuth.getNextCyclePercentValue()" ).isEqualTo(new Double(0.0)) ;
        softly.assertThat(usageAuth.getLockId() ).as(" usageAuth.getLockId()" ).isEqualTo(new Long(0)) ;
        softly.assertThat(usageAuth.isArchived() ).as(" usageAuth.isArchived()" ).isFalse() ;
        softly.assertThat(usageAuth.getExtensionPeriod() ).as(" usageAuth.getExtensionPeriod()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.isRecurring() ).as(" usageAuth.isRecurring()" ).isTrue() ;
        softly.assertThat(usageAuth.getSubscriptionIdLong() ).as(" usageAuth.getSubscriptionIdLong()" ).isEqualTo(new Long(946)) ;
        softly.assertThat(usageAuth.isRefundable() ).as(" usageAuth.isRefundable()" ).isFalse() ;
        softly.assertThat(usageAuth.isSuperPackage() ).as(" usageAuth.isSuperPackage()" ).isFalse() ;
        softly.assertThat(usageAuth.getPackageClass() ).as(" usageAuth.getPackageClass()" ).isNull();
        softly.assertThat(usageAuth.isSuspended() ).as(" usageAuth.isSuspended()" ).isFalse() ;
//check size of array!
        softly.assertThat(usageAuth.getResourceBalances().length ).as(" usageAuth.getResourceBalances().length" ).isEqualTo(1) ;
// com.vizzavi.ecommerce.business.common.ChargingResource
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().getName() ).as(" usageAuth.getResourceBalances()[0].getResource().getName()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().getCode() ).as(" usageAuth.getResourceBalances()[0].getResource().getCode()" ).isEqualTo(1100035) ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().getDescription() ).as(" usageAuth.getResourceBalances()[0].getResource().getDescription()" ).isEqualTo("MULTIPLE_1100035");
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().getCountryId() ).as(" usageAuth.getResourceBalances()[0].getResource().getCountryId()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().getResourceName() ).as(" usageAuth.getResourceBalances()[0].getResource().getResourceName()" ).isEqualTo("ChargingResource_1100035");
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().isToken() ).as(" usageAuth.getResourceBalances()[0].getResource().isToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().isUsageToken() ).as(" usageAuth.getResourceBalances()[0].getResource().isUsageToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().isPayToken() ).as(" usageAuth.getResourceBalances()[0].getResource().isPayToken()" ).isFalse() ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().getResourceSymbol() ).as(" usageAuth.getResourceBalances()[0].getResource().getResourceSymbol()" ).isEqualTo("ChargingResource_Symbol_1100035");
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().isCurrency() ).as(" usageAuth.getResourceBalances()[0].getResource().isCurrency()" ).isFalse() ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getResource().isResource() ).as(" usageAuth.getResourceBalances()[0].getResource().isResource()" ).isTrue() ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getSubscription() ).as(" usageAuth.getResourceBalances()[0].getSubscription()" ).isNull();
        softly.assertThat(usageAuth.getResourceBalances()[0].getSubscriptionId() ).as(" usageAuth.getResourceBalances()[0].getSubscriptionId()" ).isNotEmpty();
        softly.assertThat(usageAuth.getResourceBalances()[0].getThreshold() ).as(" usageAuth.getResourceBalances()[0].getThreshold()" ).isEqualTo(0) ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getSubscriptionIdLong() ).as(" usageAuth.getResourceBalances()[0].getSubscriptionIdLong()" ).isEqualTo(new Long(946)) ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getOldestSubscriptionId() ).as(" usageAuth.getResourceBalances()[0].getOldestSubscriptionId()" ).isNull();
        softly.assertThat(usageAuth.getResourceBalances()[0].getBalance() ).as(" usageAuth.getResourceBalances()[0].getBalance()" ).isEqualTo(new Double(2.0)) ;
        softly.assertThat(usageAuth.getResourceBalances()[0].getPackageId() ).as(" usageAuth.getResourceBalances()[0].getPackageId()" ).isNull();
        softly.assertThat(usageAuth.getMicroServiceSubList() ).as(" usageAuth.getMicroServiceSubList()" ).isNull();
        softly.assertThat(usageAuth.getPackageId() ).as(" usageAuth.getPackageId()" ).isNull();

        softly.assertAll();

    }

}
